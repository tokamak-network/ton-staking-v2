{
  "address": "0xDC57724Ea354ec925BaFfCA0cCf8A1248a8E5CF1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "ActivityRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "noticePeriodSeconds",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "votingPeriodSeconds",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "atomicExecute",
          "type": "bool"
        }
      ],
      "name": "AgendaCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "target",
          "type": "address[]"
        }
      ],
      "name": "AgendaExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voting",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "AgendaVoteCasted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        }
      ],
      "name": "CandidateContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "ChangedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMemo",
          "type": "string"
        }
      ],
      "name": "ChangedMemo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prevSlotMax",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "slotMax",
          "type": "uint256"
        }
      ],
      "name": "ChangedSlotMaximum",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedActivityReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "candidateContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        }
      ],
      "name": "Layer2Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorum",
          "type": "uint256"
        }
      ],
      "name": "QuorumChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activityRewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agendaManager",
      "outputs": [
        {
          "internalType": "contract IDAOAgendaManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOfOnCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOfOnCandidateContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "candidateContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidateFactory",
      "outputs": [
        {
          "internalType": "contract ICandidateFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "candidateInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "candidateContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "indexMembers",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "memberJoinedTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rewardPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "claimedTimestamp",
              "type": "uint128"
            }
          ],
          "internalType": "struct IStorageStateCommittee.CandidateInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidatesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agendaID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vote",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_comment",
          "type": "string"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_memberIndex",
          "type": "uint256"
        }
      ],
      "name": "changeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimActivityReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        }
      ],
      "name": "createCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "createCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoVault",
      "outputs": [
        {
          "internalType": "contract IDAOVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reducingMemberIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quorum",
          "type": "uint256"
        }
      ],
      "name": "decreaseMaxMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agendaID",
          "type": "uint256"
        }
      ],
      "name": "endAgendaVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agendaID",
          "type": "uint256"
        }
      ],
      "name": "executeAgenda",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getClaimableActivityReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxMember",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quorum",
          "type": "uint256"
        }
      ],
      "name": "increaseMaxMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "isCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "isExistCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "layer2Registry",
      "outputs": [
        {
          "internalType": "contract ILayer2Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tonAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layer2",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "registerLayer2Candidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_layer2",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "registerLayer2CandidateByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retireMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigManager",
      "outputs": [
        {
          "internalType": "contract ISeigManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agendaID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_status",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_result",
          "type": "uint256"
        }
      ],
      "name": "setAgendaStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateFactory",
          "type": "address"
        }
      ],
      "name": "setCandidateFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "setCreateAgendaFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoVault",
          "type": "address"
        }
      ],
      "name": "setDaoVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_executingPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "setExecutingPeriodSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layer2Registry",
          "type": "address"
        }
      ],
      "name": "setLayer2Registry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "setMemoOnCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "setMemoOnCandidateContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumNoticePeriod",
          "type": "uint256"
        }
      ],
      "name": "setMinimumNoticePeriodSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "setMinimumVotingPeriodSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quorum",
          "type": "uint256"
        }
      ],
      "name": "setQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seigManager",
          "type": "address"
        }
      ],
      "name": "setSeigManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSeigPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSeigUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seigManager",
          "type": "address"
        }
      ],
      "name": "setTargetSeigManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "totalSupplyOnCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalsupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateContract",
          "type": "address"
        }
      ],
      "name": "totalSupplyOnCandidateContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalsupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "updateSeigniorage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_candidates",
          "type": "address[]"
        }
      ],
      "name": "updateSeigniorages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x959c281dd8ea60fa4cc42ac17b13e99d8853e89e8f91a5a76112a4a12dbfa676",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDC57724Ea354ec925BaFfCA0cCf8A1248a8E5CF1",
    "transactionIndex": 0,
    "gasUsed": "5329266",
    "logsBloom": "0x
    "blockHash": "0x21b8bad0437055cda3bd5e4e16d1aef7df5900b9c812c1df52d8015f823ef5c0",
    "transactionHash": "0x959c281dd8ea60fa4cc42ac17b13e99d8853e89e8f91a5a76112a4a12dbfa676",
    "logs": [],
    "blockNumber": 18231451,
    "cumulativeGasUsed": "5329266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87712d450cfd6ca926c6544b6712808e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"ActivityRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"noticePeriodSeconds\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"votingPeriodSeconds\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"atomicExecute\",\"type\":\"bool\"}],\"name\":\"AgendaCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"}],\"name\":\"AgendaExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"AgendaVoteCasted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"CandidateContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"ChangedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMemo\",\"type\":\"string\"}],\"name\":\"ChangedMemo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevSlotMax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slotMax\",\"type\":\"uint256\"}],\"name\":\"ChangedSlotMaximum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedActivityReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"Layer2Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"QuorumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activityRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agendaManager\",\"outputs\":[{\"internalType\":\"contract IDAOAgendaManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfOnCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfOnCandidateContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"candidateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateFactory\",\"outputs\":[{\"internalType\":\"contract ICandidateFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"candidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"candidateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexMembers\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"memberJoinedTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedTimestamp\",\"type\":\"uint128\"}],\"internalType\":\"struct IStorageStateCommittee.CandidateInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidatesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memberIndex\",\"type\":\"uint256\"}],\"name\":\"changeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimActivityReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"createCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"createCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoVault\",\"outputs\":[{\"internalType\":\"contract IDAOVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reducingMemberIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"decreaseMaxMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"endAgendaVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"executeAgenda\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getClaimableActivityReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMember\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"increaseMaxMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isExistCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layer2Registry\",\"outputs\":[{\"internalType\":\"contract ILayer2Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tonAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"registerLayer2Candidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"registerLayer2CandidateByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"contract ISeigManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"setAgendaStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateFactory\",\"type\":\"address\"}],\"name\":\"setCandidateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setCreateAgendaFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoVault\",\"type\":\"address\"}],\"name\":\"setDaoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executingPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setExecutingPeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2Registry\",\"type\":\"address\"}],\"name\":\"setLayer2Registry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"setMemoOnCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"setMemoOnCandidateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumNoticePeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumVotingPeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"setSeigManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSeigPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSeigUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"setTargetSeigManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"totalSupplyOnCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateContract\",\"type\":\"address\"}],\"name\":\"totalSupplyOnCandidateContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"updateSeigniorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"}],\"name\":\"updateSeigniorages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"castVote(uint256,uint256,string)\":{\"params\":{\"_agendaID\":\"The agenda ID\",\"_comment\":\"voting comment\",\"_vote\":\"voting type\"}},\"changeMember(uint256)\":{\"params\":{\"_memberIndex\":\"The member slot index to be replaced\"},\"returns\":{\"_0\":\"Whether or not the execution succeeded\"}},\"decreaseMaxMember(uint256,uint256)\":{\"params\":{\"_quorum\":\"New quorum\",\"_reducingMemberIndex\":\"Reducing member slot index\"}},\"endAgendaVoting(uint256)\":{\"params\":{\"_agendaID\":\"Agenda ID\"}},\"executeAgenda(uint256)\":{\"params\":{\"_agendaID\":\"Agenda ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseMaxMember(uint256,uint256)\":{\"params\":{\"_newMaxMember\":\"New number of member slot\",\"_quorum\":\"New quorum\"}},\"registerLayer2Candidate(address,string)\":{\"params\":{\"_layer2\":\"Layer2 contract address to be registered\",\"_memo\":\"A memo for the candidate\"}},\"registerLayer2CandidateByOwner(address,address,string)\":{\"params\":{\"_layer2\":\"Layer2 contract address to be registered\",\"_memo\":\"A memo for the candidate\",\"_operator\":\"Operator address of the layer2 contract\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"retireMember()\":{\"returns\":{\"_0\":\"Whether or not the execution succeeded\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAgendaStatus(uint256,uint256,uint256)\":{\"params\":{\"_agendaID\":\"Agenda ID\",\"_result\":\"New result\",\"_status\":\"New status\"}},\"setCandidateFactory(address)\":{\"params\":{\"_candidateFactory\":\"New CandidateFactory contract address\"}},\"setCreateAgendaFees(uint256)\":{\"params\":{\"_fees\":\"Fee amount on TON\"}},\"setDaoVault(address)\":{\"params\":{\"_daoVault\":\"New DAOVault contract address\"}},\"setExecutingPeriodSeconds(uint256)\":{\"params\":{\"_executingPeriodSeconds\":\"New executing period in second\"}},\"setLayer2Registry(address)\":{\"params\":{\"_layer2Registry\":\"New Layer2Registry contract address\"}},\"setMemoOnCandidate(address,string)\":{\"params\":{\"_candidate\":\"candidate address\",\"_memo\":\"New memo on this candidate\"}},\"setMemoOnCandidateContract(address,string)\":{\"params\":{\"_candidateContract\":\"candidate contract address\",\"_memo\":\"New memo on this candidate\"}},\"setMinimumNoticePeriodSeconds(uint256)\":{\"params\":{\"_minimumNoticePeriod\":\"New minimum notice period in second\"}},\"setMinimumVotingPeriodSeconds(uint256)\":{\"params\":{\"_minimumVotingPeriod\":\"New minimum voting period in second\"}},\"setQuorum(uint256)\":{\"params\":{\"_quorum\":\"New quorum\"}},\"setSeigManager(address)\":{\"params\":{\"_seigManager\":\"New SeigManager contract address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"updateSeigniorage(address)\":{\"params\":{\"_candidate\":\"Candidate address to be updated\"},\"returns\":{\"_0\":\"Whether or not the execution succeeded\"}},\"updateSeigniorages(address[])\":{\"params\":{\"_candidates\":\"Candidate addresses to be updated\"},\"returns\":{\"_0\":\"Whether or not the execution succeeded\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"castVote(uint256,uint256,string)\":{\"notice\":\"Vote on an agenda\"},\"changeMember(uint256)\":{\"notice\":\"Replaces an existing member\"},\"claimActivityReward(address)\":{\"notice\":\"Claims the activity reward for member\"},\"decreaseMaxMember(uint256,uint256)\":{\"notice\":\"Decreases the number of member slot\"},\"endAgendaVoting(uint256)\":{\"notice\":\"Set the agenda status as ended(denied or dismissed)\"},\"executeAgenda(uint256)\":{\"notice\":\"Execute the accepted agenda\"},\"increaseMaxMember(uint256,uint256)\":{\"notice\":\"Increases the number of member slot\"},\"registerLayer2Candidate(address,string)\":{\"notice\":\"Registers the exist layer2 on DAO\"},\"registerLayer2CandidateByOwner(address,address,string)\":{\"notice\":\"Registers the exist layer2 on DAO by owner\"},\"retireMember()\":{\"notice\":\"Retires member\"},\"setAgendaStatus(uint256,uint256,uint256)\":{\"notice\":\"Set status and result of specific agenda\"},\"setCandidateFactory(address)\":{\"notice\":\"Set CandidateFactory contract address\"},\"setCreateAgendaFees(uint256)\":{\"notice\":\"Set fee amount of creating an agenda\"},\"setDaoVault(address)\":{\"notice\":\"Set DAOVault contract address\"},\"setExecutingPeriodSeconds(uint256)\":{\"notice\":\"Set the executing period\"},\"setLayer2Registry(address)\":{\"notice\":\"Set Layer2Registry contract address\"},\"setMemoOnCandidate(address,string)\":{\"notice\":\"Set memo\"},\"setMemoOnCandidateContract(address,string)\":{\"notice\":\"Set memo\"},\"setMinimumNoticePeriodSeconds(uint256)\":{\"notice\":\"Set the minimum notice period\"},\"setMinimumVotingPeriodSeconds(uint256)\":{\"notice\":\"Set the minimum voting period\"},\"setQuorum(uint256)\":{\"notice\":\"Set new quorum\"},\"setSeigManager(address)\":{\"notice\":\"Set SeigManager contract address\"},\"updateSeigniorage(address)\":{\"notice\":\"Call updateSeigniorage on SeigManager\"},\"updateSeigniorages(address[])\":{\"notice\":\"Call updateSeigniorage on SeigManager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dao/DAOCommitteeExtend.sol\":\"DAOCommitteeExtend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/accessControl/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0xe6e071c60273e947f415e1a02ca4723eeb23d7c9dc706134bd4d215bec08a5ac\",\"license\":\"MIT\"},\"contracts/accessControl/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc1b6afbd096b6d7d27feb0dfaebeb0a192420258454333f7943c2d2f5928dd71\",\"license\":\"MIT\"},\"contracts/accessControl/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x895feb594a737f88284e472930f76d4c75f9804ca9f9dcc9ab0799987effb70e\",\"license\":\"MIT\"},\"contracts/accessControl/ERC165A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165A {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\",\"keccak256\":\"0xd865a77a501b8bed6c7b272d1788ac7dd277ced8602f9866110d2615fe016f05\",\"license\":\"MIT\"},\"contracts/accessControl/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0xdf711688d6519a6ab539e3383f86e025e060ba02047e4426c0e35cc3e9f6a795\",\"license\":\"MIT\"},\"contracts/dao/DAOCommitteeExtend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IERC20 } from  \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ICandidateFactory } from \\\"./interfaces/ICandidateFactory.sol\\\";\\n\\nimport { ICandidate } from \\\"./interfaces/ICandidate.sol\\\";\\nimport { ILayer2 } from \\\"./interfaces/ILayer2.sol\\\";\\nimport { IDAOAgendaManager } from \\\"./interfaces/IDAOAgendaManager.sol\\\";\\nimport { LibAgenda } from \\\"./lib/Agenda.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport {AccessControl} from \\\"../accessControl/AccessControl.sol\\\";\\nimport {ERC165A}  from \\\"../accessControl/ERC165A.sol\\\";\\n\\nimport \\\"./StorageStateCommittee.sol\\\";\\nimport \\\"./StorageStateCommitteeV2.sol\\\";\\n\\ninterface IICandidateFactory {\\n    function setLayerInTimestamp(address _candidateContract) external;\\n    function deploy(\\n        address _sender,\\n        bool _isLayer2Candidate,\\n        string memory _name,\\n        address _committee,\\n        address _seigManager,\\n        bool flag\\n    )\\n        external\\n        returns (address operatorAddress, address layer2Address);\\n}\\n\\ninterface ITarget {\\n    function setSeigManager(address _seigManager) external;\\n}\\n\\ninterface IPauser {\\n    function pause() external ;\\n    function unpause() external;\\n}\\n\\ncontract DAOCommitteeExtend is StorageStateCommittee, AccessControl, ERC165A, StorageStateCommitteeV2 {\\n    using LibAgenda for *;\\n\\n    enum ApplyResult { NONE, SUCCESS, NOT_ELECTION, ALREADY_COMMITTEE, SLOT_INVALID, ADDMEMBER_FAIL, LOW_BALANCE }\\n\\n    struct AgendaCreatingData {\\n        address[] target;\\n        uint128 noticePeriodSeconds;\\n        uint128 votingPeriodSeconds;\\n        bool atomicExecute;\\n        bytes[] functionBytecode;\\n    }\\n\\n    //////////////////////////////\\n    // Events\\n    //////////////////////////////\\n\\n    event QuorumChanged(\\n        uint256 newQuorum\\n    );\\n\\n    event AgendaCreated(\\n        address indexed from,\\n        uint256 indexed id,\\n        address[] targets,\\n        uint128 noticePeriodSeconds,\\n        uint128 votingPeriodSeconds,\\n        bool atomicExecute\\n    );\\n\\n    event AgendaVoteCasted(\\n        address indexed from,\\n        uint256 indexed id,\\n        uint256 voting,\\n        string comment\\n    );\\n\\n    event AgendaExecuted(\\n        uint256 indexed id,\\n        address[] target\\n    );\\n\\n    event CandidateContractCreated(\\n        address indexed candidate,\\n        address indexed candidateContract,\\n        string memo\\n    );\\n\\n    event Layer2Registered(\\n        address indexed candidate,\\n        address indexed candidateContract,\\n        string memo\\n    );\\n\\n    event ChangedMember(\\n        uint256 indexed slotIndex,\\n        address prevMember,\\n        address indexed newMember\\n    );\\n\\n    event ChangedSlotMaximum(\\n        uint256 indexed prevSlotMax,\\n        uint256 indexed slotMax\\n    );\\n\\n    event ClaimedActivityReward(\\n        address indexed candidate,\\n        address receiver,\\n        uint256 amount\\n    );\\n\\n    event ChangedMemo(\\n        address candidate,\\n        string newMemo\\n    );\\n\\n    event ActivityRewardChanged(\\n        uint256 newReward\\n    );\\n\\n    modifier onlyOwner() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"DAOCommittee: msg.sender is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier validMemberIndex(uint256 _index) {\\n        require(_index < maxMember, \\\"DAOCommittee: invalid member index\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(address _addr) {\\n        require(_addr != address(0), \\\"DAOCommittee: zero address\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override (ERC165A) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////\\n    // setters\\n\\n    /// @notice Set SeigManager contract address\\n    /// @param _seigManager New SeigManager contract address\\n    function setSeigManager(address _seigManager) external onlyOwner nonZero(_seigManager) {\\n        seigManager = ISeigManager(_seigManager);\\n    }\\n\\n    function setTargetSeigManager(address target, address _seigManager) external onlyOwner {\\n        ITarget(target).setSeigManager(_seigManager);\\n    }\\n\\n    function setSeigPause() external onlyOwner {\\n       IPauser(address(seigManager)).pause();\\n    }\\n\\n    function setSeigUnpause() external onlyOwner {\\n       IPauser(address(seigManager)).unpause();\\n    }\\n\\n    /// @notice Set SeigManager contract address on candidate contracts\\n    /// @param _candidateContracts Candidate contracts to be set\\n    /// @param _seigManager New SeigManager contract address\\n    // function setCandidatesSeigManager(\\n    //     address[] calldata _candidateContracts,\\n    //     address _seigManager\\n    // )\\n    //     external\\n    //     onlyOwner\\n    //     nonZero(_seigManager)\\n    // {\\n    //     for (uint256 i = 0; i < _candidateContracts.length; i++) {\\n    //         ICandidate(_candidateContracts[i]).setSeigManager(_seigManager);\\n    //     }\\n    // }\\n\\n    /// @notice Set DAOCommitteeProxy contract address on candidate contracts\\n    /// @param _candidateContracts Candidate contracts to be set\\n    /// @param _committee New DAOCommitteeProxy contract address\\n    // function setCandidatesCommittee(\\n    //     address[] calldata _candidateContracts,\\n    //     address _committee\\n    // )\\n    //     external\\n    //     onlyOwner\\n    //     nonZero(_committee)\\n    // {\\n    //     for (uint256 i = 0; i < _candidateContracts.length; i++) {\\n    //         ICandidate(_candidateContracts[i]).setCommittee(_committee);\\n    //     }\\n    // }\\n\\n    /// @notice Set DAOVault contract address\\n    /// @param _daoVault New DAOVault contract address\\n    function setDaoVault(address _daoVault) external onlyOwner nonZero(_daoVault) {\\n        daoVault = IDAOVault(_daoVault);\\n    }\\n\\n    /// @notice Set Layer2Registry contract address\\n    /// @param _layer2Registry New Layer2Registry contract address\\n    function setLayer2Registry(address _layer2Registry) external onlyOwner nonZero(_layer2Registry) {\\n        layer2Registry = ILayer2Registry(_layer2Registry);\\n    }\\n\\n    /// @notice Set DAOAgendaManager contract address\\n    /// @param _agendaManager New DAOAgendaManager contract address\\n    // function setAgendaManager(address _agendaManager) external override onlyOwner nonZero(_agendaManager) {\\n    //     agendaManager = IDAOAgendaManager(_agendaManager);\\n    // }\\n\\n    /// @notice Set CandidateFactory contract address\\n    /// @param _candidateFactory New CandidateFactory contract address\\n    function setCandidateFactory(address _candidateFactory) external onlyOwner nonZero(_candidateFactory) {\\n        candidateFactory = ICandidateFactory(_candidateFactory);\\n    }\\n\\n    /// @notice Set TON contract address\\n    /// @param _ton New TON contract address\\n    // function setTon(address _ton) external onlyOwner nonZero(_ton) {\\n    //     ton = _ton;\\n    // }\\n\\n    /// @notice Set activity reward amount\\n    /// @param _value New activity reward per second\\n    // function setActivityRewardPerSecond(uint256 _value) external onlyOwner {\\n    //     activityRewardPerSecond = _value;\\n    //     emit ActivityRewardChanged(_value);\\n    // }\\n\\n    /// @notice Increases the number of member slot\\n    /// @param _newMaxMember New number of member slot\\n    /// @param _quorum New quorum\\n    function increaseMaxMember(\\n        uint256 _newMaxMember,\\n        uint256 _quorum\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(maxMember < _newMaxMember, \\\"DAOCommittee: You have to call decreaseMaxMember to decrease\\\");\\n        uint256 prevMaxMember = maxMember;\\n        maxMember = _newMaxMember;\\n        fillMemberSlot();\\n        setQuorum(_quorum);\\n        emit ChangedSlotMaximum(prevMaxMember, _newMaxMember);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////\\n    // Managing members\\n    function createCandidate(string calldata _memo)\\n        external\\n    {\\n        address _operator = msg.sender;\\n        require(!isExistCandidate(_operator), \\\"DAOCommittee: candidate already registerd\\\");\\n\\n        // Candidate\\n        address candidateContract = candidateFactory.deploy(\\n            _operator,\\n            false,\\n            _memo,\\n            address(this),\\n            address(seigManager)\\n        );\\n\\n        require(\\n            candidateContract != address(0),\\n            \\\"DAOCommittee: deployed candidateContract is zero\\\"\\n        );\\n        require(\\n            _candidateInfos[_operator].candidateContract == address(0),\\n            \\\"DAOCommittee: The candidate already has contract\\\"\\n        );\\n        require(\\n            layer2Registry.registerAndDeployCoinage(candidateContract, address(seigManager)),\\n            \\\"DAOCommittee: failed to registerAndDeployCoinage\\\"\\n        );\\n\\n        _candidateInfos[_operator] = CandidateInfo({\\n            candidateContract: candidateContract,\\n            memberJoinedTime: 0,\\n            indexMembers: 0,\\n            rewardPeriod: 0,\\n            claimedTimestamp: 0\\n        });\\n\\n        candidates.push(_operator);\\n\\n        emit CandidateContractCreated(_operator, candidateContract, _memo);\\n\\n    }\\n\\n    function createCandidate(string calldata _memo, address _operatorAddress)\\n        public\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n        onlyOwner\\n    {\\n        // Candidate\\n        address candidateContract = candidateFactory.deploy(\\n            _operatorAddress,\\n            false,\\n            _memo,\\n            address(this),\\n            address(seigManager)\\n        );\\n\\n        require(\\n            candidateContract != address(0),\\n            \\\"DAOCommittee: deployed candidateContract is zero\\\"\\n        );\\n\\n        // require(\\n        //     _candidateInfos[_operatorAddress].candidateContract == address(0),\\n        //     \\\"DAOCommittee: The candidate already has contract\\\"\\n        // );\\n\\n        if(_candidateInfos[_operatorAddress].candidateContract != address(0) ) {\\n\\n            require(_oldCandidateInfos[_operatorAddress].candidateContract == address(0), \\\"already migrated\\\");\\n\\n            _oldCandidateInfos[_operatorAddress] = CandidateInfo2({\\n                candidateContract: _candidateInfos[_operatorAddress].candidateContract,\\n                newCandidate: candidateContract,\\n                memberJoinedTime: _candidateInfos[_operatorAddress].memberJoinedTime,\\n                indexMembers: _candidateInfos[_operatorAddress].indexMembers,\\n                rewardPeriod: _candidateInfos[_operatorAddress].rewardPeriod,\\n                claimedTimestamp: _candidateInfos[_operatorAddress].claimedTimestamp\\n            });\\n\\n            _candidateInfos[_operatorAddress].candidateContract = candidateContract;\\n\\n        } else {\\n\\n            _candidateInfos[_operatorAddress] = CandidateInfo({\\n                candidateContract: candidateContract,\\n                memberJoinedTime: 0,\\n                indexMembers: 0,\\n                rewardPeriod: 0,\\n                claimedTimestamp: 0\\n            });\\n\\n            candidates.push(_operatorAddress);\\n        }\\n\\n        require(\\n            layer2Registry.registerAndDeployCoinage(candidateContract, address(seigManager)),\\n            \\\"DAOCommittee: failed to registerAndDeployCoinage\\\"\\n        );\\n\\n        emit CandidateContractCreated(_operatorAddress, candidateContract, _memo);\\n    }\\n\\n    /// @notice Registers the exist layer2 on DAO\\n    /// @param _layer2 Layer2 contract address to be registered\\n    /// @param _memo A memo for the candidate\\n    function registerLayer2Candidate(address _layer2, string memory _memo)\\n        external\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n    {\\n        _registerLayer2Candidate(msg.sender, _layer2, _memo);\\n    }\\n\\n    /// @notice Registers the exist layer2 on DAO by owner\\n    /// @param _operator Operator address of the layer2 contract\\n    /// @param _layer2 Layer2 contract address to be registered\\n    /// @param _memo A memo for the candidate\\n    function registerLayer2CandidateByOwner(address _operator, address _layer2, string memory _memo)\\n        external\\n        onlyOwner\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n    {\\n        _registerLayer2Candidate(_operator, _layer2, _memo);\\n    }\\n\\n    /// @notice Replaces an existing member\\n    /// @param _memberIndex The member slot index to be replaced\\n    /// @return Whether or not the execution succeeded\\n    function changeMember(\\n        uint256 _memberIndex\\n    )\\n        external\\n        validMemberIndex(_memberIndex)\\n        returns (bool)\\n    {\\n        address newMember = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[newMember];\\n        require(\\n            ICandidate(msg.sender).isCandidateContract(),\\n            \\\"DAOCommittee: sender is not a candidate contract\\\"\\n        );\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n        require(\\n            candidateInfo.memberJoinedTime == 0,\\n            \\\"DAOCommittee: already member\\\"\\n        );\\n\\n        address prevMember = members[_memberIndex];\\n        address prevMemberContract = candidateContract(prevMember);\\n\\n        candidateInfo.memberJoinedTime = uint128(block.timestamp);\\n        candidateInfo.indexMembers = _memberIndex;\\n\\n        members[_memberIndex] = newMember;\\n\\n        if (prevMember == address(0)) {\\n            emit ChangedMember(_memberIndex, prevMember, newMember);\\n            return true;\\n        }\\n\\n        require(\\n            ICandidate(msg.sender).totalStaked() > ICandidate(prevMemberContract).totalStaked(),\\n            \\\"not enough amount\\\"\\n        );\\n\\n        CandidateInfo storage prevCandidateInfo = _candidateInfos[prevMember];\\n        prevCandidateInfo.indexMembers = 0;\\n        prevCandidateInfo.rewardPeriod = uint128(uint256(prevCandidateInfo.rewardPeriod) + (block.timestamp - (prevCandidateInfo.memberJoinedTime)));\\n        prevCandidateInfo.memberJoinedTime = 0;\\n\\n        emit ChangedMember(_memberIndex, prevMember, newMember);\\n\\n        return true;\\n    }\\n\\n    /// @notice Retires member\\n    /// @return Whether or not the execution succeeded\\n    function retireMember() onlyMemberContract external returns (bool) {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[candidate];\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n        members[candidateInfo.indexMembers] = address(0);\\n        candidateInfo.rewardPeriod = uint128(uint256(candidateInfo.rewardPeriod) + (block.timestamp - (candidateInfo.memberJoinedTime)));\\n        candidateInfo.memberJoinedTime = 0;\\n\\n        uint256 prevIndex = candidateInfo.indexMembers;\\n        candidateInfo.indexMembers = 0;\\n        emit ChangedMember(prevIndex, candidate, address(0));\\n\\n        return true;\\n    }\\n\\n    /// @notice Set memo\\n    /// @param _candidate candidate address\\n    /// @param _memo New memo on this candidate\\n    function setMemoOnCandidate(\\n        address _candidate,\\n        string calldata _memo\\n    )\\n        external\\n    {\\n        address candidateContract = candidateContract(_candidate);\\n        setMemoOnCandidateContract(candidateContract, _memo);\\n    }\\n\\n    /// @notice Set memo\\n    /// @param _candidateContract candidate contract address\\n    /// @param _memo New memo on this candidate\\n    function setMemoOnCandidateContract(\\n        address _candidateContract,\\n        string calldata _memo\\n    )\\n        public\\n    {\\n        address candidate = ICandidate(_candidateContract).candidate();\\n        address contractOwner = candidate;\\n        if (ICandidate(_candidateContract).isLayer2Candidate()) {\\n            contractOwner = ILayer2(candidate).operator();\\n        }\\n        require(\\n            msg.sender == contractOwner,\\n            \\\"DAOCommittee: sender is not the candidate of this contract\\\"\\n        );\\n\\n        ICandidate(_candidateContract).setMemo(_memo);\\n        emit ChangedMemo(candidate, _memo);\\n    }\\n\\n    /// @notice Decreases the number of member slot\\n    /// @param _reducingMemberIndex Reducing member slot index\\n    /// @param _quorum New quorum\\n    function decreaseMaxMember(\\n        uint256 _reducingMemberIndex,\\n        uint256 _quorum\\n    )\\n        external\\n        onlyOwner\\n        validMemberIndex(_reducingMemberIndex)\\n    {\\n        address reducingMember = members[_reducingMemberIndex];\\n        CandidateInfo storage reducingCandidate = _candidateInfos[reducingMember];\\n\\n        if (_reducingMemberIndex != members.length - 1) {\\n            address tailMember = members[members.length - 1];\\n            CandidateInfo storage tailCandidate = _candidateInfos[tailMember];\\n\\n            tailCandidate.indexMembers = _reducingMemberIndex;\\n            members[_reducingMemberIndex] = tailMember;\\n        }\\n        reducingCandidate.indexMembers = 0;\\n        reducingCandidate.rewardPeriod = uint128(uint256(reducingCandidate.rewardPeriod) + (block.timestamp - (reducingCandidate.memberJoinedTime)));\\n        reducingCandidate.memberJoinedTime = 0;\\n\\n        members.pop();\\n        maxMember = maxMember - 1;\\n        setQuorum(_quorum);\\n\\n        emit ChangedMember(_reducingMemberIndex, reducingMember, address(0));\\n        emit ChangedSlotMaximum(maxMember + 1, maxMember);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////\\n    // Managing agenda\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        AgendaCreatingData memory agendaData = _decodeAgendaData(data);\\n\\n        _createAgenda(\\n            owner,\\n            agendaData.target,\\n            agendaData.noticePeriodSeconds,\\n            agendaData.votingPeriodSeconds,\\n            agendaData.atomicExecute,\\n            agendaData.functionBytecode\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Set new quorum\\n    /// @param _quorum New quorum\\n    function setQuorum(\\n        uint256 _quorum\\n    )\\n        public\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        require(_quorum > maxMember / 2, \\\"DAOCommittee: invalid quorum\\\");\\n        require(_quorum <= maxMember, \\\"DAOCommittee: quorum exceed max member\\\");\\n        quorum = _quorum;\\n        emit QuorumChanged(quorum);\\n    }\\n\\n    /// @notice Set fee amount of creating an agenda\\n    /// @param _fees Fee amount on TON\\n    function setCreateAgendaFees(\\n        uint256 _fees\\n    )\\n        external\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setCreateAgendaFees(_fees);\\n    }\\n\\n    /// @notice Set the minimum notice period\\n    /// @param _minimumNoticePeriod New minimum notice period in second\\n    function setMinimumNoticePeriodSeconds(\\n        uint256 _minimumNoticePeriod\\n    )\\n        external\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setMinimumNoticePeriodSeconds(_minimumNoticePeriod);\\n    }\\n\\n    /// @notice Set the minimum voting period\\n    /// @param _minimumVotingPeriod New minimum voting period in second\\n    function setMinimumVotingPeriodSeconds(\\n        uint256 _minimumVotingPeriod\\n    )\\n        external\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setMinimumVotingPeriodSeconds(_minimumVotingPeriod);\\n    }\\n\\n    /// @notice Set the executing period\\n    /// @param _executingPeriodSeconds New executing period in second\\n    function setExecutingPeriodSeconds(\\n        uint256 _executingPeriodSeconds\\n    )\\n        external\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setExecutingPeriodSeconds(_executingPeriodSeconds);\\n    }\\n\\n    /// @notice Vote on an agenda\\n    /// @param _agendaID The agenda ID\\n    /// @param _vote voting type\\n    /// @param _comment voting comment\\n    function castVote(\\n        uint256 _agendaID,\\n        uint256 _vote,\\n        string calldata _comment\\n    )\\n        external\\n        validAgendaManager\\n    {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[candidate];\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n\\n        agendaManager.castVote(\\n            _agendaID,\\n            candidate,\\n            _vote\\n        );\\n\\n        (uint256 yes, uint256 no, uint256 abstain) = agendaManager.getVotingCount(_agendaID);\\n\\n        if (quorum <= yes) {\\n            // yes\\n            agendaManager.setResult(_agendaID, LibAgenda.AgendaResult.ACCEPT);\\n            agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus.WAITING_EXEC);\\n        } else if (quorum <= no) {\\n            // no\\n            agendaManager.setResult(_agendaID, LibAgenda.AgendaResult.REJECT);\\n            agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus.ENDED);\\n        } else if (quorum <= abstain + no) {\\n            // dismiss\\n            agendaManager.setResult(_agendaID, LibAgenda.AgendaResult.DISMISS);\\n            agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus.ENDED);\\n        }\\n\\n        emit AgendaVoteCasted(msg.sender, _agendaID, _vote, _comment);\\n    }\\n\\n    /// @notice Set the agenda status as ended(denied or dismissed)\\n    /// @param _agendaID Agenda ID\\n    function endAgendaVoting(uint256 _agendaID) external {\\n        agendaManager.endAgendaVoting(_agendaID);\\n    }\\n\\n    /// @notice Execute the accepted agenda\\n    /// @param _agendaID Agenda ID\\n    function executeAgenda(uint256 _agendaID) external validAgendaManager {\\n        require(\\n            agendaManager.canExecuteAgenda(_agendaID),\\n            \\\"DAOCommittee: can not execute the agenda\\\"\\n        );\\n\\n         (address[] memory target,\\n             bytes[] memory functionBytecode,\\n             bool atomicExecute,\\n             uint256 executeStartFrom\\n         ) = agendaManager.getExecutionInfo(_agendaID);\\n\\n        if (atomicExecute) {\\n            agendaManager.setExecutedAgenda(_agendaID);\\n            for (uint256 i = 0; i < target.length; i++) {\\n                (bool success, ) = address(target[i]).call(functionBytecode[i]);\\n                require(success, \\\"DAOCommittee: Failed to execute the agenda\\\");\\n            }\\n        } else {\\n            uint256 succeeded = 0;\\n            for (uint256 i = executeStartFrom; i < target.length; i++) {\\n                bool success = _call(target[i], functionBytecode[i].length, functionBytecode[i]);\\n                if (success) {\\n                    succeeded = succeeded + 1;\\n                } else {\\n                    break;\\n                }\\n            }\\n\\n            agendaManager.setExecutedCount(_agendaID, succeeded);\\n            if (executeStartFrom + succeeded == target.length) {\\n                agendaManager.setExecutedAgenda(_agendaID);\\n            }\\n        }\\n\\n        emit AgendaExecuted(_agendaID, target);\\n    }\\n\\n    /// @notice Set status and result of specific agenda\\n    /// @param _agendaID Agenda ID\\n    /// @param _status New status\\n    /// @param _result New result\\n    function setAgendaStatus(uint256 _agendaID, uint256 _status, uint256 _result) external onlyOwner {\\n        agendaManager.setResult(_agendaID, LibAgenda.AgendaResult(_result));\\n        agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus(_status));\\n    }\\n\\n    /// @notice Call updateSeigniorage on SeigManager\\n    /// @param _candidate Candidate address to be updated\\n    /// @return Whether or not the execution succeeded\\n    function updateSeigniorage(address _candidate) public returns (bool) {\\n        address candidateContract = _candidateInfos[_candidate].candidateContract;\\n        return ICandidate(candidateContract).updateSeigniorage();\\n    }\\n\\n    /// @notice Call updateSeigniorage on SeigManager\\n    /// @param _candidates Candidate addresses to be updated\\n    /// @return Whether or not the execution succeeded\\n    function updateSeigniorages(address[] calldata _candidates) external returns (bool) {\\n        for (uint256 i = 0; i < _candidates.length; i++) {\\n            require(\\n                updateSeigniorage(_candidates[i]),\\n                \\\"DAOCommittee: failed to update seigniorage\\\"\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Claims the activity reward for member\\n    function claimActivityReward(address _receiver) external {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[candidate];\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n\\n        uint256 amount = getClaimableActivityReward(candidate);\\n        require(amount > 0, \\\"DAOCommittee: you don't have claimable ton\\\");\\n\\n        daoVault.claimTON(_receiver, amount);\\n        candidateInfo.claimedTimestamp = uint128(block.timestamp);\\n        candidateInfo.rewardPeriod = 0;\\n\\n        emit ClaimedActivityReward(candidate, _receiver, amount);\\n    }\\n\\n    function _registerLayer2Candidate(address _operator, address _layer2, string memory _memo)\\n        internal\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n    {\\n        require(!isExistCandidate(_layer2), \\\"DAOCommittee: candidate already registerd\\\");\\n\\n        require(\\n            _layer2 != address(0),\\n            \\\"DAOCommittee: deployed candidateContract is zero\\\"\\n        );\\n        require(\\n            _candidateInfos[_layer2].candidateContract == address(0),\\n            \\\"DAOCommittee: The candidate already has contract\\\"\\n        );\\n        ILayer2 layer2 = ILayer2(_layer2);\\n        require(\\n            layer2.isLayer2(),\\n            \\\"DAOCommittee: invalid layer2 contract\\\"\\n        );\\n        require(\\n            layer2.operator() == _operator,\\n            \\\"DAOCommittee: invalid operator\\\"\\n        );\\n\\n        address candidateContract = candidateFactory.deploy(\\n            _layer2,\\n            true,\\n            _memo,\\n            address(this),\\n            address(seigManager)\\n        );\\n\\n        require(\\n            candidateContract != address(0),\\n            \\\"DAOCommittee: deployed candidateContract is zero\\\"\\n        );\\n\\n        _candidateInfos[_layer2] = CandidateInfo({\\n            candidateContract: candidateContract,\\n            memberJoinedTime: 0,\\n            indexMembers: 0,\\n            rewardPeriod: 0,\\n            claimedTimestamp: 0\\n        });\\n\\n        candidates.push(_layer2);\\n\\n        emit Layer2Registered(_layer2, candidateContract, _memo);\\n    }\\n\\n    function fillMemberSlot() internal {\\n        for (uint256 i = members.length; i < maxMember; i++) {\\n            members.push(address(0));\\n        }\\n    }\\n\\n    function _decodeAgendaData(bytes calldata input)\\n        internal\\n        pure\\n        returns (AgendaCreatingData memory data)\\n    {\\n        (data.target, data.noticePeriodSeconds, data.votingPeriodSeconds, data.atomicExecute, data.functionBytecode) =\\n            abi.decode(input, (address[], uint128, uint128, bool, bytes[]));\\n    }\\n\\n    function payCreatingAgendaFee(address _creator) internal {\\n        uint256 fee = agendaManager.createAgendaFees();\\n\\n        require(IERC20(ton).transferFrom(_creator, address(this), fee), \\\"DAOCommittee: failed to transfer ton from creator\\\");\\n        require(IERC20(ton).transfer(address(1), fee), \\\"DAOCommittee: failed to burn\\\");\\n    }\\n\\n    function _createAgenda(\\n        address _creator,\\n        address[] memory _targets,\\n        uint128 _noticePeriodSeconds,\\n        uint128 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] memory _functionBytecodes\\n    )\\n        internal\\n        validAgendaManager\\n        returns (uint256)\\n    {\\n        // pay to create agenda, burn ton.\\n        payCreatingAgendaFee(_creator);\\n\\n        uint256 agendaID = agendaManager.newAgenda(\\n            _targets,\\n            _noticePeriodSeconds,\\n            _votingPeriodSeconds,\\n            _atomicExecute,\\n            _functionBytecodes\\n        );\\n\\n        emit AgendaCreated(\\n            _creator,\\n            agendaID,\\n            _targets,\\n            _noticePeriodSeconds,\\n            _votingPeriodSeconds,\\n            _atomicExecute\\n        );\\n\\n        return agendaID;\\n    }\\n\\n    function _call(address target, uint256 paramLength, bytes memory param) internal returns (bool) {\\n        bool result;\\n        assembly {\\n            let data := add(param, 32)\\n            result := call(sub(gas(), 40000), target, 0, data, paramLength, 0, 0)\\n        }\\n\\n        return result;\\n    }\\n\\n    function isCandidate(address _candidate) external view returns (bool) {\\n        CandidateInfo storage info = _candidateInfos[_candidate];\\n\\n        if (info.candidateContract == address(0)) {\\n            return false;\\n        }\\n\\n        bool supportIsCandidateContract = ERC165Checker.supportsInterface(\\n            info.candidateContract,\\n            ICandidate(info.candidateContract).isCandidateContract.selector\\n        );\\n\\n        if (supportIsCandidateContract == false) {\\n            return false;\\n        }\\n\\n        return ICandidate(info.candidateContract).isCandidateContract();\\n    }\\n\\n    function totalSupplyOnCandidate(\\n        address _candidate\\n    )\\n        external\\n        view\\n        returns (uint256 totalsupply)\\n    {\\n        address candidateContract = candidateContract(_candidate);\\n        return totalSupplyOnCandidateContract(candidateContract);\\n    }\\n\\n    function balanceOfOnCandidate(\\n        address _candidate,\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        address candidateContract = candidateContract(_candidate);\\n        return balanceOfOnCandidateContract(candidateContract, _account);\\n    }\\n\\n    function totalSupplyOnCandidateContract(\\n        address _candidateContract\\n    )\\n        public\\n        view\\n        returns (uint256 totalsupply)\\n    {\\n        require(_candidateContract != address(0), \\\"This account is not a candidate\\\");\\n\\n        return ICandidate(_candidateContract).totalStaked();\\n    }\\n\\n    function balanceOfOnCandidateContract(\\n        address _candidateContract,\\n        address _account\\n    )\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        require(_candidateContract != address(0), \\\"This account is not a candidate\\\");\\n\\n        return ICandidate(_candidateContract).stakedOf(_account);\\n    }\\n\\n    function candidatesLength() external view returns (uint256) {\\n        return candidates.length;\\n    }\\n\\n    function isExistCandidate(address _candidate) public view returns (bool isExist) {\\n        return _candidateInfos[_candidate].candidateContract != address(0);\\n    }\\n\\n    function getClaimableActivityReward(address _candidate) public view returns (uint256) {\\n        CandidateInfo storage info = _candidateInfos[_candidate];\\n        uint256 period = info.rewardPeriod;\\n\\n        if (info.memberJoinedTime > 0) {\\n            if (info.memberJoinedTime > info.claimedTimestamp) {\\n                period = period + block.timestamp - info.memberJoinedTime;\\n            } else {\\n                period = period + block.timestamp - info.claimedTimestamp;\\n            }\\n        }\\n\\n        return period * activityRewardPerSecond;\\n        // return 0;\\n    }\\n\\n    // function getOldCandidateInfos(address _oldCandidate) public view returns (CandidateInfo2 memory) {\\n    //     return _oldCandidateInfos[_oldCandidate];\\n    // }\\n}\\n\",\"keccak256\":\"0x17ec5a7cf355d171e9d0bc0dc43faec9ecb3e1f4844dfdb744650ef94ccb74a1\",\"license\":\"MIT\"},\"contracts/dao/StorageStateCommittee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IStorageStateCommittee } from \\\"./interfaces/IStorageStateCommittee.sol\\\";\\nimport { ICandidateFactory } from \\\"./interfaces/ICandidateFactory.sol\\\";\\nimport { ILayer2Registry } from \\\"./interfaces/ILayer2Registry.sol\\\";\\nimport { ISeigManager } from \\\"./interfaces/ISeigManager.sol\\\";\\nimport { IDAOAgendaManager } from \\\"./interfaces/IDAOAgendaManager.sol\\\";\\nimport { IDAOVault } from \\\"./interfaces/IDAOVault.sol\\\";\\nimport { ICandidate } from \\\"./interfaces/ICandidate.sol\\\";\\n\\ncontract StorageStateCommittee is IStorageStateCommittee {\\n    enum AgendaStatus { NONE, NOTICE, VOTING, EXEC, ENDED, PENDING, RISK }\\n    enum AgendaResult { UNDEFINED, ACCEPT, REJECT, DISMISS }\\n\\n    address public override ton;\\n    IDAOVault public override daoVault;\\n    IDAOAgendaManager public override agendaManager;\\n    ICandidateFactory public override candidateFactory;\\n    ILayer2Registry public override layer2Registry;\\n    ISeigManager public override seigManager;\\n\\n    address[] public override candidates;\\n    address[] public override members;\\n    uint256 public override maxMember;\\n\\n    // candidate EOA => candidate information\\n    mapping(address => CandidateInfo) internal _candidateInfos;\\n    uint256 public override quorum;\\n\\n    uint256 public override activityRewardPerSecond;\\n\\n    modifier validAgendaManager() {\\n        require(address(agendaManager) != address(0), \\\"StorageStateCommittee: AgendaManager is zero\\\");\\n        _;\\n    }\\n\\n    modifier validCommitteeL2Factory() {\\n        require(address(candidateFactory) != address(0), \\\"StorageStateCommittee: invalid CommitteeL2Factory\\\");\\n        _;\\n    }\\n\\n    modifier validLayer2Registry() {\\n        require(address(layer2Registry) != address(0), \\\"StorageStateCommittee: invalid Layer2Registry\\\");\\n        _;\\n    }\\n\\n    modifier validSeigManager() {\\n        require(address(seigManager) != address(0), \\\"StorageStateCommittee: invalid SeigManagere\\\");\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(isMember(msg.sender), \\\"StorageStateCommittee: not a member\\\");\\n        _;\\n    }\\n\\n    modifier onlyMemberContract() {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        require(isMember(candidate), \\\"StorageStateCommittee: not a member\\\");\\n        _;\\n    }\\n\\n    function isMember(address _candidate) public view override returns (bool) {\\n        return _candidateInfos[_candidate].memberJoinedTime > 0;\\n    }\\n\\n    function candidateContract(address _candidate) public view override returns (address) {\\n        return _candidateInfos[_candidate].candidateContract;\\n    }\\n\\n    function candidateInfos(address _candidate) external view override returns (CandidateInfo memory) {\\n        return _candidateInfos[_candidate];\\n    }\\n\\n    /*function getCandidate() public view returns (address) {\\n        ILayer2(_candidateContract).\\n    }*/\\n}\\n\",\"keccak256\":\"0x099641d946a8f057dc9c833a05bc2e2508acf921c2a40ab950df39cd86917774\",\"license\":\"MIT\"},\"contracts/dao/StorageStateCommitteeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract StorageStateCommitteeV2 {\\n    address internal _implementation;\\n    bool public pauseProxy;\\n\\n    // \\ub9c8\\uc774\\uadf8\\ub808\\uc774\\uc158 \\ud568. \\uc774\\uc804 \\ub808\\uc774\\uc5b4 \\uc815\\ubcf4\\n    mapping(address => CandidateInfo2) internal _oldCandidateInfos;\\n\\n    struct CandidateInfo2 {\\n        address candidateContract;\\n        address newCandidate;\\n        uint256 indexMembers;\\n        uint128 memberJoinedTime;\\n        uint128 rewardPeriod;\\n        uint128 claimedTimestamp;\\n    }\\n}\",\"keccak256\":\"0x0af1f683619588784da39db1f90bf45eb91aa26278d770f98eee7753729e585f\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ICandidate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandidate {\\n    function setSeigManager(address _seigMan) external;\\n    function setCommittee(address _committee) external;\\n    function updateSeigniorage() external returns (bool);\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function castVote(uint256 _agendaID, uint256 _vote, string calldata _comment) external;\\n    function isCandidateContract() external view returns (bool);\\n    function totalStaked() external view returns (uint256 totalsupply);\\n    function stakedOf(address _account) external view returns (uint256 amount);\\n    function setMemo(string calldata _memo) external;\\n    function claimActivityReward() external;\\n\\n    // getter\\n    function candidate() external view returns (address);\\n    function isLayer2Candidate() external view returns (bool);\\n    function memo() external view returns (string memory);\\n    function committee() external view returns (address);\\n    function seigManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb1042418e437063a54c21f5b111bfaa8ec86c223ced38e8ded5ad3fd6ea94dc6\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ICandidateFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandidateFactory {\\n    function deploy(\\n        address _candidate,\\n        bool _isLayer2Candidate,\\n        string memory _name,\\n        address _committee,\\n        address _seigManager\\n    )\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0xf072df53f6ee1327d903660d03644ffac60caf82d91a22b58d03bf9b61279a3a\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IDAOAgendaManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { LibAgenda } from \\\"../lib/Agenda.sol\\\";\\nimport { IDAOCommittee } from \\\"../interfaces/IDAOCommittee.sol\\\";\\n\\ninterface IDAOAgendaManager  {\\n    struct Ratio {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    function setCommittee(address _committee) external;\\n    function setCreateAgendaFees(uint256 _createAgendaFees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriodSeconds) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriodSeconds) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function newAgenda(\\n        address[] memory _targets,\\n        uint256 _noticePeriodSeconds,\\n        uint256 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] calldata _functionBytecodes\\n    )\\n        external\\n        returns (uint256 agendaID);\\n    function castVote(uint256 _agendaID, address voter, uint256 _vote) external returns (bool);\\n    function setExecutedAgenda(uint256 _agendaID) external;\\n    function setResult(uint256 _agendaID, LibAgenda.AgendaResult _result) external;\\n    function setStatus(uint256 _agendaID, LibAgenda.AgendaStatus _status) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function setExecutedCount(uint256 _agendaID, uint256 _count) external;\\n\\n    // -- view functions\\n    function isVoter(uint256 _agendaID, address _user) external view returns (bool);\\n    function hasVoted(uint256 _agendaID, address _user) external view returns (bool);\\n    function getVoteStatus(uint256 _agendaID, address _user) external view returns (bool, uint256);\\n    function getAgendaNoticeEndTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingStartTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingEndTimeSeconds(uint256 _agendaID) external view returns (uint256) ;\\n\\n    function canExecuteAgenda(uint256 _agendaID) external view returns (bool);\\n    function getAgendaStatus(uint256 _agendaID) external view returns (uint256 status);\\n    function totalAgendas() external view returns (uint256);\\n    function getAgendaResult(uint256 _agendaID) external view returns (uint256 result, bool executed);\\n    function getExecutionInfo(uint256 _agendaID)\\n        external\\n        view\\n        returns(\\n            address[] memory target,\\n            bytes[] memory functionBytecode,\\n            bool atomicExecute,\\n            uint256 executeStartFrom\\n        );\\n    function isVotableStatus(uint256 _agendaID) external view returns (bool);\\n    function getVotingCount(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 countingYes,\\n            uint256 countingNo,\\n            uint256 countingAbstain\\n        );\\n    function getAgendaTimestamps(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 createdTimestamp,\\n            uint256 noticeEndTimestamp,\\n            uint256 votingStartedTimestamp,\\n            uint256 votingEndTimestamp,\\n            uint256 executedTimestamp\\n        );\\n    function numAgendas() external view returns (uint256);\\n    function getVoters(uint256 _agendaID) external view returns (address[] memory);\\n\\n    function getStatus(uint256 _createAgendaFees) external pure returns (LibAgenda.AgendaStatus);\\n\\n    // getter\\n    function committee() external view returns (IDAOCommittee);\\n    function createAgendaFees() external view returns (uint256);\\n    function minimumNoticePeriodSeconds() external view returns (uint256);\\n    function minimumVotingPeriodSeconds() external view returns (uint256);\\n    function executingPeriodSeconds() external view returns (uint256);\\n    function agendas(uint256 _index) external view returns (LibAgenda.Agenda memory);\\n    function voterInfos(uint256 _index1, address _index2) external view returns (LibAgenda.Voter memory);\\n}\\n\",\"keccak256\":\"0xac0efb5aa81978832200385fa82e0e244f6323b78b3d20ab42f113d6429e760f\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IDAOCommittee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IStorageStateCommittee } from \\\"./IStorageStateCommittee.sol\\\";\\n\\ninterface IDAOCommittee is IStorageStateCommittee {\\n    //--owner\\n    function setSeigManager(address _seigManager) external;\\n    function setCandidatesSeigManager(address[] calldata _candidateContracts, address _seigManager) external;\\n    function setCandidatesCommittee(address[] calldata _candidateContracts, address _committee) external;\\n    function setLayer2Registry(address _layer2Registry) external;\\n    function setAgendaManager(address _agendaManager) external;\\n    function setCandidateFactory(address _candidateFactory) external;\\n    function setTon(address _ton) external;\\n    function setActivityRewardPerSecond(uint256 _value) external;\\n    function setDaoVault(address _daoVault) external;\\n\\n    function increaseMaxMember(uint256 _newMaxMember, uint256 _quorum) external;\\n    function decreaseMaxMember(uint256 _reducingMemberIndex, uint256 _quorum) external;\\n    function createCandidate(string calldata _memo) external;\\n    function registerLayer2Candidate(address _layer2, string memory _memo) external;\\n    function registerLayer2CandidateByOwner(address _operator, address _layer2, string memory _memo) external;\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function setMemoOnCandidate(address _candidate, string calldata _memo) external;\\n    function setMemoOnCandidateContract(address _candidate, string calldata _memo) external;\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    )\\n        external\\n        returns (bool);\\n\\n    function setQuorum(uint256 _quorum) external;\\n    function setCreateAgendaFees(uint256 _fees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriod) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriod) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function castVote(uint256 _AgendaID, uint256 _vote, string calldata _comment) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function executeAgenda(uint256 _AgendaID) external;\\n    function setAgendaStatus(uint256 _agendaID, uint256 _status, uint256 _result) external;\\n\\n    function updateSeigniorage(address _candidate) external returns (bool);\\n    function updateSeigniorages(address[] calldata _candidates) external returns (bool);\\n    function claimActivityReward(address _receiver) external;\\n\\n    function isCandidate(address _candidate) external view returns (bool);\\n    function totalSupplyOnCandidate(address _candidate) external view returns (uint256);\\n    function balanceOfOnCandidate(address _candidate, address _account) external view returns (uint256);\\n    function totalSupplyOnCandidateContract(address _candidateContract) external view returns (uint256);\\n    function balanceOfOnCandidateContract(address _candidateContract, address _account) external view returns (uint256);\\n    function candidatesLength() external view returns (uint256);\\n    function isExistCandidate(address _candidate) external view returns (bool);\\n    function getClaimableActivityReward(address _candidate) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0xc2f5d65030e0e4f6c0238fb7cbf538735d0dd5f42f1bb54a54194df9609edcb7\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IDAOVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDAOVault {\\n    function setTON(address _ton) external;\\n    function setWTON(address _wton) external;\\n    function approveTON(address _to, uint256 _amount) external;\\n    function approveWTON(address _to, uint256 _amount) external;\\n    function approveERC20(address _token, address _to, uint256 _amount) external;\\n    function claimTON(address _to, uint256 _amount) external;\\n    function claimWTON(address _to, uint256 _amount) external;\\n    function claimERC20(address _token, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x02100dbd2150bd601a97f543cc103afddf7ad9b047730bde0f62322ab1d6e838\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ILayer2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ILayer2 {\\n  function operator() external view returns (address);\\n  function isLayer2() external view returns (bool);\\n  function currentFork() external view returns (uint256);\\n  function lastEpoch(uint256 forkNumber) external view returns (uint256);\\n  function changeOperator(address _operator) external;\\n}\\n\",\"keccak256\":\"0x299fe726cc6eae9f3d62dab74e9b2ac6ba60e37e76ce96f2d4b13dffd38fcab8\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ILayer2Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ILayer2Registry {\\n    function layer2s(address layer2) external view returns (bool);\\n\\n    function register(address layer2) external returns (bool);\\n    function numLayer2s() external view returns (uint256);\\n    function layer2ByIndex(uint256 index) external view returns (address);\\n\\n    function deployCoinage(address layer2, address seigManager) external returns (bool);\\n    function registerAndDeployCoinage(address layer2, address seigManager) external returns (bool);\\n    function unregister(address layer2) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc88c88b356847a1bcf001ff4c2df02982af7c16e19f6edca7d7daf4060b52c17\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ISeigManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISeigManager {\\n    function registry() external view returns (address);\\n    function depositManager() external view returns (address);\\n    function ton() external view returns (address);\\n    function wton() external view returns (address);\\n    function powerton() external view returns (address);\\n    function tot() external view returns (address);\\n    function coinages(address layer2) external view returns (address);\\n    function commissionRates(address layer2) external view returns (uint256);\\n\\n    function lastCommitBlock(address layer2) external view returns (uint256);\\n    function seigPerBlock() external view returns (uint256);\\n    function lastSeigBlock() external view returns (uint256);\\n    function pausedBlock() external view returns (uint256);\\n    function unpausedBlock() external view returns (uint256);\\n    function DEFAULT_FACTOR() external view returns (uint256);\\n\\n    function deployCoinage(address layer2) external returns (bool);\\n    function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n    function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\\n    function stakeOf(address layer2, address account) external view returns (uint256);\\n    function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n    function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n    function updateSeigniorage() external returns (bool);\\n    function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n    function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa2f4326afb1647bfb3ebd2db1cf0d2eb30f7c461f15e00a32ac3251f260d6383\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IStorageStateCommittee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ICandidateFactory } from \\\"../interfaces/ICandidateFactory.sol\\\";\\nimport { ILayer2Registry } from \\\"../interfaces/ILayer2Registry.sol\\\";\\nimport { ISeigManager } from \\\"../interfaces/ISeigManager.sol\\\";\\nimport { IDAOAgendaManager } from \\\"../interfaces/IDAOAgendaManager.sol\\\";\\nimport { IDAOVault } from \\\"../interfaces/IDAOVault.sol\\\";\\n\\ninterface IStorageStateCommittee {\\n    struct CandidateInfo {\\n        address candidateContract;\\n        uint256 indexMembers;\\n        uint128 memberJoinedTime;\\n        uint128 rewardPeriod;\\n        uint128 claimedTimestamp;\\n    }\\n\\n    function ton() external returns (address);\\n    function daoVault() external returns (IDAOVault);\\n    function agendaManager() external returns (IDAOAgendaManager);\\n    function candidateFactory() external returns (ICandidateFactory);\\n    function layer2Registry() external returns (ILayer2Registry);\\n    function seigManager() external returns (ISeigManager);\\n    function candidates(uint256 _index) external returns (address);\\n    function members(uint256 _index) external returns (address);\\n    function maxMember() external returns (uint256);\\n    function candidateInfos(address _candidate) external returns (CandidateInfo memory);\\n    function quorum() external returns (uint256);\\n    function activityRewardPerSecond() external returns (uint256);\\n\\n    function isMember(address _candidate) external returns (bool);\\n    function candidateContract(address _candidate) external returns (address);\\n}\\n\\n\\n\",\"keccak256\":\"0x9433acfc9e1376f0f659d0120d0050eda0ba7f6a8c56761d484f25ab0f310a1f\",\"license\":\"MIT\"},\"contracts/dao/lib/Agenda.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary LibAgenda {\\n    //using LibAgenda for Agenda;\\n\\n    enum AgendaStatus { NONE, NOTICE, VOTING, WAITING_EXEC, EXECUTED, ENDED }\\n    enum AgendaResult { PENDING, ACCEPT, REJECT, DISMISS }\\n\\n    //votor : based operator\\n    struct Voter {\\n        bool isVoter;\\n        bool hasVoted;\\n        uint256 vote;\\n    }\\n\\n    // counting abstainVotes yesVotes noVotes\\n    struct Agenda {\\n        uint256 createdTimestamp;\\n        uint256 noticeEndTimestamp;\\n        uint256 votingPeriodInSeconds;\\n        uint256 votingStartedTimestamp;\\n        uint256 votingEndTimestamp;\\n        uint256 executableLimitTimestamp;\\n        uint256 executedTimestamp;\\n        uint256 countingYes;\\n        uint256 countingNo;\\n        uint256 countingAbstain;\\n        AgendaStatus status;\\n        AgendaResult result;\\n        address[] voters;\\n        bool executed;\\n    }\\n\\n    struct AgendaExecutionInfo {\\n        address[] targets;\\n        bytes[] functionBytecodes;\\n        bool atomicExecute;\\n        uint256 executeStartFrom;\\n    }\\n\\n    /*function getAgenda(Agenda[] storage agendas, uint256 index) public view returns (Agenda storage agenda) {\\n        return agendas[index];\\n    }*/\\n}\\n\",\"keccak256\":\"0x3a3cd408202a0ace22d83bcfe72ae55d8b28cbceeab6a6e539eaf978c0ab6403\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000246301ffc9a760e01b6200002a565b620000ae565b6001600160e01b03198082169003620000895760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152600d60205260409020805460ff19166001179055565b615efc80620000be6000396000f3fe608060405234801561001057600080fd5b50600436106103ba5760003560e01c80636da8f3ce116101f4578063a217fddf1161011a578063c7cac42c116100ad578063d51b9e931161007c578063d51b9e9314610958578063d525f04f1461096b578063d547741f1461097e578063efd579791461099157600080fd5b8063c7cac42c1461090c578063ca15c8731461091f578063cc48b94714610932578063cf2a239c1461094557600080fd5b8063b5dd1158116100e9578063b5dd1158146108cb578063c0bc5304146108de578063c1ba4e59146108f1578063c4ef9c001461090457600080fd5b8063a217fddf14610866578063a230c5241461086e578063ad6675dc146108a5578063b4f69b6a146108b857600080fd5b806381bfe42c1161019257806391d148541161016157806391d148541461081a5780639932e94c1461082d578063a1ea352514610840578063a1f3ac2a1461085357600080fd5b806381bfe42c146107d9578063885b4696146107e157806389ea4300146107f45780639010d07c1461080757600080fd5b8063773b7f65116101ce578063773b7f65146107a257806378767d33146107aa5780637f331636146107bd578063805aca20146107c657600080fd5b80636da8f3ce146107695780636fb7f5581461077c5780637657f20a1461078f57600080fd5b80633477ee2e116102e45780635903bd6c1161027757806363a8fd891161024657806363a8fd89146106f2578063651d08cd1461071757806369b1227a146107435780636becff271461075657600080fd5b80635903bd6c146106a65780635daf08ca146106b95780635fba7a56146106cc578063607cf734146106df57600080fd5b80634b799db1116102b35780634b799db11461063f57806350e8f17d14610652578063561a1dab1461066557806357f0a8671461069357600080fd5b80633477ee2e146105f357806336568abe146106065780634273ca1614610619578063440b69ad1461062c57600080fd5b806323d09fdf1161035c5780632af60ff41161032b5780632af60ff4146104c95780632e011c1e146104dc5780632f2ff15d146105cd57806332a45ef6146105e057600080fd5b806323d09fdf14610455578063248a9ca31461046857806324f99b1e1461048b57806327fd92fd1461049e57600080fd5b806311f19e041161039857806311f19e041461041357806316f7f982146104265780631703a01814610439578063216f486b1461044257600080fd5b806301ffc9a7146103bf57806303e3c9ac146103e7578063047f52f2146103fe575b600080fd5b6103d26103cd36600461519f565b610999565b60405190151581526020015b60405180910390f35b6103f060085481565b6040519081526020016103de565b61041161040c3660046151de565b6109bd565b005b6103d26104213660046151fb565b610a67565b6103f0610434366004615214565b610fca565b6103f0600a5481565b6104116104503660046151fb565b611093565b6104116104633660046151fb565b611567565b6103f06104763660046151fb565b6000908152600c602052604090206002015490565b610411610499366004615296565b61164b565b6002546104b1906001600160a01b031681565b6040516001600160a01b0390911681526020016103de565b6104116104d73660046151de565b611b25565b6105786104ea3660046151de565b6040805160a0808201835260008083526020808401829052838501829052606080850183905260809485018390526001600160a01b0396871683526009825291859020855193840186528054909616835260018601549083015260028501546001600160801b0380821695840195909552600160801b90048416908201526003909301549091169082015290565b6040805182516001600160a01b0316815260208084015190820152828201516001600160801b03908116928201929092526060808401518316908201526080928301519091169181019190915260a0016103de565b6104116105db3660046152e9565b611bc6565b6104116105ee36600461530e565b611c62565b6104b16106013660046151fb565b612436565b6104116106143660046152e9565b612460565b6103d2610627366004615365565b6124e8565b61041161063a3660046154a5565b612527565b61041161064d3660046151de565b6126aa565b610411610660366004615507565b61274b565b6103d26106733660046151de565b6001600160a01b0390811660009081526009602052604090205416151590565b6103d26106a1366004615529565b6129e6565b6001546104b1906001600160a01b031681565b6104b16106c73660046151fb565b612a97565b6104116106da36600461559e565b612aa7565b6104116106ed3660046155e0565b612e86565b600e546103d29074010000000000000000000000000000000000000000900460ff1681565b6104b16107253660046151de565b6001600160a01b039081166000908152600960205260409020541690565b6104116107513660046151fb565b6130dd565b6104116107643660046151de565b613190565b610411610777366004615507565b6133c3565b6005546104b1906001600160a01b031681565b61041161079d3660046151de565b6134ac565b6006546103f0565b6103f06107b83660046151de565b61354d565b6103f0600b5481565b6104116107d4366004615635565b613607565b61041161371b565b6104116107ef3660046151fb565b6137ac565b6103d26108023660046151de565b6137dd565b6104b1610815366004615507565b613859565b6103d26108283660046152e9565b613871565b6103f061083b3660046151de565b613889565b61041161084e366004615661565b61393e565b610411610861366004615214565b613a95565b6103f0600081565b6103d261087c3660046151de565b6001600160a01b03166000908152600960205260409020600201546001600160801b0316151590565b6103f06108b33660046151de565b613b1b565b6104116108c63660046151fb565b613b4b565b6003546104b1906001600160a01b031681565b6104116108ec3660046151fb565b613bfe565b6104116108ff3660046151fb565b613cb1565b6103d2613e2c565b61041161091a3660046155e0565b6140f5565b6103f061092d3660046151fb565b61411b565b6000546104b1906001600160a01b031681565b6004546104b1906001600160a01b031681565b6103d26109663660046151de565b614132565b6103f0610979366004615214565b614201565b61041161098c3660046152e9565b614232565b6104116142c0565b6001600160e01b031981166000908152600d602052604081205460ff165b92915050565b6109c8600033613871565b6109ed5760405162461bcd60e51b81526004016109e4906156b1565b60405180910390fd5b806001600160a01b038116610a445760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000816008548110610ac65760405162461bcd60e51b815260206004820152602260248201527f44414f436f6d6d69747465653a20696e76616c6964206d656d62657220696e646044820152610caf60f31b60648201526084016109e4565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a91906156f9565b6001600160a01b0381166000908152600960209081526040918290208251631dffc87160e21b815292519394509233926377ff21c49260048083019391928290030181865afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190615734565b610c175760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a2073656e646572206973206e6f74206120636160448201527f6e64696461746520636f6e74726163740000000000000000000000000000000060648201526084016109e4565b80546001600160a01b03163314610c815760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b60028101546001600160801b031615610cdc5760405162461bcd60e51b815260206004820152601c60248201527f44414f436f6d6d69747465653a20616c7265616479206d656d6265720000000060448201526064016109e4565b600060078681548110610cf157610cf1615751565b60009182526020822001546001600160a01b03169150610d29826001600160a01b039081166000908152600960205260409020541690565b6002840180546001600160801b031916426001600160801b03161790556001840188905560078054919250859189908110610d6657610d66615751565b600091825260209091200180546001600160a01b0319166001600160a01b039283161790558216610de0576040516001600160a01b03838116825285169088907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf9060200160405180910390a36001955050505050610fc4565b806001600160a01b031663817b1cd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190615767565b336001600160a01b031663817b1cd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea49190615767565b11610ef15760405162461bcd60e51b815260206004820152601160248201527f6e6f7420656e6f75676820616d6f756e7400000000000000000000000000000060448201526064016109e4565b6001600160a01b038216600090815260096020526040812060018101919091556002810154610f29906001600160801b031642615796565b6002820154610f489190600160801b90046001600160801b03166157a9565b6001600160801b0316600160801b026001600160801b03191660028201556040516001600160a01b0386169089907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf90610fb29087906001600160a01b0391909116815260200190565b60405180910390a36001965050505050505b50919050565b60006001600160a01b0383166110225760405162461bcd60e51b815260206004820152601f60248201527f54686973206163636f756e74206973206e6f7420612063616e6469646174650060448201526064016109e4565b60405163af500ba360e01b81526001600160a01b03838116600483015284169063af500ba390602401602060405180830381865afa158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190615767565b9392505050565b6002546001600160a01b03166110ee5760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002546040516377f28d5b60e01b8152600481018390526001600160a01b03909116906377f28d5b90602401602060405180830381865afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190615734565b6111b85760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a2063616e206e6f74206578656375746520746860448201526765206167656e646160c01b60648201526084016109e4565b6002546040516373ba374560e01b8152600481018390526000918291829182916001600160a01b03909116906373ba374590602401600060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261123291908101906158cb565b935093509350935081156113b557600254604051631b8c251960e11b8152600481018790526001600160a01b03909116906337184a3290602401600060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b5050505060005b84518110156113af5760008582815181106112be576112be615751565b60200260200101516001600160a01b03168583815181106112e1576112e1615751565b60200260200101516040516112f691906159a8565b6000604051808303816000865af19150503d8060008114611333576040519150601f19603f3d011682016040523d82523d6000602084013e611338565b606091505b505090508061139c5760405162461bcd60e51b815260206004820152602a60248201527f44414f436f6d6d69747465653a204661696c656420746f206578656375746520604482015269746865206167656e646160b01b60648201526084016109e4565b50806113a7816159c4565b9150506112a1565b50611528565b6000815b855181101561144e57600061141b8783815181106113d9576113d9615751565b60200260200101518784815181106113f3576113f3615751565b60200260200101515188858151811061140e5761140e615751565b6020026020010151614337565b905080156114355761142e8360016157a9565b925061143b565b5061144e565b5080611446816159c4565b9150506113b9565b50600254604051632833207960e21b815260048101889052602481018390526001600160a01b039091169063a0cc81e490604401600060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b50505050845181836114c291906157a9565b0361152657600254604051631b8c251960e11b8152600481018890526001600160a01b03909116906337184a3290602401600060405180830381600087803b15801561150d57600080fd5b505af1158015611521573d6000803e3d6000fd5b505050505b505b847f785146be3266678a3f4ea454b310ff1f8c91d0ad9a7997bcd0619940d4d67fe6856040516115589190615a21565b60405180910390a25050505050565b611572600033613871565b61158e5760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b03166115e95760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002546040516323d09fdf60e01b8152600481018390526001600160a01b03909116906323d09fdf906024015b600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b5050505050565b6002546001600160a01b03166116a65760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170a91906156f9565b6001600160a01b0380821660009081526009602052604090208054929350911633146117895760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b600254604051637e77eb2360e01b8152600481018890526001600160a01b0384811660248301526044820188905290911690637e77eb23906064016020604051808303816000875af11580156117e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118079190615734565b50600254604051635772521560e11b815260048101889052600091829182916001600160a01b03169063aee4a42a90602401606060405180830381865afa158015611856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187a9190615a34565b92509250925082600a541161195857600254604051632b0a851b60e11b81526001600160a01b03909116906356150a36906118bc908c90600190600401615a78565b600060405180830381600087803b1580156118d657600080fd5b505af11580156118ea573d6000803e3d6000fd5b5050600254604051633625b75960e21b81526001600160a01b03909116925063d896dd649150611921908c90600390600401615a9c565b600060405180830381600087803b15801561193b57600080fd5b505af115801561194f573d6000803e3d6000fd5b50505050611ad4565b81600a54116119f75760028054604051632b0a851b60e11b81526001600160a01b03909116916356150a3691611992918d91600401615a78565b600060405180830381600087803b1580156119ac57600080fd5b505af11580156119c0573d6000803e3d6000fd5b5050600254604051633625b75960e21b81526001600160a01b03909116925063d896dd649150611921908c90600590600401615a9c565b611a0182826157a9565b600a5411611ad457600254604051632b0a851b60e11b81526001600160a01b03909116906356150a3690611a3c908c90600390600401615a78565b600060405180830381600087803b158015611a5657600080fd5b505af1158015611a6a573d6000803e3d6000fd5b5050600254604051633625b75960e21b81526001600160a01b03909116925063d896dd649150611aa1908c90600590600401615a9c565b600060405180830381600087803b158015611abb57600080fd5b505af1158015611acf573d6000803e3d6000fd5b505050505b88336001600160a01b03167ffa0761008653bc7bf9fa040fb7e07672ad3e17a976eb452c44e81dd782a6214b8a8a8a604051611b1293929190615adc565b60405180910390a3505050505050505050565b611b30600033613871565b611b4c5760405162461bcd60e51b81526004016109e4906156b1565b806001600160a01b038116611ba35760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600c6020526040902060020154611be29033613871565b611c545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201527f2061646d696e20746f206772616e74000000000000000000000000000000000060648201526084016109e4565b611c5e8282614356565b5050565b6005546001600160a01b0316611cce5760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b0316611d3c5760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b0316611dae5760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b611db9600033613871565b611dd55760405162461bcd60e51b81526004016109e4906156b1565b60035460055460405163732518fb60e11b81526000926001600160a01b039081169263e64a31f692611e1692879287928b928b923092911690600401615aff565b6020604051808303816000875af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5991906156f9565b90506001600160a01b038116611eca5760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6001600160a01b038281166000908152600960205260409020541615612225576001600160a01b038281166000908152600f60205260409020541615611f525760405162461bcd60e51b815260206004820152601060248201527f616c7265616479206d696772617465640000000000000000000000000000000060448201526064016109e4565b6040518060c0016040528060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060000160009054906101000a90046001600160a01b03166001600160a01b03168152602001826001600160a01b0316815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060010154815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060020160009054906101000a90046001600160801b03166001600160801b0316815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060020160109054906101000a90046001600160801b03166001600160801b0316815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060030160009054906101000a90046001600160801b03166001600160801b0316815250600f6000846001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816002015560608201518160030160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160030160106101000a8154816001600160801b0302191690836001600160801b0316021790555060a08201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055509050508060096000846001600160a01b03166001600160a01b0316815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612301565b6040805160a0810182526001600160a01b0383811682526000602080840182815284860183815260608601848152608087018581528a87168087526009909552978520965187546001600160a01b0319908116919097161787559151600180880191909155905191516001600160801b03928316600160801b918416919091021760028701559551600390950180546001600160801b031916959091169490941790935560068054948501815590527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90920180549092161790555b60048054600554604051635e58d38f60e11b81526001600160a01b0385811694820194909452908316602482015291169063bcb1a71e906044016020604051808303816000875af115801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237e9190615734565b6123e35760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206661696c656420746f20726567697374657260448201526f416e644465706c6f79436f696e61676560801b60648201526084016109e4565b806001600160a01b0316826001600160a01b03167f7cf8db18d9a5c7f44156bfabdbb59ac982a8a004e461ca1b87ee71a5cdfbc5ef8686604051612428929190615b46565b60405180910390a350505050565b6006818154811061244657600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811633146124de5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109e4565b611c5e82826143af565b6000806124f58484614408565b90506125198782600001518360200151846040015185606001518660800151614484565b506001979650505050505050565b612532600033613871565b61254e5760405162461bcd60e51b81526004016109e4906156b1565b6005546001600160a01b03166125ba5760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b03166126285760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b031661269a5760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b6126a58383836145bc565b505050565b6126b5600033613871565b6126d15760405162461bcd60e51b81526004016109e4906156b1565b806001600160a01b0381166127285760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b612756600033613871565b6127725760405162461bcd60e51b81526004016109e4906156b1565b8160085481106127cf5760405162461bcd60e51b815260206004820152602260248201527f44414f436f6d6d69747465653a20696e76616c6964206d656d62657220696e646044820152610caf60f31b60648201526084016109e4565b6000600784815481106127e4576127e4615751565b60009182526020808320909101546001600160a01b0316808352600990915260409091206007549192509061281b90600190615796565b85146128bd57600780546000919061283590600190615796565b8154811061284557612845615751565b60009182526020808320909101546001600160a01b031680835260099091526040909120600181018890556007805492935090918391908990811061288c5761288c615751565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505b6000600182015560028101546128dc906001600160801b031642615796565b60028201546128fb9190600160801b90046001600160801b03166157a9565b6001600160801b0316600160801b026001600160801b0319166002820155600780548061292a5761292a615b5a565b600082815260209020810160001990810180546001600160a01b031916905501905560085461295b90600190615796565b60085561296784613cb1565b6040516001600160a01b038316815260009086907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf9060200160405180910390a36008546129b68160016157a9565b6040517f8c0366d1e3a335a312d012257ee764723c38ec2dd5e74cbfad372513521f977190600090a35050505050565b6000805b82811015612a8d57612a1c848483818110612a0757612a07615751565b905060200201602081019061080291906151de565b612a7b5760405162461bcd60e51b815260206004820152602a60248201527f44414f436f6d6d69747465653a206661696c656420746f2075706461746520736044820152696569676e696f7261676560b01b60648201526084016109e4565b80612a85816159c4565b9150506129ea565b5060019392505050565b6007818154811061244657600080fd5b336000818152600960205260409020546001600160a01b031615612b1f5760405162461bcd60e51b815260206004820152602960248201527f44414f436f6d6d69747465653a2063616e64696461746520616c7265616479206044820152681c9959da5cdd195c9960ba1b60648201526084016109e4565b60035460055460405163732518fb60e11b81526000926001600160a01b039081169263e64a31f692612b6092879287928b928b923092911690600401615aff565b6020604051808303816000875af1158015612b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba391906156f9565b90506001600160a01b038116612c145760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6001600160a01b038281166000908152600960205260409020541615612c955760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a205468652063616e64696461746520616c726560448201526f18591e481a185cc818dbdb9d1c9858dd60821b60648201526084016109e4565b60048054600554604051635e58d38f60e11b81526001600160a01b0385811694820194909452908316602482015291169063bcb1a71e906044016020604051808303816000875af1158015612cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d129190615734565b612d775760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206661696c656420746f20726567697374657260448201526f416e644465706c6f79436f696e61676560801b60648201526084016109e4565b6040805160a0810182526001600160a01b038381168083526000602080850182815285870183815260608701848152608088018581528b88168087526009909552898620985189546001600160a01b03199081169190991617895592516001808a0191909155915190516001600160801b03918216600160801b918316919091021760028901559151600390970180546001600160801b031916979092169690961790556006805495860181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9093018054909216831790915591517f7cf8db18d9a5c7f44156bfabdbb59ac982a8a004e461ca1b87ee71a5cdfbc5ef906124289088908890615b46565b6000836001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eea91906156f9565b90506000819050846001600160a01b0316639b6382686040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f539190615734565b15612fbd57816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fba91906156f9565b90505b336001600160a01b0382161461303b5760405162461bcd60e51b815260206004820152603a60248201527f44414f436f6d6d69747465653a2073656e646572206973206e6f74207468652060448201527f63616e646964617465206f66207468697320636f6e747261637400000000000060648201526084016109e4565b6040516325d6086160e01b81526001600160a01b038616906325d60861906130699087908790600401615b46565b600060405180830381600087803b15801561308357600080fd5b505af1158015613097573d6000803e3d6000fd5b505050507fda033346b344f4675799a7ab4d837f0deb62d4afcdcaba4613913b4c25838cb38285856040516130ce93929190615b70565b60405180910390a15050505050565b6130e8600033613871565b6131045760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b031661315f5760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002546040516334d8913d60e11b8152600481018390526001600160a01b03909116906369b1227a90602401611616565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f491906156f9565b6001600160a01b0380821660009081526009602052604090208054929350911633146132735760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b600061327e83613889565b9050600081116132e35760405162461bcd60e51b815260206004820152602a60248201527f44414f436f6d6d69747465653a20796f7520646f6e2774206861766520636c6160448201526934b6b0b13632903a37b760b11b60648201526084016109e4565b600154604051633bc3556560e21b81526001600160a01b038681166004830152602482018490529091169063ef0d559490604401600060405180830381600087803b15801561333157600080fd5b505af1158015613345573d6000803e3d6000fd5b505050506003820180546001600160801b031916426001600160801b03908116919091179091556002830180549091169055604080516001600160a01b038681168252602082018490528516917fb15377c434dc1922cc2eb7d8950640960a05f0cf6d5dc9442de8414a9da2b308910160405180910390a250505050565b6133ce600033613871565b6133ea5760405162461bcd60e51b81526004016109e4906156b1565b81600854106134615760405162461bcd60e51b815260206004820152603c60248201527f44414f436f6d6d69747465653a20596f75206861766520746f2063616c6c206460448201527f656372656173654d61784d656d62657220746f2064656372656173650000000060648201526084016109e4565b6008805490839055613471614c04565b61347a82613cb1565b604051839082907f8c0366d1e3a335a312d012257ee764723c38ec2dd5e74cbfad372513521f977190600090a3505050565b6134b7600033613871565b6134d35760405162461bcd60e51b81526004016109e4906156b1565b806001600160a01b03811661352a5760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b0382166135a55760405162461bcd60e51b815260206004820152601f60248201527f54686973206163636f756e74206973206e6f7420612063616e6469646174650060448201526064016109e4565b816001600160a01b031663817b1cd26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190615767565b613612600033613871565b61362e5760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b03166356150a368483600381111561365257613652615a62565b6040518363ffffffff1660e01b815260040161366f929190615a78565b600060405180830381600087803b15801561368957600080fd5b505af115801561369d573d6000803e3d6000fd5b50506002546001600160a01b0316915063d896dd649050848460058111156136c7576136c7615a62565b6040518363ffffffff1660e01b81526004016136e4929190615a9c565b600060405180830381600087803b1580156136fe57600080fd5b505af1158015613712573d6000803e3d6000fd5b50505050505050565b613726600033613871565b6137425760405162461bcd60e51b81526004016109e4906156b1565b600560009054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561379257600080fd5b505af11580156137a6573d6000803e3d6000fd5b50505050565b60025460405163442da34b60e11b8152600481018390526001600160a01b039091169063885b469690602401611616565b6001600160a01b038082166000908152600960209081526040808320548151633b253c2b60e11b8152915193941692839263764a78569260048082019391829003018188875af1158015613835573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190615734565b6000828152600c6020526040812061108c9083614c67565b6000828152600c6020526040812061108c9083614c73565b6001600160a01b038116600090815260096020526040812060028101546001600160801b03600160801b8204811691161561392957600382015460028301546001600160801b03918216911611156139045760028201546001600160801b03166138f342836157a9565b6138fd9190615796565b9050613929565b60038201546001600160801b031661391c42836157a9565b6139269190615796565b90505b600b546139369082615b93565b949350505050565b6005546001600160a01b03166139aa5760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b0316613a185760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b0316613a8a5760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b611c5e3383836145bc565b613aa0600033613871565b613abc5760405162461bcd60e51b81526004016109e4906156b1565b604051633b2bf90560e11b81526001600160a01b038281166004830152831690637657f20a90602401600060405180830381600087803b158015613aff57600080fd5b505af1158015613b13573d6000803e3d6000fd5b505050505050565b600080613b40836001600160a01b039081166000908152600960205260409020541690565b905061108c8161354d565b613b56600033613871565b613b725760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b0316613bcd5760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b600254604051635a7b4db560e11b8152600481018390526001600160a01b039091169063b4f69b6a90602401611616565b613c09600033613871565b613c255760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b0316613c805760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b60025460405163302f14c160e21b8152600481018390526001600160a01b039091169063c0bc530490602401611616565b613cbc600033613871565b613cd85760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b0316613d335760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002600854613d429190615baa565b8111613d905760405162461bcd60e51b815260206004820152601c60248201527f44414f436f6d6d69747465653a20696e76616c69642071756f72756d0000000060448201526064016109e4565b600854811115613df15760405162461bcd60e51b815260206004820152602660248201527f44414f436f6d6d69747465653a2071756f72756d20657863656564206d61782060448201526536b2b6b132b960d11b60648201526084016109e4565b600a8190556040518181527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e9060200160405180910390a150565b600080336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9191906156f9565b9050613ec0816001600160a01b03166000908152600960205260409020600201546001600160801b0316151590565b613f185760405162461bcd60e51b815260206004820152602360248201527f53746f726167655374617465436f6d6d69747465653a206e6f742061206d656d6044820152623132b960e91b60648201526084016109e4565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7c91906156f9565b6001600160a01b038082166000908152600960205260409020805492935091163314613ffb5760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b6000600782600101548154811061401457614014615751565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556002810154614055906001600160801b031642615796565b60028201546140749190600160801b90046001600160801b03166157a9565b6001600160801b0316600160801b026001600160801b031916600282015560018101805460009182905560405190919082907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf906140e29087906001600160a01b0391909116815260200190565b60405180910390a3600194505050505090565b6001600160a01b03838116600090815260096020526040902054166137a6818484612e86565b6000818152600c602052604081206109b790614c95565b6001600160a01b0380821660009081526009602052604081208054919290911661415f5750600092915050565b805460009061417e906001600160a01b0316631dffc87160e21b614c9f565b9050801515600003614194575060009392505050565b815460408051631dffc87160e21b815290516001600160a01b03909216916377ff21c4916004808201926020929091908290030181865afa1580156141dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139369190615734565b600080614226846001600160a01b039081166000908152600960205260409020541690565b90506139368184610fca565b6000828152600c602052604090206002015461424e9033613871565b6124de5760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201527f2061646d696e20746f207265766f6b650000000000000000000000000000000060648201526084016109e4565b6142cb600033613871565b6142e75760405162461bcd60e51b81526004016109e4906156b1565b600560009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561379257600080fd5b60008060208301600080868360008a619c405a03f19695505050505050565b6000828152600c6020526040902061436e9082614cbb565b15611c5e5760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152600c602052604090206143c79082614cd0565b15611c5e5760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b61444e6040518060a001604052806060815260200160006001600160801b0316815260200160006001600160801b03168152602001600015158152602001606081525090565b61445a82840184615c83565b6080860152151560608501526001600160801b039081166040850152166020830152815292915050565b6002546000906001600160a01b03166144e25760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6144eb87614ce5565b6002546040516304a091b760e31b81526000916001600160a01b0316906325048db890614524908a908a908a908a908a90600401615da6565b6020604051808303816000875af1158015614543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145679190615767565b905080886001600160a01b03167fcd47bcad760e912d146723a314cc78b8570ee76ec8bdd4b60335087f6c2f47d7898989896040516145a99493929190615e3c565b60405180910390a3979650505050505050565b6005546001600160a01b03166146285760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b03166146965760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b03166147085760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b6001600160a01b0380831660009081526009602052604090205416156147825760405162461bcd60e51b815260206004820152602960248201527f44414f436f6d6d69747465653a2063616e64696461746520616c7265616479206044820152681c9959da5cdd195c9960ba1b60648201526084016109e4565b6001600160a01b0382166147f15760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6001600160a01b0382811660009081526009602052604090205416156148725760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a205468652063616e64696461746520616c726560448201526f18591e481a185cc818dbdb9d1c9858dd60821b60648201526084016109e4565b6000829050806001600160a01b031663882eed2c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148d99190615734565b6149335760405162461bcd60e51b815260206004820152602560248201527f44414f436f6d6d69747465653a20696e76616c6964206c617965723220636f6e6044820152641d1c9858dd60da1b60648201526084016109e4565b836001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa15801561497b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061499f91906156f9565b6001600160a01b0316146149f55760405162461bcd60e51b815260206004820152601e60248201527f44414f436f6d6d69747465653a20696e76616c6964206f70657261746f72000060448201526064016109e4565b60035460055460405163732518fb60e11b81526000926001600160a01b039081169263e64a31f692614a349289926001928a9230921690600401615e77565b6020604051808303816000875af1158015614a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a7791906156f9565b90506001600160a01b038116614ae85760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6040805160a0810182526001600160a01b038381168083526000602080850182815285870183815260608701848152608088018581528d88168087526009909552898620985189546001600160a01b03199081169190991617895592516001808a0191909155915190516001600160801b03918216600160801b918316919091021760028901559151600390970180546001600160801b031916979092169690961790556006805495860181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9093018054909216831790915591517f0f401d1bd976f5304ef9cfa87aeb24d777c0e205fb87bbae1dc0f0293ba7976a90614bf5908790615ebc565b60405180910390a35050505050565b6007545b600854811015614c6457600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b031916905580614c5c816159c4565b915050614c08565b50565b600061108c8383614f06565b6001600160a01b0381166000908152600183016020526040812054151561108c565b60006109b7825490565b6000614caa83614f8c565b801561108c575061108c8383614fbf565b600061108c836001600160a01b03841661505d565b600061108c836001600160a01b0384166150ac565b60025460408051632522a32f60e01b815290516000926001600160a01b031691632522a32f9160048083019260209291908290030181865afa158015614d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d539190615767565b6000546040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018490529293509116906323b872dd906064016020604051808303816000875af1158015614dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dd29190615734565b614e445760405162461bcd60e51b815260206004820152603160248201527f44414f436f6d6d69747465653a206661696c656420746f207472616e7366657260448201527f20746f6e2066726f6d2063726561746f7200000000000000000000000000000060648201526084016109e4565b60005460405163a9059cbb60e01b815260016004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015614e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eba9190615734565b611c5e5760405162461bcd60e51b815260206004820152601c60248201527f44414f436f6d6d69747465653a206661696c656420746f206275726e0000000060448201526064016109e4565b81546000908210614f645760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016109e4565b826000018281548110614f7957614f79615751565b9060005260206000200154905092915050565b6000614f9f826301ffc9a760e01b614fbf565b80156109b75750614fb8826001600160e01b0319614fbf565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015615046575060208210155b80156150525750600081115b979650505050505050565b60008181526001830160205260408120546150a4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109b7565b5060006109b7565b600081815260018301602052604081205480156151955760006150d0600183615796565b85549091506000906150e490600190615796565b905060008660000182815481106150fd576150fd615751565b906000526020600020015490508087600001848154811061512057615120615751565b6000918252602090912001556151378360016157a9565b6000828152600189016020526040902055865487908061515957615159615b5a565b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506109b7565b60009150506109b7565b6000602082840312156151b157600080fd5b81356001600160e01b03198116811461108c57600080fd5b6001600160a01b0381168114614c6457600080fd5b6000602082840312156151f057600080fd5b813561108c816151c9565b60006020828403121561520d57600080fd5b5035919050565b6000806040838503121561522757600080fd5b8235615232816151c9565b91506020830135615242816151c9565b809150509250929050565b60008083601f84011261525f57600080fd5b50813567ffffffffffffffff81111561527757600080fd5b60208301915083602082850101111561528f57600080fd5b9250929050565b600080600080606085870312156152ac57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156152d157600080fd5b6152dd8782880161524d565b95989497509550505050565b600080604083850312156152fc57600080fd5b823591506020830135615242816151c9565b60008060006040848603121561532357600080fd5b833567ffffffffffffffff81111561533a57600080fd5b6153468682870161524d565b909450925050602084013561535a816151c9565b809150509250925092565b60008060008060006080868803121561537d57600080fd5b8535615388816151c9565b94506020860135615398816151c9565b935060408601359250606086013567ffffffffffffffff8111156153bb57600080fd5b6153c78882890161524d565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715615417576154176153d8565b604052919050565b600067ffffffffffffffff821115615439576154396153d8565b50601f01601f191660200190565b600061545a6154558461541f565b6153ee565b905082815283838301111561546e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261549657600080fd5b61108c83833560208501615447565b6000806000606084860312156154ba57600080fd5b83356154c5816151c9565b925060208401356154d5816151c9565b9150604084013567ffffffffffffffff8111156154f157600080fd5b6154fd86828701615485565b9150509250925092565b6000806040838503121561551a57600080fd5b50508035926020909101359150565b6000806020838503121561553c57600080fd5b823567ffffffffffffffff8082111561555457600080fd5b818501915085601f83011261556857600080fd5b81358181111561557757600080fd5b8660208260051b850101111561558c57600080fd5b60209290920196919550909350505050565b600080602083850312156155b157600080fd5b823567ffffffffffffffff8111156155c857600080fd5b6155d48582860161524d565b90969095509350505050565b6000806000604084860312156155f557600080fd5b8335615600816151c9565b9250602084013567ffffffffffffffff81111561561c57600080fd5b6156288682870161524d565b9497909650939450505050565b60008060006060848603121561564a57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561567457600080fd5b823561567f816151c9565b9150602083013567ffffffffffffffff81111561569b57600080fd5b6156a785828601615485565b9150509250929050565b60208082526028908201527f44414f436f6d6d69747465653a206d73672e73656e646572206973206e6f742060408201526730b71030b236b4b760c11b606082015260800190565b60006020828403121561570b57600080fd5b815161108c816151c9565b8015158114614c6457600080fd5b805161572f81615716565b919050565b60006020828403121561574657600080fd5b815161108c81615716565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561577957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109b7576109b7615780565b808201808211156109b7576109b7615780565b600067ffffffffffffffff8211156157d6576157d66153d8565b5060051b60200190565b60005b838110156157fb5781810151838201526020016157e3565b50506000910152565b600082601f83011261581557600080fd5b81516020615825615455836157bc565b82815260059290921b8401810191818101908684111561584457600080fd5b8286015b848110156158c057805167ffffffffffffffff8111156158685760008081fd5b8701603f8101891361587a5760008081fd5b84810151604061588c6154558361541f565b8281528b828486010111156158a15760008081fd5b6158b0838983018487016157e0565b8652505050918301918301615848565b509695505050505050565b600080600080608085870312156158e157600080fd5b845167ffffffffffffffff808211156158f957600080fd5b818701915087601f83011261590d57600080fd5b8151602061591d615455836157bc565b82815260059290921b8401810191818101908b84111561593c57600080fd5b948201945b83861015615963578551615954816151c9565b82529482019490820190615941565b918a015191985090935050508082111561597c57600080fd5b5061598987828801615804565b93505061599860408601615724565b6060959095015193969295505050565b600082516159ba8184602087016157e0565b9190910192915050565b6000600182016159d6576159d6615780565b5060010190565b600081518084526020808501945080840160005b83811015615a165781516001600160a01b0316875295820195908201906001016159f1565b509495945050505050565b60208152600061108c60208301846159dd565b600080600060608486031215615a4957600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b8281526040810160048310615a8f57615a8f615a62565b8260208301529392505050565b8281526040810160068310615a8f57615a8f615a62565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000615af6604083018486615ab3565b95945050505050565b60006001600160a01b038089168352871515602084015260a06040840152615b2b60a084018789615ab3565b94811660608401529290921660809091015250949350505050565b602081526000613936602083018486615ab3565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0384168152604060208201526000615af6604083018486615ab3565b80820281158282048414176109b7576109b7615780565b600082615bc757634e487b7160e01b600052601260045260246000fd5b500490565b80356001600160801b038116811461572f57600080fd5b803561572f81615716565b600082601f830112615bff57600080fd5b81356020615c0f615455836157bc565b82815260059290921b84018101918181019086841115615c2e57600080fd5b8286015b848110156158c057803567ffffffffffffffff811115615c525760008081fd5b8701603f81018913615c645760008081fd5b615c75898683013560408401615447565b845250918301918301615c32565b600080600080600060a08688031215615c9b57600080fd5b853567ffffffffffffffff80821115615cb357600080fd5b818801915088601f830112615cc757600080fd5b81356020615cd7615455836157bc565b82815260059290921b8401810191818101908c841115615cf657600080fd5b948201945b83861015615d1d578535615d0e816151c9565b82529482019490820190615cfb565b9950615d2c90508a8201615bcc565b97505050615d3c60408901615bcc565b9450615d4a60608901615be3565b93506080880135915080821115615d6057600080fd5b50615d6d88828901615bee565b9150509295509295909350565b60008151808452615d928160208601602086016157e0565b601f01601f19169290920160200192915050565b60a081526000615db960a08301886159dd565b60206001600160801b0380891682860152808816604086015250851515606085015283820360808501528185518084528284019150828160051b85010183880160005b83811015615e2a57601f19878403018552615e18838351615d7a565b94860194925090850190600101615dfc565b50909c9b505050505050505050505050565b608081526000615e4f60808301876159dd565b6001600160801b03958616602084015293909416604082015290151560609091015292915050565b60006001600160a01b038088168352861515602084015260a06040840152615ea260a0840187615d7a565b948116606084015292909216608090910152509392505050565b60208152600061108c6020830184615d7a56fe53746f726167655374617465436f6d6d69747465653a204167656e64614d616ea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103ba5760003560e01c80636da8f3ce116101f4578063a217fddf1161011a578063c7cac42c116100ad578063d51b9e931161007c578063d51b9e9314610958578063d525f04f1461096b578063d547741f1461097e578063efd579791461099157600080fd5b8063c7cac42c1461090c578063ca15c8731461091f578063cc48b94714610932578063cf2a239c1461094557600080fd5b8063b5dd1158116100e9578063b5dd1158146108cb578063c0bc5304146108de578063c1ba4e59146108f1578063c4ef9c001461090457600080fd5b8063a217fddf14610866578063a230c5241461086e578063ad6675dc146108a5578063b4f69b6a146108b857600080fd5b806381bfe42c1161019257806391d148541161016157806391d148541461081a5780639932e94c1461082d578063a1ea352514610840578063a1f3ac2a1461085357600080fd5b806381bfe42c146107d9578063885b4696146107e157806389ea4300146107f45780639010d07c1461080757600080fd5b8063773b7f65116101ce578063773b7f65146107a257806378767d33146107aa5780637f331636146107bd578063805aca20146107c657600080fd5b80636da8f3ce146107695780636fb7f5581461077c5780637657f20a1461078f57600080fd5b80633477ee2e116102e45780635903bd6c1161027757806363a8fd891161024657806363a8fd89146106f2578063651d08cd1461071757806369b1227a146107435780636becff271461075657600080fd5b80635903bd6c146106a65780635daf08ca146106b95780635fba7a56146106cc578063607cf734146106df57600080fd5b80634b799db1116102b35780634b799db11461063f57806350e8f17d14610652578063561a1dab1461066557806357f0a8671461069357600080fd5b80633477ee2e146105f357806336568abe146106065780634273ca1614610619578063440b69ad1461062c57600080fd5b806323d09fdf1161035c5780632af60ff41161032b5780632af60ff4146104c95780632e011c1e146104dc5780632f2ff15d146105cd57806332a45ef6146105e057600080fd5b806323d09fdf14610455578063248a9ca31461046857806324f99b1e1461048b57806327fd92fd1461049e57600080fd5b806311f19e041161039857806311f19e041461041357806316f7f982146104265780631703a01814610439578063216f486b1461044257600080fd5b806301ffc9a7146103bf57806303e3c9ac146103e7578063047f52f2146103fe575b600080fd5b6103d26103cd36600461519f565b610999565b60405190151581526020015b60405180910390f35b6103f060085481565b6040519081526020016103de565b61041161040c3660046151de565b6109bd565b005b6103d26104213660046151fb565b610a67565b6103f0610434366004615214565b610fca565b6103f0600a5481565b6104116104503660046151fb565b611093565b6104116104633660046151fb565b611567565b6103f06104763660046151fb565b6000908152600c602052604090206002015490565b610411610499366004615296565b61164b565b6002546104b1906001600160a01b031681565b6040516001600160a01b0390911681526020016103de565b6104116104d73660046151de565b611b25565b6105786104ea3660046151de565b6040805160a0808201835260008083526020808401829052838501829052606080850183905260809485018390526001600160a01b0396871683526009825291859020855193840186528054909616835260018601549083015260028501546001600160801b0380821695840195909552600160801b90048416908201526003909301549091169082015290565b6040805182516001600160a01b0316815260208084015190820152828201516001600160801b03908116928201929092526060808401518316908201526080928301519091169181019190915260a0016103de565b6104116105db3660046152e9565b611bc6565b6104116105ee36600461530e565b611c62565b6104b16106013660046151fb565b612436565b6104116106143660046152e9565b612460565b6103d2610627366004615365565b6124e8565b61041161063a3660046154a5565b612527565b61041161064d3660046151de565b6126aa565b610411610660366004615507565b61274b565b6103d26106733660046151de565b6001600160a01b0390811660009081526009602052604090205416151590565b6103d26106a1366004615529565b6129e6565b6001546104b1906001600160a01b031681565b6104b16106c73660046151fb565b612a97565b6104116106da36600461559e565b612aa7565b6104116106ed3660046155e0565b612e86565b600e546103d29074010000000000000000000000000000000000000000900460ff1681565b6104b16107253660046151de565b6001600160a01b039081166000908152600960205260409020541690565b6104116107513660046151fb565b6130dd565b6104116107643660046151de565b613190565b610411610777366004615507565b6133c3565b6005546104b1906001600160a01b031681565b61041161079d3660046151de565b6134ac565b6006546103f0565b6103f06107b83660046151de565b61354d565b6103f0600b5481565b6104116107d4366004615635565b613607565b61041161371b565b6104116107ef3660046151fb565b6137ac565b6103d26108023660046151de565b6137dd565b6104b1610815366004615507565b613859565b6103d26108283660046152e9565b613871565b6103f061083b3660046151de565b613889565b61041161084e366004615661565b61393e565b610411610861366004615214565b613a95565b6103f0600081565b6103d261087c3660046151de565b6001600160a01b03166000908152600960205260409020600201546001600160801b0316151590565b6103f06108b33660046151de565b613b1b565b6104116108c63660046151fb565b613b4b565b6003546104b1906001600160a01b031681565b6104116108ec3660046151fb565b613bfe565b6104116108ff3660046151fb565b613cb1565b6103d2613e2c565b61041161091a3660046155e0565b6140f5565b6103f061092d3660046151fb565b61411b565b6000546104b1906001600160a01b031681565b6004546104b1906001600160a01b031681565b6103d26109663660046151de565b614132565b6103f0610979366004615214565b614201565b61041161098c3660046152e9565b614232565b6104116142c0565b6001600160e01b031981166000908152600d602052604081205460ff165b92915050565b6109c8600033613871565b6109ed5760405162461bcd60e51b81526004016109e4906156b1565b60405180910390fd5b806001600160a01b038116610a445760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000816008548110610ac65760405162461bcd60e51b815260206004820152602260248201527f44414f436f6d6d69747465653a20696e76616c6964206d656d62657220696e646044820152610caf60f31b60648201526084016109e4565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a91906156f9565b6001600160a01b0381166000908152600960209081526040918290208251631dffc87160e21b815292519394509233926377ff21c49260048083019391928290030181865afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190615734565b610c175760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a2073656e646572206973206e6f74206120636160448201527f6e64696461746520636f6e74726163740000000000000000000000000000000060648201526084016109e4565b80546001600160a01b03163314610c815760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b60028101546001600160801b031615610cdc5760405162461bcd60e51b815260206004820152601c60248201527f44414f436f6d6d69747465653a20616c7265616479206d656d6265720000000060448201526064016109e4565b600060078681548110610cf157610cf1615751565b60009182526020822001546001600160a01b03169150610d29826001600160a01b039081166000908152600960205260409020541690565b6002840180546001600160801b031916426001600160801b03161790556001840188905560078054919250859189908110610d6657610d66615751565b600091825260209091200180546001600160a01b0319166001600160a01b039283161790558216610de0576040516001600160a01b03838116825285169088907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf9060200160405180910390a36001955050505050610fc4565b806001600160a01b031663817b1cd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190615767565b336001600160a01b031663817b1cd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea49190615767565b11610ef15760405162461bcd60e51b815260206004820152601160248201527f6e6f7420656e6f75676820616d6f756e7400000000000000000000000000000060448201526064016109e4565b6001600160a01b038216600090815260096020526040812060018101919091556002810154610f29906001600160801b031642615796565b6002820154610f489190600160801b90046001600160801b03166157a9565b6001600160801b0316600160801b026001600160801b03191660028201556040516001600160a01b0386169089907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf90610fb29087906001600160a01b0391909116815260200190565b60405180910390a36001965050505050505b50919050565b60006001600160a01b0383166110225760405162461bcd60e51b815260206004820152601f60248201527f54686973206163636f756e74206973206e6f7420612063616e6469646174650060448201526064016109e4565b60405163af500ba360e01b81526001600160a01b03838116600483015284169063af500ba390602401602060405180830381865afa158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190615767565b9392505050565b6002546001600160a01b03166110ee5760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002546040516377f28d5b60e01b8152600481018390526001600160a01b03909116906377f28d5b90602401602060405180830381865afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190615734565b6111b85760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a2063616e206e6f74206578656375746520746860448201526765206167656e646160c01b60648201526084016109e4565b6002546040516373ba374560e01b8152600481018390526000918291829182916001600160a01b03909116906373ba374590602401600060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261123291908101906158cb565b935093509350935081156113b557600254604051631b8c251960e11b8152600481018790526001600160a01b03909116906337184a3290602401600060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b5050505060005b84518110156113af5760008582815181106112be576112be615751565b60200260200101516001600160a01b03168583815181106112e1576112e1615751565b60200260200101516040516112f691906159a8565b6000604051808303816000865af19150503d8060008114611333576040519150601f19603f3d011682016040523d82523d6000602084013e611338565b606091505b505090508061139c5760405162461bcd60e51b815260206004820152602a60248201527f44414f436f6d6d69747465653a204661696c656420746f206578656375746520604482015269746865206167656e646160b01b60648201526084016109e4565b50806113a7816159c4565b9150506112a1565b50611528565b6000815b855181101561144e57600061141b8783815181106113d9576113d9615751565b60200260200101518784815181106113f3576113f3615751565b60200260200101515188858151811061140e5761140e615751565b6020026020010151614337565b905080156114355761142e8360016157a9565b925061143b565b5061144e565b5080611446816159c4565b9150506113b9565b50600254604051632833207960e21b815260048101889052602481018390526001600160a01b039091169063a0cc81e490604401600060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b50505050845181836114c291906157a9565b0361152657600254604051631b8c251960e11b8152600481018890526001600160a01b03909116906337184a3290602401600060405180830381600087803b15801561150d57600080fd5b505af1158015611521573d6000803e3d6000fd5b505050505b505b847f785146be3266678a3f4ea454b310ff1f8c91d0ad9a7997bcd0619940d4d67fe6856040516115589190615a21565b60405180910390a25050505050565b611572600033613871565b61158e5760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b03166115e95760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002546040516323d09fdf60e01b8152600481018390526001600160a01b03909116906323d09fdf906024015b600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b5050505050565b6002546001600160a01b03166116a65760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170a91906156f9565b6001600160a01b0380821660009081526009602052604090208054929350911633146117895760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b600254604051637e77eb2360e01b8152600481018890526001600160a01b0384811660248301526044820188905290911690637e77eb23906064016020604051808303816000875af11580156117e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118079190615734565b50600254604051635772521560e11b815260048101889052600091829182916001600160a01b03169063aee4a42a90602401606060405180830381865afa158015611856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187a9190615a34565b92509250925082600a541161195857600254604051632b0a851b60e11b81526001600160a01b03909116906356150a36906118bc908c90600190600401615a78565b600060405180830381600087803b1580156118d657600080fd5b505af11580156118ea573d6000803e3d6000fd5b5050600254604051633625b75960e21b81526001600160a01b03909116925063d896dd649150611921908c90600390600401615a9c565b600060405180830381600087803b15801561193b57600080fd5b505af115801561194f573d6000803e3d6000fd5b50505050611ad4565b81600a54116119f75760028054604051632b0a851b60e11b81526001600160a01b03909116916356150a3691611992918d91600401615a78565b600060405180830381600087803b1580156119ac57600080fd5b505af11580156119c0573d6000803e3d6000fd5b5050600254604051633625b75960e21b81526001600160a01b03909116925063d896dd649150611921908c90600590600401615a9c565b611a0182826157a9565b600a5411611ad457600254604051632b0a851b60e11b81526001600160a01b03909116906356150a3690611a3c908c90600390600401615a78565b600060405180830381600087803b158015611a5657600080fd5b505af1158015611a6a573d6000803e3d6000fd5b5050600254604051633625b75960e21b81526001600160a01b03909116925063d896dd649150611aa1908c90600590600401615a9c565b600060405180830381600087803b158015611abb57600080fd5b505af1158015611acf573d6000803e3d6000fd5b505050505b88336001600160a01b03167ffa0761008653bc7bf9fa040fb7e07672ad3e17a976eb452c44e81dd782a6214b8a8a8a604051611b1293929190615adc565b60405180910390a3505050505050505050565b611b30600033613871565b611b4c5760405162461bcd60e51b81526004016109e4906156b1565b806001600160a01b038116611ba35760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600c6020526040902060020154611be29033613871565b611c545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201527f2061646d696e20746f206772616e74000000000000000000000000000000000060648201526084016109e4565b611c5e8282614356565b5050565b6005546001600160a01b0316611cce5760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b0316611d3c5760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b0316611dae5760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b611db9600033613871565b611dd55760405162461bcd60e51b81526004016109e4906156b1565b60035460055460405163732518fb60e11b81526000926001600160a01b039081169263e64a31f692611e1692879287928b928b923092911690600401615aff565b6020604051808303816000875af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5991906156f9565b90506001600160a01b038116611eca5760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6001600160a01b038281166000908152600960205260409020541615612225576001600160a01b038281166000908152600f60205260409020541615611f525760405162461bcd60e51b815260206004820152601060248201527f616c7265616479206d696772617465640000000000000000000000000000000060448201526064016109e4565b6040518060c0016040528060096000856001600160a01b03166001600160a01b0316815260200190815260200160002060000160009054906101000a90046001600160a01b03166001600160a01b03168152602001826001600160a01b0316815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060010154815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060020160009054906101000a90046001600160801b03166001600160801b0316815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060020160109054906101000a90046001600160801b03166001600160801b0316815260200160096000856001600160a01b03166001600160a01b0316815260200190815260200160002060030160009054906101000a90046001600160801b03166001600160801b0316815250600f6000846001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816002015560608201518160030160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160030160106101000a8154816001600160801b0302191690836001600160801b0316021790555060a08201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055509050508060096000846001600160a01b03166001600160a01b0316815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612301565b6040805160a0810182526001600160a01b0383811682526000602080840182815284860183815260608601848152608087018581528a87168087526009909552978520965187546001600160a01b0319908116919097161787559151600180880191909155905191516001600160801b03928316600160801b918416919091021760028701559551600390950180546001600160801b031916959091169490941790935560068054948501815590527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90920180549092161790555b60048054600554604051635e58d38f60e11b81526001600160a01b0385811694820194909452908316602482015291169063bcb1a71e906044016020604051808303816000875af115801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237e9190615734565b6123e35760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206661696c656420746f20726567697374657260448201526f416e644465706c6f79436f696e61676560801b60648201526084016109e4565b806001600160a01b0316826001600160a01b03167f7cf8db18d9a5c7f44156bfabdbb59ac982a8a004e461ca1b87ee71a5cdfbc5ef8686604051612428929190615b46565b60405180910390a350505050565b6006818154811061244657600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811633146124de5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109e4565b611c5e82826143af565b6000806124f58484614408565b90506125198782600001518360200151846040015185606001518660800151614484565b506001979650505050505050565b612532600033613871565b61254e5760405162461bcd60e51b81526004016109e4906156b1565b6005546001600160a01b03166125ba5760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b03166126285760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b031661269a5760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b6126a58383836145bc565b505050565b6126b5600033613871565b6126d15760405162461bcd60e51b81526004016109e4906156b1565b806001600160a01b0381166127285760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b612756600033613871565b6127725760405162461bcd60e51b81526004016109e4906156b1565b8160085481106127cf5760405162461bcd60e51b815260206004820152602260248201527f44414f436f6d6d69747465653a20696e76616c6964206d656d62657220696e646044820152610caf60f31b60648201526084016109e4565b6000600784815481106127e4576127e4615751565b60009182526020808320909101546001600160a01b0316808352600990915260409091206007549192509061281b90600190615796565b85146128bd57600780546000919061283590600190615796565b8154811061284557612845615751565b60009182526020808320909101546001600160a01b031680835260099091526040909120600181018890556007805492935090918391908990811061288c5761288c615751565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505b6000600182015560028101546128dc906001600160801b031642615796565b60028201546128fb9190600160801b90046001600160801b03166157a9565b6001600160801b0316600160801b026001600160801b0319166002820155600780548061292a5761292a615b5a565b600082815260209020810160001990810180546001600160a01b031916905501905560085461295b90600190615796565b60085561296784613cb1565b6040516001600160a01b038316815260009086907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf9060200160405180910390a36008546129b68160016157a9565b6040517f8c0366d1e3a335a312d012257ee764723c38ec2dd5e74cbfad372513521f977190600090a35050505050565b6000805b82811015612a8d57612a1c848483818110612a0757612a07615751565b905060200201602081019061080291906151de565b612a7b5760405162461bcd60e51b815260206004820152602a60248201527f44414f436f6d6d69747465653a206661696c656420746f2075706461746520736044820152696569676e696f7261676560b01b60648201526084016109e4565b80612a85816159c4565b9150506129ea565b5060019392505050565b6007818154811061244657600080fd5b336000818152600960205260409020546001600160a01b031615612b1f5760405162461bcd60e51b815260206004820152602960248201527f44414f436f6d6d69747465653a2063616e64696461746520616c7265616479206044820152681c9959da5cdd195c9960ba1b60648201526084016109e4565b60035460055460405163732518fb60e11b81526000926001600160a01b039081169263e64a31f692612b6092879287928b928b923092911690600401615aff565b6020604051808303816000875af1158015612b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba391906156f9565b90506001600160a01b038116612c145760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6001600160a01b038281166000908152600960205260409020541615612c955760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a205468652063616e64696461746520616c726560448201526f18591e481a185cc818dbdb9d1c9858dd60821b60648201526084016109e4565b60048054600554604051635e58d38f60e11b81526001600160a01b0385811694820194909452908316602482015291169063bcb1a71e906044016020604051808303816000875af1158015612cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d129190615734565b612d775760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206661696c656420746f20726567697374657260448201526f416e644465706c6f79436f696e61676560801b60648201526084016109e4565b6040805160a0810182526001600160a01b038381168083526000602080850182815285870183815260608701848152608088018581528b88168087526009909552898620985189546001600160a01b03199081169190991617895592516001808a0191909155915190516001600160801b03918216600160801b918316919091021760028901559151600390970180546001600160801b031916979092169690961790556006805495860181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9093018054909216831790915591517f7cf8db18d9a5c7f44156bfabdbb59ac982a8a004e461ca1b87ee71a5cdfbc5ef906124289088908890615b46565b6000836001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eea91906156f9565b90506000819050846001600160a01b0316639b6382686040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f539190615734565b15612fbd57816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fba91906156f9565b90505b336001600160a01b0382161461303b5760405162461bcd60e51b815260206004820152603a60248201527f44414f436f6d6d69747465653a2073656e646572206973206e6f74207468652060448201527f63616e646964617465206f66207468697320636f6e747261637400000000000060648201526084016109e4565b6040516325d6086160e01b81526001600160a01b038616906325d60861906130699087908790600401615b46565b600060405180830381600087803b15801561308357600080fd5b505af1158015613097573d6000803e3d6000fd5b505050507fda033346b344f4675799a7ab4d837f0deb62d4afcdcaba4613913b4c25838cb38285856040516130ce93929190615b70565b60405180910390a15050505050565b6130e8600033613871565b6131045760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b031661315f5760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002546040516334d8913d60e11b8152600481018390526001600160a01b03909116906369b1227a90602401611616565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f491906156f9565b6001600160a01b0380821660009081526009602052604090208054929350911633146132735760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b600061327e83613889565b9050600081116132e35760405162461bcd60e51b815260206004820152602a60248201527f44414f436f6d6d69747465653a20796f7520646f6e2774206861766520636c6160448201526934b6b0b13632903a37b760b11b60648201526084016109e4565b600154604051633bc3556560e21b81526001600160a01b038681166004830152602482018490529091169063ef0d559490604401600060405180830381600087803b15801561333157600080fd5b505af1158015613345573d6000803e3d6000fd5b505050506003820180546001600160801b031916426001600160801b03908116919091179091556002830180549091169055604080516001600160a01b038681168252602082018490528516917fb15377c434dc1922cc2eb7d8950640960a05f0cf6d5dc9442de8414a9da2b308910160405180910390a250505050565b6133ce600033613871565b6133ea5760405162461bcd60e51b81526004016109e4906156b1565b81600854106134615760405162461bcd60e51b815260206004820152603c60248201527f44414f436f6d6d69747465653a20596f75206861766520746f2063616c6c206460448201527f656372656173654d61784d656d62657220746f2064656372656173650000000060648201526084016109e4565b6008805490839055613471614c04565b61347a82613cb1565b604051839082907f8c0366d1e3a335a312d012257ee764723c38ec2dd5e74cbfad372513521f977190600090a3505050565b6134b7600033613871565b6134d35760405162461bcd60e51b81526004016109e4906156b1565b806001600160a01b03811661352a5760405162461bcd60e51b815260206004820152601a60248201527f44414f436f6d6d69747465653a207a65726f206164647265737300000000000060448201526064016109e4565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b0382166135a55760405162461bcd60e51b815260206004820152601f60248201527f54686973206163636f756e74206973206e6f7420612063616e6469646174650060448201526064016109e4565b816001600160a01b031663817b1cd26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190615767565b613612600033613871565b61362e5760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b03166356150a368483600381111561365257613652615a62565b6040518363ffffffff1660e01b815260040161366f929190615a78565b600060405180830381600087803b15801561368957600080fd5b505af115801561369d573d6000803e3d6000fd5b50506002546001600160a01b0316915063d896dd649050848460058111156136c7576136c7615a62565b6040518363ffffffff1660e01b81526004016136e4929190615a9c565b600060405180830381600087803b1580156136fe57600080fd5b505af1158015613712573d6000803e3d6000fd5b50505050505050565b613726600033613871565b6137425760405162461bcd60e51b81526004016109e4906156b1565b600560009054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561379257600080fd5b505af11580156137a6573d6000803e3d6000fd5b50505050565b60025460405163442da34b60e11b8152600481018390526001600160a01b039091169063885b469690602401611616565b6001600160a01b038082166000908152600960209081526040808320548151633b253c2b60e11b8152915193941692839263764a78569260048082019391829003018188875af1158015613835573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190615734565b6000828152600c6020526040812061108c9083614c67565b6000828152600c6020526040812061108c9083614c73565b6001600160a01b038116600090815260096020526040812060028101546001600160801b03600160801b8204811691161561392957600382015460028301546001600160801b03918216911611156139045760028201546001600160801b03166138f342836157a9565b6138fd9190615796565b9050613929565b60038201546001600160801b031661391c42836157a9565b6139269190615796565b90505b600b546139369082615b93565b949350505050565b6005546001600160a01b03166139aa5760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b0316613a185760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b0316613a8a5760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b611c5e3383836145bc565b613aa0600033613871565b613abc5760405162461bcd60e51b81526004016109e4906156b1565b604051633b2bf90560e11b81526001600160a01b038281166004830152831690637657f20a90602401600060405180830381600087803b158015613aff57600080fd5b505af1158015613b13573d6000803e3d6000fd5b505050505050565b600080613b40836001600160a01b039081166000908152600960205260409020541690565b905061108c8161354d565b613b56600033613871565b613b725760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b0316613bcd5760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b600254604051635a7b4db560e11b8152600481018390526001600160a01b039091169063b4f69b6a90602401611616565b613c09600033613871565b613c255760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b0316613c805760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b60025460405163302f14c160e21b8152600481018390526001600160a01b039091169063c0bc530490602401611616565b613cbc600033613871565b613cd85760405162461bcd60e51b81526004016109e4906156b1565b6002546001600160a01b0316613d335760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6002600854613d429190615baa565b8111613d905760405162461bcd60e51b815260206004820152601c60248201527f44414f436f6d6d69747465653a20696e76616c69642071756f72756d0000000060448201526064016109e4565b600854811115613df15760405162461bcd60e51b815260206004820152602660248201527f44414f436f6d6d69747465653a2071756f72756d20657863656564206d61782060448201526536b2b6b132b960d11b60648201526084016109e4565b600a8190556040518181527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e9060200160405180910390a150565b600080336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9191906156f9565b9050613ec0816001600160a01b03166000908152600960205260409020600201546001600160801b0316151590565b613f185760405162461bcd60e51b815260206004820152602360248201527f53746f726167655374617465436f6d6d69747465653a206e6f742061206d656d6044820152623132b960e91b60648201526084016109e4565b6000336001600160a01b0316636c8381f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7c91906156f9565b6001600160a01b038082166000908152600960205260409020805492935091163314613ffb5760405162461bcd60e51b815260206004820152602860248201527f44414f436f6d6d69747465653a20696e76616c69642063616e6469646174652060448201526718dbdb9d1c9858dd60c21b60648201526084016109e4565b6000600782600101548154811061401457614014615751565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556002810154614055906001600160801b031642615796565b60028201546140749190600160801b90046001600160801b03166157a9565b6001600160801b0316600160801b026001600160801b031916600282015560018101805460009182905560405190919082907f663b98adf1afa777e36528b3293a057803f87ed00d2d2518dccfe5d7a6e99ccf906140e29087906001600160a01b0391909116815260200190565b60405180910390a3600194505050505090565b6001600160a01b03838116600090815260096020526040902054166137a6818484612e86565b6000818152600c602052604081206109b790614c95565b6001600160a01b0380821660009081526009602052604081208054919290911661415f5750600092915050565b805460009061417e906001600160a01b0316631dffc87160e21b614c9f565b9050801515600003614194575060009392505050565b815460408051631dffc87160e21b815290516001600160a01b03909216916377ff21c4916004808201926020929091908290030181865afa1580156141dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139369190615734565b600080614226846001600160a01b039081166000908152600960205260409020541690565b90506139368184610fca565b6000828152600c602052604090206002015461424e9033613871565b6124de5760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201527f2061646d696e20746f207265766f6b650000000000000000000000000000000060648201526084016109e4565b6142cb600033613871565b6142e75760405162461bcd60e51b81526004016109e4906156b1565b600560009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561379257600080fd5b60008060208301600080868360008a619c405a03f19695505050505050565b6000828152600c6020526040902061436e9082614cbb565b15611c5e5760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152600c602052604090206143c79082614cd0565b15611c5e5760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b61444e6040518060a001604052806060815260200160006001600160801b0316815260200160006001600160801b03168152602001600015158152602001606081525090565b61445a82840184615c83565b6080860152151560608501526001600160801b039081166040850152166020830152815292915050565b6002546000906001600160a01b03166144e25760405162461bcd60e51b815260206004820152602c6024820152600080516020615ed083398151915260448201526b61676572206973207a65726f60a01b60648201526084016109e4565b6144eb87614ce5565b6002546040516304a091b760e31b81526000916001600160a01b0316906325048db890614524908a908a908a908a908a90600401615da6565b6020604051808303816000875af1158015614543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145679190615767565b905080886001600160a01b03167fcd47bcad760e912d146723a314cc78b8570ee76ec8bdd4b60335087f6c2f47d7898989896040516145a99493929190615e3c565b60405180910390a3979650505050505050565b6005546001600160a01b03166146285760405162461bcd60e51b815260206004820152602b60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964205360448201526a6569674d616e616765726560a81b60648201526084016109e4565b6004546001600160a01b03166146965760405162461bcd60e51b815260206004820152602d60248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c6964204c60448201526c6179657232526567697374727960981b60648201526084016109e4565b6003546001600160a01b03166147085760405162461bcd60e51b815260206004820152603160248201527f53746f726167655374617465436f6d6d69747465653a20696e76616c696420436044820152706f6d6d69747465654c32466163746f727960781b60648201526084016109e4565b6001600160a01b0380831660009081526009602052604090205416156147825760405162461bcd60e51b815260206004820152602960248201527f44414f436f6d6d69747465653a2063616e64696461746520616c7265616479206044820152681c9959da5cdd195c9960ba1b60648201526084016109e4565b6001600160a01b0382166147f15760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6001600160a01b0382811660009081526009602052604090205416156148725760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a205468652063616e64696461746520616c726560448201526f18591e481a185cc818dbdb9d1c9858dd60821b60648201526084016109e4565b6000829050806001600160a01b031663882eed2c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148d99190615734565b6149335760405162461bcd60e51b815260206004820152602560248201527f44414f436f6d6d69747465653a20696e76616c6964206c617965723220636f6e6044820152641d1c9858dd60da1b60648201526084016109e4565b836001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa15801561497b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061499f91906156f9565b6001600160a01b0316146149f55760405162461bcd60e51b815260206004820152601e60248201527f44414f436f6d6d69747465653a20696e76616c6964206f70657261746f72000060448201526064016109e4565b60035460055460405163732518fb60e11b81526000926001600160a01b039081169263e64a31f692614a349289926001928a9230921690600401615e77565b6020604051808303816000875af1158015614a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a7791906156f9565b90506001600160a01b038116614ae85760405162461bcd60e51b815260206004820152603060248201527f44414f436f6d6d69747465653a206465706c6f7965642063616e64696461746560448201526f436f6e7472616374206973207a65726f60801b60648201526084016109e4565b6040805160a0810182526001600160a01b038381168083526000602080850182815285870183815260608701848152608088018581528d88168087526009909552898620985189546001600160a01b03199081169190991617895592516001808a0191909155915190516001600160801b03918216600160801b918316919091021760028901559151600390970180546001600160801b031916979092169690961790556006805495860181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9093018054909216831790915591517f0f401d1bd976f5304ef9cfa87aeb24d777c0e205fb87bbae1dc0f0293ba7976a90614bf5908790615ebc565b60405180910390a35050505050565b6007545b600854811015614c6457600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b031916905580614c5c816159c4565b915050614c08565b50565b600061108c8383614f06565b6001600160a01b0381166000908152600183016020526040812054151561108c565b60006109b7825490565b6000614caa83614f8c565b801561108c575061108c8383614fbf565b600061108c836001600160a01b03841661505d565b600061108c836001600160a01b0384166150ac565b60025460408051632522a32f60e01b815290516000926001600160a01b031691632522a32f9160048083019260209291908290030181865afa158015614d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d539190615767565b6000546040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018490529293509116906323b872dd906064016020604051808303816000875af1158015614dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dd29190615734565b614e445760405162461bcd60e51b815260206004820152603160248201527f44414f436f6d6d69747465653a206661696c656420746f207472616e7366657260448201527f20746f6e2066726f6d2063726561746f7200000000000000000000000000000060648201526084016109e4565b60005460405163a9059cbb60e01b815260016004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015614e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eba9190615734565b611c5e5760405162461bcd60e51b815260206004820152601c60248201527f44414f436f6d6d69747465653a206661696c656420746f206275726e0000000060448201526064016109e4565b81546000908210614f645760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016109e4565b826000018281548110614f7957614f79615751565b9060005260206000200154905092915050565b6000614f9f826301ffc9a760e01b614fbf565b80156109b75750614fb8826001600160e01b0319614fbf565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015615046575060208210155b80156150525750600081115b979650505050505050565b60008181526001830160205260408120546150a4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109b7565b5060006109b7565b600081815260018301602052604081205480156151955760006150d0600183615796565b85549091506000906150e490600190615796565b905060008660000182815481106150fd576150fd615751565b906000526020600020015490508087600001848154811061512057615120615751565b6000918252602090912001556151378360016157a9565b6000828152600189016020526040902055865487908061515957615159615b5a565b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506109b7565b60009150506109b7565b6000602082840312156151b157600080fd5b81356001600160e01b03198116811461108c57600080fd5b6001600160a01b0381168114614c6457600080fd5b6000602082840312156151f057600080fd5b813561108c816151c9565b60006020828403121561520d57600080fd5b5035919050565b6000806040838503121561522757600080fd5b8235615232816151c9565b91506020830135615242816151c9565b809150509250929050565b60008083601f84011261525f57600080fd5b50813567ffffffffffffffff81111561527757600080fd5b60208301915083602082850101111561528f57600080fd5b9250929050565b600080600080606085870312156152ac57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156152d157600080fd5b6152dd8782880161524d565b95989497509550505050565b600080604083850312156152fc57600080fd5b823591506020830135615242816151c9565b60008060006040848603121561532357600080fd5b833567ffffffffffffffff81111561533a57600080fd5b6153468682870161524d565b909450925050602084013561535a816151c9565b809150509250925092565b60008060008060006080868803121561537d57600080fd5b8535615388816151c9565b94506020860135615398816151c9565b935060408601359250606086013567ffffffffffffffff8111156153bb57600080fd5b6153c78882890161524d565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715615417576154176153d8565b604052919050565b600067ffffffffffffffff821115615439576154396153d8565b50601f01601f191660200190565b600061545a6154558461541f565b6153ee565b905082815283838301111561546e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261549657600080fd5b61108c83833560208501615447565b6000806000606084860312156154ba57600080fd5b83356154c5816151c9565b925060208401356154d5816151c9565b9150604084013567ffffffffffffffff8111156154f157600080fd5b6154fd86828701615485565b9150509250925092565b6000806040838503121561551a57600080fd5b50508035926020909101359150565b6000806020838503121561553c57600080fd5b823567ffffffffffffffff8082111561555457600080fd5b818501915085601f83011261556857600080fd5b81358181111561557757600080fd5b8660208260051b850101111561558c57600080fd5b60209290920196919550909350505050565b600080602083850312156155b157600080fd5b823567ffffffffffffffff8111156155c857600080fd5b6155d48582860161524d565b90969095509350505050565b6000806000604084860312156155f557600080fd5b8335615600816151c9565b9250602084013567ffffffffffffffff81111561561c57600080fd5b6156288682870161524d565b9497909650939450505050565b60008060006060848603121561564a57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561567457600080fd5b823561567f816151c9565b9150602083013567ffffffffffffffff81111561569b57600080fd5b6156a785828601615485565b9150509250929050565b60208082526028908201527f44414f436f6d6d69747465653a206d73672e73656e646572206973206e6f742060408201526730b71030b236b4b760c11b606082015260800190565b60006020828403121561570b57600080fd5b815161108c816151c9565b8015158114614c6457600080fd5b805161572f81615716565b919050565b60006020828403121561574657600080fd5b815161108c81615716565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561577957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109b7576109b7615780565b808201808211156109b7576109b7615780565b600067ffffffffffffffff8211156157d6576157d66153d8565b5060051b60200190565b60005b838110156157fb5781810151838201526020016157e3565b50506000910152565b600082601f83011261581557600080fd5b81516020615825615455836157bc565b82815260059290921b8401810191818101908684111561584457600080fd5b8286015b848110156158c057805167ffffffffffffffff8111156158685760008081fd5b8701603f8101891361587a5760008081fd5b84810151604061588c6154558361541f565b8281528b828486010111156158a15760008081fd5b6158b0838983018487016157e0565b8652505050918301918301615848565b509695505050505050565b600080600080608085870312156158e157600080fd5b845167ffffffffffffffff808211156158f957600080fd5b818701915087601f83011261590d57600080fd5b8151602061591d615455836157bc565b82815260059290921b8401810191818101908b84111561593c57600080fd5b948201945b83861015615963578551615954816151c9565b82529482019490820190615941565b918a015191985090935050508082111561597c57600080fd5b5061598987828801615804565b93505061599860408601615724565b6060959095015193969295505050565b600082516159ba8184602087016157e0565b9190910192915050565b6000600182016159d6576159d6615780565b5060010190565b600081518084526020808501945080840160005b83811015615a165781516001600160a01b0316875295820195908201906001016159f1565b509495945050505050565b60208152600061108c60208301846159dd565b600080600060608486031215615a4957600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b8281526040810160048310615a8f57615a8f615a62565b8260208301529392505050565b8281526040810160068310615a8f57615a8f615a62565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000615af6604083018486615ab3565b95945050505050565b60006001600160a01b038089168352871515602084015260a06040840152615b2b60a084018789615ab3565b94811660608401529290921660809091015250949350505050565b602081526000613936602083018486615ab3565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0384168152604060208201526000615af6604083018486615ab3565b80820281158282048414176109b7576109b7615780565b600082615bc757634e487b7160e01b600052601260045260246000fd5b500490565b80356001600160801b038116811461572f57600080fd5b803561572f81615716565b600082601f830112615bff57600080fd5b81356020615c0f615455836157bc565b82815260059290921b84018101918181019086841115615c2e57600080fd5b8286015b848110156158c057803567ffffffffffffffff811115615c525760008081fd5b8701603f81018913615c645760008081fd5b615c75898683013560408401615447565b845250918301918301615c32565b600080600080600060a08688031215615c9b57600080fd5b853567ffffffffffffffff80821115615cb357600080fd5b818801915088601f830112615cc757600080fd5b81356020615cd7615455836157bc565b82815260059290921b8401810191818101908c841115615cf657600080fd5b948201945b83861015615d1d578535615d0e816151c9565b82529482019490820190615cfb565b9950615d2c90508a8201615bcc565b97505050615d3c60408901615bcc565b9450615d4a60608901615be3565b93506080880135915080821115615d6057600080fd5b50615d6d88828901615bee565b9150509295509295909350565b60008151808452615d928160208601602086016157e0565b601f01601f19169290920160200192915050565b60a081526000615db960a08301886159dd565b60206001600160801b0380891682860152808816604086015250851515606085015283820360808501528185518084528284019150828160051b85010183880160005b83811015615e2a57601f19878403018552615e18838351615d7a565b94860194925090850190600101615dfc565b50909c9b505050505050505050505050565b608081526000615e4f60808301876159dd565b6001600160801b03958616602084015293909416604082015290151560609091015292915050565b60006001600160a01b038088168352861515602084015260a06040840152615ea260a0840187615d7a565b948116606084015292909216608090910152509392505050565b60208152600061108c6020830184615d7a56fe53746f726167655374617465436f6d6d69747465653a204167656e64614d616ea164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "castVote(uint256,uint256,string)": {
        "params": {
          "_agendaID": "The agenda ID",
          "_comment": "voting comment",
          "_vote": "voting type"
        }
      },
      "changeMember(uint256)": {
        "params": {
          "_memberIndex": "The member slot index to be replaced"
        },
        "returns": {
          "_0": "Whether or not the execution succeeded"
        }
      },
      "decreaseMaxMember(uint256,uint256)": {
        "params": {
          "_quorum": "New quorum",
          "_reducingMemberIndex": "Reducing member slot index"
        }
      },
      "endAgendaVoting(uint256)": {
        "params": {
          "_agendaID": "Agenda ID"
        }
      },
      "executeAgenda(uint256)": {
        "params": {
          "_agendaID": "Agenda ID"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseMaxMember(uint256,uint256)": {
        "params": {
          "_newMaxMember": "New number of member slot",
          "_quorum": "New quorum"
        }
      },
      "registerLayer2Candidate(address,string)": {
        "params": {
          "_layer2": "Layer2 contract address to be registered",
          "_memo": "A memo for the candidate"
        }
      },
      "registerLayer2CandidateByOwner(address,address,string)": {
        "params": {
          "_layer2": "Layer2 contract address to be registered",
          "_memo": "A memo for the candidate",
          "_operator": "Operator address of the layer2 contract"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "retireMember()": {
        "returns": {
          "_0": "Whether or not the execution succeeded"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAgendaStatus(uint256,uint256,uint256)": {
        "params": {
          "_agendaID": "Agenda ID",
          "_result": "New result",
          "_status": "New status"
        }
      },
      "setCandidateFactory(address)": {
        "params": {
          "_candidateFactory": "New CandidateFactory contract address"
        }
      },
      "setCreateAgendaFees(uint256)": {
        "params": {
          "_fees": "Fee amount on TON"
        }
      },
      "setDaoVault(address)": {
        "params": {
          "_daoVault": "New DAOVault contract address"
        }
      },
      "setExecutingPeriodSeconds(uint256)": {
        "params": {
          "_executingPeriodSeconds": "New executing period in second"
        }
      },
      "setLayer2Registry(address)": {
        "params": {
          "_layer2Registry": "New Layer2Registry contract address"
        }
      },
      "setMemoOnCandidate(address,string)": {
        "params": {
          "_candidate": "candidate address",
          "_memo": "New memo on this candidate"
        }
      },
      "setMemoOnCandidateContract(address,string)": {
        "params": {
          "_candidateContract": "candidate contract address",
          "_memo": "New memo on this candidate"
        }
      },
      "setMinimumNoticePeriodSeconds(uint256)": {
        "params": {
          "_minimumNoticePeriod": "New minimum notice period in second"
        }
      },
      "setMinimumVotingPeriodSeconds(uint256)": {
        "params": {
          "_minimumVotingPeriod": "New minimum voting period in second"
        }
      },
      "setQuorum(uint256)": {
        "params": {
          "_quorum": "New quorum"
        }
      },
      "setSeigManager(address)": {
        "params": {
          "_seigManager": "New SeigManager contract address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "updateSeigniorage(address)": {
        "params": {
          "_candidate": "Candidate address to be updated"
        },
        "returns": {
          "_0": "Whether or not the execution succeeded"
        }
      },
      "updateSeigniorages(address[])": {
        "params": {
          "_candidates": "Candidate addresses to be updated"
        },
        "returns": {
          "_0": "Whether or not the execution succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "castVote(uint256,uint256,string)": {
        "notice": "Vote on an agenda"
      },
      "changeMember(uint256)": {
        "notice": "Replaces an existing member"
      },
      "claimActivityReward(address)": {
        "notice": "Claims the activity reward for member"
      },
      "decreaseMaxMember(uint256,uint256)": {
        "notice": "Decreases the number of member slot"
      },
      "endAgendaVoting(uint256)": {
        "notice": "Set the agenda status as ended(denied or dismissed)"
      },
      "executeAgenda(uint256)": {
        "notice": "Execute the accepted agenda"
      },
      "increaseMaxMember(uint256,uint256)": {
        "notice": "Increases the number of member slot"
      },
      "registerLayer2Candidate(address,string)": {
        "notice": "Registers the exist layer2 on DAO"
      },
      "registerLayer2CandidateByOwner(address,address,string)": {
        "notice": "Registers the exist layer2 on DAO by owner"
      },
      "retireMember()": {
        "notice": "Retires member"
      },
      "setAgendaStatus(uint256,uint256,uint256)": {
        "notice": "Set status and result of specific agenda"
      },
      "setCandidateFactory(address)": {
        "notice": "Set CandidateFactory contract address"
      },
      "setCreateAgendaFees(uint256)": {
        "notice": "Set fee amount of creating an agenda"
      },
      "setDaoVault(address)": {
        "notice": "Set DAOVault contract address"
      },
      "setExecutingPeriodSeconds(uint256)": {
        "notice": "Set the executing period"
      },
      "setLayer2Registry(address)": {
        "notice": "Set Layer2Registry contract address"
      },
      "setMemoOnCandidate(address,string)": {
        "notice": "Set memo"
      },
      "setMemoOnCandidateContract(address,string)": {
        "notice": "Set memo"
      },
      "setMinimumNoticePeriodSeconds(uint256)": {
        "notice": "Set the minimum notice period"
      },
      "setMinimumVotingPeriodSeconds(uint256)": {
        "notice": "Set the minimum voting period"
      },
      "setQuorum(uint256)": {
        "notice": "Set new quorum"
      },
      "setSeigManager(address)": {
        "notice": "Set SeigManager contract address"
      },
      "updateSeigniorage(address)": {
        "notice": "Call updateSeigniorage on SeigManager"
      },
      "updateSeigniorages(address[])": {
        "notice": "Call updateSeigniorage on SeigManager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7985,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "ton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7989,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "daoVault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDAOVault)9184"
      },
      {
        "astId": 7993,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "agendaManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDAOAgendaManager)8862"
      },
      {
        "astId": 7997,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "candidateFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICandidateFactory)8573"
      },
      {
        "astId": 8001,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "layer2Registry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ILayer2Registry)9280"
      },
      {
        "astId": 8005,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "seigManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISeigManager)9444"
      },
      {
        "astId": 8009,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "candidates",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8013,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "members",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8016,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "maxMember",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8021,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "_candidateInfos",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(CandidateInfo)9467_storage)"
      },
      {
        "astId": 8024,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "quorum",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8027,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "activityRewardPerSecond",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2964,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "_roles",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2959_storage)"
      },
      {
        "astId": 3502,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 8176,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "_implementation",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 8178,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "pauseProxy",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 8183,
        "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
        "label": "_oldCandidateInfos",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(CandidateInfo2)8196_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ICandidateFactory)8573": {
        "encoding": "inplace",
        "label": "contract ICandidateFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IDAOAgendaManager)8862": {
        "encoding": "inplace",
        "label": "contract IDAOAgendaManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDAOVault)9184": {
        "encoding": "inplace",
        "label": "contract IDAOVault",
        "numberOfBytes": "20"
      },
      "t_contract(ILayer2Registry)9280": {
        "encoding": "inplace",
        "label": "contract ILayer2Registry",
        "numberOfBytes": "20"
      },
      "t_contract(ISeigManager)9444": {
        "encoding": "inplace",
        "label": "contract ISeigManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(CandidateInfo)9467_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStorageStateCommittee.CandidateInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CandidateInfo)9467_storage"
      },
      "t_mapping(t_address,t_struct(CandidateInfo2)8196_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StorageStateCommitteeV2.CandidateInfo2)",
        "numberOfBytes": "32",
        "value": "t_struct(CandidateInfo2)8196_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2959_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2959_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AddressSet)3832_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3831,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3555_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CandidateInfo)9467_storage": {
        "encoding": "inplace",
        "label": "struct IStorageStateCommittee.CandidateInfo",
        "members": [
          {
            "astId": 9458,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "candidateContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9460,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "indexMembers",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9462,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "memberJoinedTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 9464,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "rewardPeriod",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 9466,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "claimedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CandidateInfo2)8196_storage": {
        "encoding": "inplace",
        "label": "struct StorageStateCommitteeV2.CandidateInfo2",
        "members": [
          {
            "astId": 8185,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "candidateContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8187,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "newCandidate",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8189,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "indexMembers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8191,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "memberJoinedTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 8193,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "rewardPeriod",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 8195,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "claimedTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)2959_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2956,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3832_storage"
          },
          {
            "astId": 2958,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3555_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3550,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3554,
            "contract": "contracts/dao/DAOCommitteeExtend.sol:DAOCommitteeExtend",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}