{
  "address": "0x72662E4da74278430123cE51405c1e7A1B87C294",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferCoinage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agendaID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vote",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_comment",
          "type": "string"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_memberIndex",
          "type": "uint256"
        }
      ],
      "name": "changeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "changeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimActivityReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "committee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentFork",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLayer2Candidate",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seigManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCandidateContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCandidateFwContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLayer2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLayer2Candidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "forkNumber",
          "type": "uint256"
        }
      ],
      "name": "lastEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retireMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        }
      ],
      "name": "setCommittee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "setMemo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seigManager",
          "type": "address"
        }
      ],
      "name": "setSeigManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "stakedOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalsupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSeigniorage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc90e011ebe8dca435470c27f948037fbcffb3981c1523f22b7d89c321ed261f4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x72662E4da74278430123cE51405c1e7A1B87C294",
    "transactionIndex": 0,
    "gasUsed": "2128597",
    "logsBloom": "0x
    "blockHash": "0x99959f7d1d6c98124aa4a7d3aba8e469509657b41a3a446d4c357edfb817a2c4",
    "transactionHash": "0xc90e011ebe8dca435470c27f948037fbcffb3981c1523f22b7d89c321ed261f4",
    "logs": [],
    "blockNumber": 18231465,
    "cumulativeGasUsed": "2128597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87712d450cfd6ca926c6544b6712808e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCoinage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memberIndex\",\"type\":\"uint256\"}],\"name\":\"changeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimActivityReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLayer2Candidate\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCandidateContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCandidateFwContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLayer2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLayer2Candidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forkNumber\",\"type\":\"uint256\"}],\"name\":\"lastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"setMemo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"setSeigManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSeigniorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"castVote(uint256,uint256,string)\":{\"params\":{\"_agendaID\":\"The agenda ID\",\"_comment\":\"voting comment\",\"_vote\":\"voting type\"}},\"changeMember(uint256)\":{\"params\":{\"_memberIndex\":\"The index of changing member slot\"},\"returns\":{\"_0\":\"Whether or not the execution succeeded\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"isCandidateContract()\":{\"returns\":{\"_0\":\"Whether or not this contract is a candidate contract\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"retireMember()\":{\"returns\":{\"_0\":\"Whether or not the execution succeeded\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCommittee(address)\":{\"params\":{\"_committee\":\"New DAOCommitteeProxy contract address\"}},\"setMemo(string)\":{\"params\":{\"_memo\":\"New memo on this candidate\"}},\"stakedOf(address)\":{\"params\":{\"_account\":\"Address being retrieved\"},\"returns\":{\"amount\":\"The staked balance of the account on this candidate\"}},\"totalStaked()\":{\"returns\":{\"totalsupply\":\"Total staked amount on this candidate\"}},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}},\"updateSeigniorage()\":{\"returns\":{\"_0\":\"Whether or not the execution succeeded\"}}},\"title\":\"Managing a candidate\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"castVote(uint256,uint256,string)\":{\"notice\":\"Vote on an agenda\"},\"changeMember(uint256)\":{\"notice\":\"Try to be a member\"},\"isCandidateContract()\":{\"notice\":\"Checks whether this contract is a candidate contract\"},\"retireMember()\":{\"notice\":\"Retire a member\"},\"setCommittee(address)\":{\"notice\":\"Set DAOCommitteeProxy contract address\"},\"setMemo(string)\":{\"notice\":\"Set memo\"},\"stakedOf(address)\":{\"notice\":\"Retrieves the staked balance of the account on this candidate\"},\"totalStaked()\":{\"notice\":\"Retrieves the total staked balance on this candidate\"},\"updateSeigniorage()\":{\"notice\":\"Set DAOCommitteeProxy contract addressCall updateSeigniorage on SeigManager\"}},\"notice\":\"Either a user or layer2 contract can be a candidate\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dao/Candidate.sol\":\"Candidate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n}\\n\",\"keccak256\":\"0x0d32f9f26e844108502fd2204972019ee8f49b7642e7f657e1822c44f60e4460\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef35b3e8e188ae00ac341be828fadae45c2da6e510f93b8695a44dc25a241950\",\"license\":\"MIT\"},\"contracts/dao/Candidate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IDAOCommittee } from \\\"./interfaces/IDAOCommittee.sol\\\";\\nimport { IERC20 } from  \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ICandidate } from \\\"./interfaces/ICandidate.sol\\\";\\nimport { ILayer2 } from \\\"./interfaces/ILayer2.sol\\\";\\nimport { ILayer2Registry } from \\\"./interfaces/ILayer2Registry.sol\\\";\\n\\nimport \\\"../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../common/AccessibleCommon.sol\\\";\\nimport \\\"./CandidateStorage.sol\\\";\\n\\ninterface ICoinage {\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface IOperator {\\n  function setWithdrawalDelay(uint256 withdrawalDelay_) external;\\n}\\n\\ninterface IISeigManager {\\n  function updateSeigniorage() external returns (bool);\\n  function coinages(address layer2) external view returns (address);\\n}\\n/// @title Managing a candidate\\n/// @notice Either a user or layer2 contract can be a candidate\\ncontract Candidate is ProxyStorage, AccessibleCommon, CandidateStorage, ILayer2 {\\n\\n    event TransferCoinage(address from, address to, uint256 amount);\\n\\n    modifier onlyCandidate() {\\n        if (isLayer2Candidate) {\\n            ILayer2 layer2 = ILayer2(candidate);\\n            require(layer2.operator() == msg.sender, \\\"Candidate: sender is not the operator of this contract\\\");\\n        } else {\\n            require(candidate == msg.sender, \\\"Candidate: sender is not the candidate of this contract\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(candidate == msg.sender, \\\"Candidate: sender is not an operator\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return  _supportedInterfaces[interfaceId] || super.supportsInterface(interfaceId) ;\\n    }\\n\\n    // function _registerInterface(bytes4 interfaceId) internal virtual {\\n    //     require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n    //     _supportedInterfaces[interfaceId] = true;\\n    // }\\n\\n    function initialize(\\n        address _candidate,\\n        bool _isLayer2Candidate,\\n        string memory _memo,\\n        address _committee,\\n        address _seigManager\\n    ) external  {\\n        require(\\n            _candidate != address(0)\\n            || _committee != address(0)\\n            || _seigManager != address(0),\\n            \\\"Candidate: input is zero\\\"\\n        );\\n        candidate = _candidate;\\n        isLayer2Candidate = _isLayer2Candidate;\\n        if (isLayer2Candidate) {\\n            require(\\n                ILayer2(candidate).isLayer2(),\\n                \\\"Candidate: invalid layer2 contract\\\"\\n            );\\n        }\\n        committee = _committee;\\n        seigManager = _seigManager;\\n        memo = _memo;\\n\\n        _registerInterface(ICandidate(address(this)).isCandidateContract.selector);\\n    }\\n\\n    function setSeigManager(address _seigManager) external onlyOwner {\\n        require(_seigManager != address(0), \\\"Candidate: input is zero\\\");\\n        seigManager = _seigManager;\\n    }\\n\\n    /// @notice Set DAOCommitteeProxy contract address\\n    /// @param _committee New DAOCommitteeProxy contract address\\n    function setCommittee(address _committee) external onlyOwner {\\n        require(_committee != address(0), \\\"Candidate: input is zero\\\");\\n        committee = _committee;\\n    }\\n\\n    /// @notice Set memo\\n    /// @param _memo New memo on this candidate\\n    function setMemo(string calldata _memo) external onlyOwner {\\n        memo = _memo;\\n    }\\n\\n    /// @notice Set DAOCommitteeProxy contract address\\n    /// @notice Call updateSeigniorage on SeigManager\\n    /// @return Whether or not the execution succeeded\\n    function updateSeigniorage() external returns (bool) {\\n        require(seigManager != address(0), \\\"Candidate: SeigManager is zero\\\");\\n        require(\\n            !isLayer2Candidate,\\n            \\\"Candidate: you should update seigniorage from layer2 contract\\\"\\n        );\\n\\n        require(IISeigManager(seigManager).updateSeigniorage(), \\\"fail updateSeigniorage\\\");\\n        return true;\\n    }\\n\\n    /// @notice Try to be a member\\n    /// @param _memberIndex The index of changing member slot\\n    /// @return Whether or not the execution succeeded\\n    function changeMember(uint256 _memberIndex)\\n        external\\n        onlyCandidate\\n        returns (bool)\\n    {\\n        return IDAOCommittee(committee).changeMember(_memberIndex);\\n    }\\n\\n    /// @notice Retire a member\\n    /// @return Whether or not the execution succeeded\\n    function retireMember() external onlyCandidate returns (bool) {\\n        return IDAOCommittee(committee).retireMember();\\n    }\\n\\n    /// @notice Vote on an agenda\\n    /// @param _agendaID The agenda ID\\n    /// @param _vote voting type\\n    /// @param _comment voting comment\\n    function castVote(\\n        uint256 _agendaID,\\n        uint256 _vote,\\n        string calldata _comment\\n    )\\n        external\\n        onlyCandidate\\n    {\\n        IDAOCommittee(committee).castVote(_agendaID, _vote, _comment);\\n    }\\n\\n    function claimActivityReward()\\n        external\\n        onlyCandidate\\n    {\\n        address receiver;\\n\\n        if (isLayer2Candidate) {\\n            ILayer2 layer2 = ILayer2(candidate);\\n            receiver = layer2.operator();\\n        } else {\\n            receiver = candidate;\\n        }\\n        IDAOCommittee(committee).claimActivityReward(receiver);\\n    }\\n\\n    /// @notice Checks whether this contract is a candidate contract\\n    /// @return Whether or not this contract is a candidate contract\\n    function isCandidateContract() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function isCandidateFwContract() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function operator() external view override returns (address) { return candidate; }\\n    function isLayer2() external pure override returns (bool) { return true; }\\n    function currentFork() external pure override returns (uint256) { return 1; }\\n    function lastEpoch(uint256 forkNumber) external pure override returns (uint256) { return 1; }\\n    function changeOperator(address _operator) external override { }\\n\\n    /// @notice Retrieves the total staked balance on this candidate\\n    /// @return totalsupply Total staked amount on this candidate\\n    function totalStaked()\\n        external\\n        view\\n        returns (uint256 totalsupply)\\n    {\\n        IERC20 coinage = _getCoinageToken();\\n        return coinage.totalSupply();\\n    }\\n\\n    /// @notice Retrieves the staked balance of the account on this candidate\\n    /// @param _account Address being retrieved\\n    /// @return amount The staked balance of the account on this candidate\\n    function stakedOf(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        IERC20 coinage = _getCoinageToken();\\n        return coinage.balanceOf(_account);\\n    }\\n\\n    function _getCoinageToken() internal view returns (IERC20) {\\n        address c;\\n        if (isLayer2Candidate) {\\n            c = candidate;\\n        } else {\\n            c = address(this);\\n        }\\n\\n        require(c != address(0), \\\"Candidate: coinage is zero\\\");\\n\\n        return IERC20(IISeigManager(seigManager).coinages(c));\\n    }\\n\\n}\\n\",\"keccak256\":\"0xaf7dad64e59ed2ca04313269410c3367432caf7ae99bcee60fd25d82353c705d\",\"license\":\"MIT\"},\"contracts/dao/CandidateStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title\\n/// @notice\\ncontract CandidateStorage   {\\n    mapping(bytes4 => bool) internal _supportedInterfaces;\\n    bool public isLayer2Candidate;\\n    address public candidate;\\n    string public memo;\\n\\n    address public committee;\\n    address public seigManager;\\n\\n}\\n\",\"keccak256\":\"0xf7261b018b00c81a8dd29b06228d34df45d4ab20707400df528685decba1f835\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ICandidate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandidate {\\n    function setSeigManager(address _seigMan) external;\\n    function setCommittee(address _committee) external;\\n    function updateSeigniorage() external returns (bool);\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function castVote(uint256 _agendaID, uint256 _vote, string calldata _comment) external;\\n    function isCandidateContract() external view returns (bool);\\n    function totalStaked() external view returns (uint256 totalsupply);\\n    function stakedOf(address _account) external view returns (uint256 amount);\\n    function setMemo(string calldata _memo) external;\\n    function claimActivityReward() external;\\n\\n    // getter\\n    function candidate() external view returns (address);\\n    function isLayer2Candidate() external view returns (bool);\\n    function memo() external view returns (string memory);\\n    function committee() external view returns (address);\\n    function seigManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb1042418e437063a54c21f5b111bfaa8ec86c223ced38e8ded5ad3fd6ea94dc6\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ICandidateFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandidateFactory {\\n    function deploy(\\n        address _candidate,\\n        bool _isLayer2Candidate,\\n        string memory _name,\\n        address _committee,\\n        address _seigManager\\n    )\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0xf072df53f6ee1327d903660d03644ffac60caf82d91a22b58d03bf9b61279a3a\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IDAOAgendaManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { LibAgenda } from \\\"../lib/Agenda.sol\\\";\\nimport { IDAOCommittee } from \\\"../interfaces/IDAOCommittee.sol\\\";\\n\\ninterface IDAOAgendaManager  {\\n    struct Ratio {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    function setCommittee(address _committee) external;\\n    function setCreateAgendaFees(uint256 _createAgendaFees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriodSeconds) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriodSeconds) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function newAgenda(\\n        address[] memory _targets,\\n        uint256 _noticePeriodSeconds,\\n        uint256 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] calldata _functionBytecodes\\n    )\\n        external\\n        returns (uint256 agendaID);\\n    function castVote(uint256 _agendaID, address voter, uint256 _vote) external returns (bool);\\n    function setExecutedAgenda(uint256 _agendaID) external;\\n    function setResult(uint256 _agendaID, LibAgenda.AgendaResult _result) external;\\n    function setStatus(uint256 _agendaID, LibAgenda.AgendaStatus _status) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function setExecutedCount(uint256 _agendaID, uint256 _count) external;\\n\\n    // -- view functions\\n    function isVoter(uint256 _agendaID, address _user) external view returns (bool);\\n    function hasVoted(uint256 _agendaID, address _user) external view returns (bool);\\n    function getVoteStatus(uint256 _agendaID, address _user) external view returns (bool, uint256);\\n    function getAgendaNoticeEndTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingStartTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingEndTimeSeconds(uint256 _agendaID) external view returns (uint256) ;\\n\\n    function canExecuteAgenda(uint256 _agendaID) external view returns (bool);\\n    function getAgendaStatus(uint256 _agendaID) external view returns (uint256 status);\\n    function totalAgendas() external view returns (uint256);\\n    function getAgendaResult(uint256 _agendaID) external view returns (uint256 result, bool executed);\\n    function getExecutionInfo(uint256 _agendaID)\\n        external\\n        view\\n        returns(\\n            address[] memory target,\\n            bytes[] memory functionBytecode,\\n            bool atomicExecute,\\n            uint256 executeStartFrom\\n        );\\n    function isVotableStatus(uint256 _agendaID) external view returns (bool);\\n    function getVotingCount(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 countingYes,\\n            uint256 countingNo,\\n            uint256 countingAbstain\\n        );\\n    function getAgendaTimestamps(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 createdTimestamp,\\n            uint256 noticeEndTimestamp,\\n            uint256 votingStartedTimestamp,\\n            uint256 votingEndTimestamp,\\n            uint256 executedTimestamp\\n        );\\n    function numAgendas() external view returns (uint256);\\n    function getVoters(uint256 _agendaID) external view returns (address[] memory);\\n\\n    function getStatus(uint256 _createAgendaFees) external pure returns (LibAgenda.AgendaStatus);\\n\\n    // getter\\n    function committee() external view returns (IDAOCommittee);\\n    function createAgendaFees() external view returns (uint256);\\n    function minimumNoticePeriodSeconds() external view returns (uint256);\\n    function minimumVotingPeriodSeconds() external view returns (uint256);\\n    function executingPeriodSeconds() external view returns (uint256);\\n    function agendas(uint256 _index) external view returns (LibAgenda.Agenda memory);\\n    function voterInfos(uint256 _index1, address _index2) external view returns (LibAgenda.Voter memory);\\n}\\n\",\"keccak256\":\"0xac0efb5aa81978832200385fa82e0e244f6323b78b3d20ab42f113d6429e760f\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IDAOCommittee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IStorageStateCommittee } from \\\"./IStorageStateCommittee.sol\\\";\\n\\ninterface IDAOCommittee is IStorageStateCommittee {\\n    //--owner\\n    function setSeigManager(address _seigManager) external;\\n    function setCandidatesSeigManager(address[] calldata _candidateContracts, address _seigManager) external;\\n    function setCandidatesCommittee(address[] calldata _candidateContracts, address _committee) external;\\n    function setLayer2Registry(address _layer2Registry) external;\\n    function setAgendaManager(address _agendaManager) external;\\n    function setCandidateFactory(address _candidateFactory) external;\\n    function setTon(address _ton) external;\\n    function setActivityRewardPerSecond(uint256 _value) external;\\n    function setDaoVault(address _daoVault) external;\\n\\n    function increaseMaxMember(uint256 _newMaxMember, uint256 _quorum) external;\\n    function decreaseMaxMember(uint256 _reducingMemberIndex, uint256 _quorum) external;\\n    function createCandidate(string calldata _memo) external;\\n    function registerLayer2Candidate(address _layer2, string memory _memo) external;\\n    function registerLayer2CandidateByOwner(address _operator, address _layer2, string memory _memo) external;\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function setMemoOnCandidate(address _candidate, string calldata _memo) external;\\n    function setMemoOnCandidateContract(address _candidate, string calldata _memo) external;\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    )\\n        external\\n        returns (bool);\\n\\n    function setQuorum(uint256 _quorum) external;\\n    function setCreateAgendaFees(uint256 _fees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriod) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriod) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function castVote(uint256 _AgendaID, uint256 _vote, string calldata _comment) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function executeAgenda(uint256 _AgendaID) external;\\n    function setAgendaStatus(uint256 _agendaID, uint256 _status, uint256 _result) external;\\n\\n    function updateSeigniorage(address _candidate) external returns (bool);\\n    function updateSeigniorages(address[] calldata _candidates) external returns (bool);\\n    function claimActivityReward(address _receiver) external;\\n\\n    function isCandidate(address _candidate) external view returns (bool);\\n    function totalSupplyOnCandidate(address _candidate) external view returns (uint256);\\n    function balanceOfOnCandidate(address _candidate, address _account) external view returns (uint256);\\n    function totalSupplyOnCandidateContract(address _candidateContract) external view returns (uint256);\\n    function balanceOfOnCandidateContract(address _candidateContract, address _account) external view returns (uint256);\\n    function candidatesLength() external view returns (uint256);\\n    function isExistCandidate(address _candidate) external view returns (bool);\\n    function getClaimableActivityReward(address _candidate) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0xc2f5d65030e0e4f6c0238fb7cbf538735d0dd5f42f1bb54a54194df9609edcb7\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IDAOVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDAOVault {\\n    function setTON(address _ton) external;\\n    function setWTON(address _wton) external;\\n    function approveTON(address _to, uint256 _amount) external;\\n    function approveWTON(address _to, uint256 _amount) external;\\n    function approveERC20(address _token, address _to, uint256 _amount) external;\\n    function claimTON(address _to, uint256 _amount) external;\\n    function claimWTON(address _to, uint256 _amount) external;\\n    function claimERC20(address _token, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x02100dbd2150bd601a97f543cc103afddf7ad9b047730bde0f62322ab1d6e838\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ILayer2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ILayer2 {\\n  function operator() external view returns (address);\\n  function isLayer2() external view returns (bool);\\n  function currentFork() external view returns (uint256);\\n  function lastEpoch(uint256 forkNumber) external view returns (uint256);\\n  function changeOperator(address _operator) external;\\n}\\n\",\"keccak256\":\"0x299fe726cc6eae9f3d62dab74e9b2ac6ba60e37e76ce96f2d4b13dffd38fcab8\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ILayer2Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ILayer2Registry {\\n    function layer2s(address layer2) external view returns (bool);\\n\\n    function register(address layer2) external returns (bool);\\n    function numLayer2s() external view returns (uint256);\\n    function layer2ByIndex(uint256 index) external view returns (address);\\n\\n    function deployCoinage(address layer2, address seigManager) external returns (bool);\\n    function registerAndDeployCoinage(address layer2, address seigManager) external returns (bool);\\n    function unregister(address layer2) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc88c88b356847a1bcf001ff4c2df02982af7c16e19f6edca7d7daf4060b52c17\",\"license\":\"MIT\"},\"contracts/dao/interfaces/ISeigManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISeigManager {\\n    function registry() external view returns (address);\\n    function depositManager() external view returns (address);\\n    function ton() external view returns (address);\\n    function wton() external view returns (address);\\n    function powerton() external view returns (address);\\n    function tot() external view returns (address);\\n    function coinages(address layer2) external view returns (address);\\n    function commissionRates(address layer2) external view returns (uint256);\\n\\n    function lastCommitBlock(address layer2) external view returns (uint256);\\n    function seigPerBlock() external view returns (uint256);\\n    function lastSeigBlock() external view returns (uint256);\\n    function pausedBlock() external view returns (uint256);\\n    function unpausedBlock() external view returns (uint256);\\n    function DEFAULT_FACTOR() external view returns (uint256);\\n\\n    function deployCoinage(address layer2) external returns (bool);\\n    function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n    function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\\n    function stakeOf(address layer2, address account) external view returns (uint256);\\n    function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n    function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n    function updateSeigniorage() external returns (bool);\\n    function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n    function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa2f4326afb1647bfb3ebd2db1cf0d2eb30f7c461f15e00a32ac3251f260d6383\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IStorageStateCommittee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ICandidateFactory } from \\\"../interfaces/ICandidateFactory.sol\\\";\\nimport { ILayer2Registry } from \\\"../interfaces/ILayer2Registry.sol\\\";\\nimport { ISeigManager } from \\\"../interfaces/ISeigManager.sol\\\";\\nimport { IDAOAgendaManager } from \\\"../interfaces/IDAOAgendaManager.sol\\\";\\nimport { IDAOVault } from \\\"../interfaces/IDAOVault.sol\\\";\\n\\ninterface IStorageStateCommittee {\\n    struct CandidateInfo {\\n        address candidateContract;\\n        uint256 indexMembers;\\n        uint128 memberJoinedTime;\\n        uint128 rewardPeriod;\\n        uint128 claimedTimestamp;\\n    }\\n\\n    function ton() external returns (address);\\n    function daoVault() external returns (IDAOVault);\\n    function agendaManager() external returns (IDAOAgendaManager);\\n    function candidateFactory() external returns (ICandidateFactory);\\n    function layer2Registry() external returns (ILayer2Registry);\\n    function seigManager() external returns (ISeigManager);\\n    function candidates(uint256 _index) external returns (address);\\n    function members(uint256 _index) external returns (address);\\n    function maxMember() external returns (uint256);\\n    function candidateInfos(address _candidate) external returns (CandidateInfo memory);\\n    function quorum() external returns (uint256);\\n    function activityRewardPerSecond() external returns (uint256);\\n\\n    function isMember(address _candidate) external returns (bool);\\n    function candidateContract(address _candidate) external returns (address);\\n}\\n\\n\\n\",\"keccak256\":\"0x9433acfc9e1376f0f659d0120d0050eda0ba7f6a8c56761d484f25ab0f310a1f\",\"license\":\"MIT\"},\"contracts/dao/lib/Agenda.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary LibAgenda {\\n    //using LibAgenda for Agenda;\\n\\n    enum AgendaStatus { NONE, NOTICE, VOTING, WAITING_EXEC, EXECUTED, ENDED }\\n    enum AgendaResult { PENDING, ACCEPT, REJECT, DISMISS }\\n\\n    //votor : based operator\\n    struct Voter {\\n        bool isVoter;\\n        bool hasVoted;\\n        uint256 vote;\\n    }\\n\\n    // counting abstainVotes yesVotes noVotes\\n    struct Agenda {\\n        uint256 createdTimestamp;\\n        uint256 noticeEndTimestamp;\\n        uint256 votingPeriodInSeconds;\\n        uint256 votingStartedTimestamp;\\n        uint256 votingEndTimestamp;\\n        uint256 executableLimitTimestamp;\\n        uint256 executedTimestamp;\\n        uint256 countingYes;\\n        uint256 countingNo;\\n        uint256 countingAbstain;\\n        AgendaStatus status;\\n        AgendaResult result;\\n        address[] voters;\\n        bool executed;\\n    }\\n\\n    struct AgendaExecutionInfo {\\n        address[] targets;\\n        bytes[] functionBytecodes;\\n        bool atomicExecute;\\n        uint256 executeStartFrom;\\n    }\\n\\n    /*function getAgenda(Agenda[] storage agendas, uint256 index) public view returns (Agenda storage agenda) {\\n        return agendas[index];\\n    }*/\\n}\\n\",\"keccak256\":\"0x3a3cd408202a0ace22d83bcfe72ae55d8b28cbceeab6a6e539eaf978c0ab6403\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061258d806100206000396000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c8063715018a6116101865780639b638268116100e3578063bddae40e11610097578063d547741f11610071578063d547741f1461062c578063d864e7401461063f578063f2fde38b1461065257600080fd5b8063bddae40e146105ea578063c4ef9c00146105fd578063d53913931461060557600080fd5b8063acb4c061116100c8578063acb4c06114610512578063af500ba3146105ae578063b911135f146105c157600080fd5b80639b63826814610599578063a217fddf146105a657600080fd5b8063817b1cd21161013a5780638bf7a3ab1161011f5780638bf7a3ab146105215780638f32d59b1461052957806391d148541461056057600080fd5b8063817b1cd214610519578063882eed2c1461051257600080fd5b8063764a78561161016b578063764a7856146104f75780637657f20a146104ff57806377ff21c41461051257600080fd5b8063715018a6146104dc57806375829def146104e457600080fd5b80632f2ff15d1161023f578063570ca735116101f35780636c8381f8116101cd5780636c8381f81461049e5780636fb7f558146104b657806370480275146104c957600080fd5b8063570ca7351461046657806358c3b8701461047c57806363a8fd891461049157600080fd5b806336568abe1161022457806336568abe146103ef57806350d2a27614610402578063550d01a31461044357600080fd5b80632f2ff15d146103c957806330070970146103dc57600080fd5b8063183d2d1c1161029657806324d7806c1161027b57806324d7806c1461039057806324f99b1e146103a357806325d60861146103b657600080fd5b8063183d2d1c14610366578063248a9ca31461036d57600080fd5b806311e4c914116102c757806311e4c9141461031e57806311f19e04146103405780631785f53c1461035357600080fd5b806301ffc9a7146102e357806306394c9b1461030b575b600080fd5b6102f66102f1366004611ed9565b610665565b60405190151581526020015b60405180910390f35b61031c610319366004611f23565b50565b005b61033261032c366004611f40565b50600190565b604051908152602001610302565b6102f661034e366004611f40565b610697565b61031c610361366004611f23565b61089e565b6001610332565b61033261037b366004611f40565b60009081526005602052604090206001015490565b6102f661039e366004611f23565b6108f7565b61031c6103b1366004611fa2565b610937565b61031c6103c4366004611ff5565b610b30565b61031c6103d7366004612037565b610b90565b61031c6103ea36600461208b565b610bb5565b61031c6103fd366004612037565b610d94565b61042b610410366004611ed9565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610302565b6102f6610451366004611f23565b60026020526000908152604090205460ff1681565b60075461010090046001600160a01b031661042b565b610484610e20565b60405161030291906121a7565b6000546102f69060ff1681565b60075461042b9061010090046001600160a01b031681565b600a5461042b906001600160a01b031681565b61031c6104d7366004611f23565b610eae565b61031c610f07565b61031c6104f2366004611f23565b610f62565b6102f6611074565b61031c61050d366004611f23565b61120d565b60016102f6565b6103326112d3565b61031c611348565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166102f6565b6102f661056e366004612037565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6007546102f69060ff1681565b610332600081565b6103326105bc366004611f23565b6115d8565b61042b6105cf366004611f40565b6001602052600090815260409020546001600160a01b031681565b61031c6105f8366004611f23565b611658565b6102f661171e565b6103327ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b61031c61063a366004612037565b611925565b60095461042b906001600160a01b031681565b61031c610660366004611f23565b61194a565b6001600160e01b0319811660009081526006602052604081205460ff16806106915750610691826119a1565b92915050565b60075460009060ff16156107ab576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b91906121da565b6001600160a01b0316146107a55760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b60648201526084015b60405180910390fd5b5061082a565b60075461010090046001600160a01b0316331461082a5760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b60095460405163047c678160e21b8152600481018490526001600160a01b03909116906311f19e04906024016020604051808303816000875af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906121f7565b919050565b6108a7336108f7565b6108ec5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b610319600082610d94565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610691565b60075460ff1615610a43576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906121da565b6001600160a01b031614610a3d5760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b606482015260840161079c565b50610ac2565b60075461010090046001600160a01b03163314610ac25760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b60095460405163127ccd8f60e11b81526001600160a01b03909116906324f99b1e90610af8908790879087908790600401612214565b600060405180830381600087803b158015610b1257600080fd5b505af1158015610b26573d6000803e3d6000fd5b5050505050505050565b610b39336108f7565b610b7e5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6008610b8b8284836122d9565b505050565b600082815260056020526040902060010154610bab816119ac565b610b8b83836119b6565b6001600160a01b038516151580610bd457506001600160a01b03821615155b80610be757506001600160a01b03811615155b610c335760405162461bcd60e51b815260206004820152601860248201527f43616e6469646174653a20696e707574206973207a65726f0000000000000000604482015260640161079c565b6007805474ffffffffffffffffffffffffffffffffffffffffff19166101006001600160a01b0388160260ff191617851515179081905560ff1615610d4057600760019054906101000a90046001600160a01b03166001600160a01b031663882eed2c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906121f7565b610d405760405162461bcd60e51b815260206004820152602260248201527f43616e6469646174653a20696e76616c6964206c617965723220636f6e74726160448201526118dd60f21b606482015260840161079c565b600980546001600160a01b038085166001600160a01b031992831617909255600a8054928416929091169190911790556008610d7c8482612399565b50610d8d631dffc87160e21b611a58565b5050505050565b6001600160a01b0381163314610e125760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161079c565b610e1c8282611ad7565b5050565b60088054610e2d90612251565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5990612251565b8015610ea65780601f10610e7b57610100808354040283529160200191610ea6565b820191906000526020600020905b815481529060010190602001808311610e8957829003601f168201915b505050505081565b610eb7336108f7565b610efc5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b610319600082610b90565b610f10336108f7565b610f555760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b610f60600033610d94565b565b610f6b336108f7565b610fb05760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6001600160a01b0381166110065760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f20616464726573730000000000000000604482015260640161079c565b6001600160a01b038116330361105e5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e00000000000000000000604482015260640161079c565b611069600082610b90565b610319600033610d94565b600a546000906001600160a01b03166110cf5760405162461bcd60e51b815260206004820152601e60248201527f43616e6469646174653a20536569674d616e61676572206973207a65726f0000604482015260640161079c565b60075460ff16156111485760405162461bcd60e51b815260206004820152603d60248201527f43616e6469646174653a20796f752073686f756c64207570646174652073656960448201527f676e696f726167652066726f6d206c617965723220636f6e7472616374000000606482015260840161079c565b600a60009054906101000a90046001600160a01b03166001600160a01b031663764a78566040518163ffffffff1660e01b81526004016020604051808303816000875af115801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c191906121f7565b61032c5760405162461bcd60e51b815260206004820152601660248201527f6661696c20757064617465536569676e696f7261676500000000000000000000604482015260640161079c565b611216336108f7565b61125b5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6001600160a01b0381166112b15760405162461bcd60e51b815260206004820152601860248201527f43616e6469646174653a20696e707574206973207a65726f0000000000000000604482015260640161079c565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000806112de611b5a565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190612459565b91505090565b60075460ff1615611454576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d991906121da565b6001600160a01b03161461144e5760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b606482015260840161079c565b506114d3565b60075461010090046001600160a01b031633146114d35760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b60075460009060ff1615611565576000600760019054906101000a90046001600160a01b03169050806001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155d91906121da565b915050611578565b5060075461010090046001600160a01b03165b600954604051636becff2760e01b81526001600160a01b03838116600483015290911690636becff2790602401600060405180830381600087803b1580156115bf57600080fd5b505af1158015610d8d573d6000803e3d6000fd5b905090565b6000806115e3611b5a565b6040516370a0823160e01b81526001600160a01b038581166004830152919250908216906370a0823190602401602060405180830381865afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612459565b9392505050565b611661336108f7565b6116a65760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6001600160a01b0381166116fc5760405162461bcd60e51b815260206004820152601860248201527f43616e6469646174653a20696e707574206973207a65726f0000000000000000604482015260640161079c565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60075460009060ff161561182d576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b291906121da565b6001600160a01b0316146118275760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b606482015260840161079c565b506118ac565b60075461010090046001600160a01b031633146118ac5760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b600960009054906101000a90046001600160a01b03166001600160a01b031663c4ef9c006040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d391906121f7565b600082815260056020526040902060010154611940816119ac565b610b8b8383611ad7565b611953336108f7565b6119985760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b61031981610f62565b600061069182611c48565b6103198133611c6d565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e1c5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611a143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160e01b03198082169003611ab25760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640161079c565b6001600160e01b0319166000908152600460205260409020805460ff19166001179055565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610e1c5760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600754600090819060ff1615611b81575060075461010090046001600160a01b0316611b84565b50305b6001600160a01b038116611bda5760405162461bcd60e51b815260206004820152601a60248201527f43616e6469646174653a20636f696e616765206973207a65726f000000000000604482015260640161079c565b600a54604051634c063c1960e01b81526001600160a01b03838116600483015290911690634c063c1990602401602060405180830381865afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134291906121da565b60006001600160e01b03198216637965db0b60e01b1480610691575061069182611ce2565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e1c57611ca081611d1e565b611cab836020611d30565b604051602001611cbc929190612472565b60408051601f198184030181529082905262461bcd60e51b825261079c916004016121a7565b60006301ffc9a760e01b6001600160e01b0319831614806106915750506001600160e01b03191660009081526004602052604090205460ff1690565b60606106916001600160a01b03831660145b60606000611d3f836002612509565b611d4a906002612520565b67ffffffffffffffff811115611d6257611d62612075565b6040519080825280601f01601f191660200182016040528015611d8c576020820181803683370190505b509050600360fc1b81600081518110611da757611da7612533565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611dd657611dd6612533565b60200101906001600160f81b031916908160001a9053506000611dfa846002612509565b611e05906001612520565b90505b6001811115611e8a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611e4657611e46612533565b1a60f81b828281518110611e5c57611e5c612533565b60200101906001600160f81b031916908160001a90535060049490941c93611e8381612549565b9050611e08565b5083156116515760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079c565b600060208284031215611eeb57600080fd5b81356001600160e01b03198116811461165157600080fd5b6001600160a01b038116811461031957600080fd5b803561089981611f03565b600060208284031215611f3557600080fd5b813561165181611f03565b600060208284031215611f5257600080fd5b5035919050565b60008083601f840112611f6b57600080fd5b50813567ffffffffffffffff811115611f8357600080fd5b602083019150836020828501011115611f9b57600080fd5b9250929050565b60008060008060608587031215611fb857600080fd5b8435935060208501359250604085013567ffffffffffffffff811115611fdd57600080fd5b611fe987828801611f59565b95989497509550505050565b6000806020838503121561200857600080fd5b823567ffffffffffffffff81111561201f57600080fd5b61202b85828601611f59565b90969095509350505050565b6000806040838503121561204a57600080fd5b82359150602083013561205c81611f03565b809150509250929050565b801515811461031957600080fd5b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156120a357600080fd5b85356120ae81611f03565b945060208601356120be81612067565b9350604086013567ffffffffffffffff808211156120db57600080fd5b818801915088601f8301126120ef57600080fd5b81358181111561210157612101612075565b604051601f8201601f19908116603f0116810190838211818310171561212957612129612075565b816040528281528b602084870101111561214257600080fd5b82602086016020830137600060208483010152809750505050505061216960608701611f18565b915061217760808701611f18565b90509295509295909350565b60005b8381101561219e578181015183820152602001612186565b50506000910152565b60208152600082518060208401526121c6816040850160208701612183565b601f01601f19169190910160400192915050565b6000602082840312156121ec57600080fd5b815161165181611f03565b60006020828403121561220957600080fd5b815161165181612067565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b600181811c9082168061226557607f821691505b60208210810361228557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b8b57600081815260208120601f850160051c810160208610156122b25750805b601f850160051c820191505b818110156122d1578281556001016122be565b505050505050565b67ffffffffffffffff8311156122f1576122f1612075565b612305836122ff8354612251565b8361228b565b6000601f84116001811461233957600085156123215750838201355b600019600387901b1c1916600186901b178355610d8d565b600083815260209020601f19861690835b8281101561236a578685013582556020948501946001909201910161234a565b50868210156123875760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b815167ffffffffffffffff8111156123b3576123b3612075565b6123c7816123c18454612251565b8461228b565b602080601f8311600181146123fc57600084156123e45750858301515b600019600386901b1c1916600185901b1785556122d1565b600085815260208120601f198616915b8281101561242b5788860151825594840194600190910190840161240c565b50858210156124495787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561246b57600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124aa816017850160208801612183565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516124e7816028840160208801612183565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610691576106916124f3565b80820180821115610691576106916124f3565b634e487b7160e01b600052603260045260246000fd5b600081612558576125586124f3565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c8063715018a6116101865780639b638268116100e3578063bddae40e11610097578063d547741f11610071578063d547741f1461062c578063d864e7401461063f578063f2fde38b1461065257600080fd5b8063bddae40e146105ea578063c4ef9c00146105fd578063d53913931461060557600080fd5b8063acb4c061116100c8578063acb4c06114610512578063af500ba3146105ae578063b911135f146105c157600080fd5b80639b63826814610599578063a217fddf146105a657600080fd5b8063817b1cd21161013a5780638bf7a3ab1161011f5780638bf7a3ab146105215780638f32d59b1461052957806391d148541461056057600080fd5b8063817b1cd214610519578063882eed2c1461051257600080fd5b8063764a78561161016b578063764a7856146104f75780637657f20a146104ff57806377ff21c41461051257600080fd5b8063715018a6146104dc57806375829def146104e457600080fd5b80632f2ff15d1161023f578063570ca735116101f35780636c8381f8116101cd5780636c8381f81461049e5780636fb7f558146104b657806370480275146104c957600080fd5b8063570ca7351461046657806358c3b8701461047c57806363a8fd891461049157600080fd5b806336568abe1161022457806336568abe146103ef57806350d2a27614610402578063550d01a31461044357600080fd5b80632f2ff15d146103c957806330070970146103dc57600080fd5b8063183d2d1c1161029657806324d7806c1161027b57806324d7806c1461039057806324f99b1e146103a357806325d60861146103b657600080fd5b8063183d2d1c14610366578063248a9ca31461036d57600080fd5b806311e4c914116102c757806311e4c9141461031e57806311f19e04146103405780631785f53c1461035357600080fd5b806301ffc9a7146102e357806306394c9b1461030b575b600080fd5b6102f66102f1366004611ed9565b610665565b60405190151581526020015b60405180910390f35b61031c610319366004611f23565b50565b005b61033261032c366004611f40565b50600190565b604051908152602001610302565b6102f661034e366004611f40565b610697565b61031c610361366004611f23565b61089e565b6001610332565b61033261037b366004611f40565b60009081526005602052604090206001015490565b6102f661039e366004611f23565b6108f7565b61031c6103b1366004611fa2565b610937565b61031c6103c4366004611ff5565b610b30565b61031c6103d7366004612037565b610b90565b61031c6103ea36600461208b565b610bb5565b61031c6103fd366004612037565b610d94565b61042b610410366004611ed9565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610302565b6102f6610451366004611f23565b60026020526000908152604090205460ff1681565b60075461010090046001600160a01b031661042b565b610484610e20565b60405161030291906121a7565b6000546102f69060ff1681565b60075461042b9061010090046001600160a01b031681565b600a5461042b906001600160a01b031681565b61031c6104d7366004611f23565b610eae565b61031c610f07565b61031c6104f2366004611f23565b610f62565b6102f6611074565b61031c61050d366004611f23565b61120d565b60016102f6565b6103326112d3565b61031c611348565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166102f6565b6102f661056e366004612037565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6007546102f69060ff1681565b610332600081565b6103326105bc366004611f23565b6115d8565b61042b6105cf366004611f40565b6001602052600090815260409020546001600160a01b031681565b61031c6105f8366004611f23565b611658565b6102f661171e565b6103327ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b61031c61063a366004612037565b611925565b60095461042b906001600160a01b031681565b61031c610660366004611f23565b61194a565b6001600160e01b0319811660009081526006602052604081205460ff16806106915750610691826119a1565b92915050565b60075460009060ff16156107ab576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b91906121da565b6001600160a01b0316146107a55760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b60648201526084015b60405180910390fd5b5061082a565b60075461010090046001600160a01b0316331461082a5760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b60095460405163047c678160e21b8152600481018490526001600160a01b03909116906311f19e04906024016020604051808303816000875af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906121f7565b919050565b6108a7336108f7565b6108ec5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b610319600082610d94565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610691565b60075460ff1615610a43576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906121da565b6001600160a01b031614610a3d5760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b606482015260840161079c565b50610ac2565b60075461010090046001600160a01b03163314610ac25760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b60095460405163127ccd8f60e11b81526001600160a01b03909116906324f99b1e90610af8908790879087908790600401612214565b600060405180830381600087803b158015610b1257600080fd5b505af1158015610b26573d6000803e3d6000fd5b5050505050505050565b610b39336108f7565b610b7e5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6008610b8b8284836122d9565b505050565b600082815260056020526040902060010154610bab816119ac565b610b8b83836119b6565b6001600160a01b038516151580610bd457506001600160a01b03821615155b80610be757506001600160a01b03811615155b610c335760405162461bcd60e51b815260206004820152601860248201527f43616e6469646174653a20696e707574206973207a65726f0000000000000000604482015260640161079c565b6007805474ffffffffffffffffffffffffffffffffffffffffff19166101006001600160a01b0388160260ff191617851515179081905560ff1615610d4057600760019054906101000a90046001600160a01b03166001600160a01b031663882eed2c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906121f7565b610d405760405162461bcd60e51b815260206004820152602260248201527f43616e6469646174653a20696e76616c6964206c617965723220636f6e74726160448201526118dd60f21b606482015260840161079c565b600980546001600160a01b038085166001600160a01b031992831617909255600a8054928416929091169190911790556008610d7c8482612399565b50610d8d631dffc87160e21b611a58565b5050505050565b6001600160a01b0381163314610e125760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161079c565b610e1c8282611ad7565b5050565b60088054610e2d90612251565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5990612251565b8015610ea65780601f10610e7b57610100808354040283529160200191610ea6565b820191906000526020600020905b815481529060010190602001808311610e8957829003601f168201915b505050505081565b610eb7336108f7565b610efc5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b610319600082610b90565b610f10336108f7565b610f555760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b610f60600033610d94565b565b610f6b336108f7565b610fb05760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6001600160a01b0381166110065760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f20616464726573730000000000000000604482015260640161079c565b6001600160a01b038116330361105e5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e00000000000000000000604482015260640161079c565b611069600082610b90565b610319600033610d94565b600a546000906001600160a01b03166110cf5760405162461bcd60e51b815260206004820152601e60248201527f43616e6469646174653a20536569674d616e61676572206973207a65726f0000604482015260640161079c565b60075460ff16156111485760405162461bcd60e51b815260206004820152603d60248201527f43616e6469646174653a20796f752073686f756c64207570646174652073656960448201527f676e696f726167652066726f6d206c617965723220636f6e7472616374000000606482015260840161079c565b600a60009054906101000a90046001600160a01b03166001600160a01b031663764a78566040518163ffffffff1660e01b81526004016020604051808303816000875af115801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c191906121f7565b61032c5760405162461bcd60e51b815260206004820152601660248201527f6661696c20757064617465536569676e696f7261676500000000000000000000604482015260640161079c565b611216336108f7565b61125b5760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6001600160a01b0381166112b15760405162461bcd60e51b815260206004820152601860248201527f43616e6469646174653a20696e707574206973207a65726f0000000000000000604482015260640161079c565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000806112de611b5a565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190612459565b91505090565b60075460ff1615611454576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d991906121da565b6001600160a01b03161461144e5760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b606482015260840161079c565b506114d3565b60075461010090046001600160a01b031633146114d35760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b60075460009060ff1615611565576000600760019054906101000a90046001600160a01b03169050806001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155d91906121da565b915050611578565b5060075461010090046001600160a01b03165b600954604051636becff2760e01b81526001600160a01b03838116600483015290911690636becff2790602401600060405180830381600087803b1580156115bf57600080fd5b505af1158015610d8d573d6000803e3d6000fd5b905090565b6000806115e3611b5a565b6040516370a0823160e01b81526001600160a01b038581166004830152919250908216906370a0823190602401602060405180830381865afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612459565b9392505050565b611661336108f7565b6116a65760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b6001600160a01b0381166116fc5760405162461bcd60e51b815260206004820152601860248201527f43616e6469646174653a20696e707574206973207a65726f0000000000000000604482015260640161079c565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60075460009060ff161561182d576000600760019054906101000a90046001600160a01b03169050336001600160a01b0316816001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b291906121da565b6001600160a01b0316146118275760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174653a2073656e646572206973206e6f7420746865206f70656044820152751c985d1bdc881bd9881d1a1a5cc818dbdb9d1c9858dd60521b606482015260840161079c565b506118ac565b60075461010090046001600160a01b031633146118ac5760405162461bcd60e51b815260206004820152603760248201527f43616e6469646174653a2073656e646572206973206e6f74207468652063616e604482015276191a59185d19481bd9881d1a1a5cc818dbdb9d1c9858dd604a1b606482015260840161079c565b600960009054906101000a90046001600160a01b03166001600160a01b031663c4ef9c006040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d391906121f7565b600082815260056020526040902060010154611940816119ac565b610b8b8383611ad7565b611953336108f7565b6119985760405162461bcd60e51b8152602060048201526022602482015260008051602061256183398151915260448201526134b760f11b606482015260840161079c565b61031981610f62565b600061069182611c48565b6103198133611c6d565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e1c5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611a143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160e01b03198082169003611ab25760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640161079c565b6001600160e01b0319166000908152600460205260409020805460ff19166001179055565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610e1c5760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600754600090819060ff1615611b81575060075461010090046001600160a01b0316611b84565b50305b6001600160a01b038116611bda5760405162461bcd60e51b815260206004820152601a60248201527f43616e6469646174653a20636f696e616765206973207a65726f000000000000604482015260640161079c565b600a54604051634c063c1960e01b81526001600160a01b03838116600483015290911690634c063c1990602401602060405180830381865afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134291906121da565b60006001600160e01b03198216637965db0b60e01b1480610691575061069182611ce2565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e1c57611ca081611d1e565b611cab836020611d30565b604051602001611cbc929190612472565b60408051601f198184030181529082905262461bcd60e51b825261079c916004016121a7565b60006301ffc9a760e01b6001600160e01b0319831614806106915750506001600160e01b03191660009081526004602052604090205460ff1690565b60606106916001600160a01b03831660145b60606000611d3f836002612509565b611d4a906002612520565b67ffffffffffffffff811115611d6257611d62612075565b6040519080825280601f01601f191660200182016040528015611d8c576020820181803683370190505b509050600360fc1b81600081518110611da757611da7612533565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611dd657611dd6612533565b60200101906001600160f81b031916908160001a9053506000611dfa846002612509565b611e05906001612520565b90505b6001811115611e8a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611e4657611e46612533565b1a60f81b828281518110611e5c57611e5c612533565b60200101906001600160f81b031916908160001a90535060049490941c93611e8381612549565b9050611e08565b5083156116515760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079c565b600060208284031215611eeb57600080fd5b81356001600160e01b03198116811461165157600080fd5b6001600160a01b038116811461031957600080fd5b803561089981611f03565b600060208284031215611f3557600080fd5b813561165181611f03565b600060208284031215611f5257600080fd5b5035919050565b60008083601f840112611f6b57600080fd5b50813567ffffffffffffffff811115611f8357600080fd5b602083019150836020828501011115611f9b57600080fd5b9250929050565b60008060008060608587031215611fb857600080fd5b8435935060208501359250604085013567ffffffffffffffff811115611fdd57600080fd5b611fe987828801611f59565b95989497509550505050565b6000806020838503121561200857600080fd5b823567ffffffffffffffff81111561201f57600080fd5b61202b85828601611f59565b90969095509350505050565b6000806040838503121561204a57600080fd5b82359150602083013561205c81611f03565b809150509250929050565b801515811461031957600080fd5b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156120a357600080fd5b85356120ae81611f03565b945060208601356120be81612067565b9350604086013567ffffffffffffffff808211156120db57600080fd5b818801915088601f8301126120ef57600080fd5b81358181111561210157612101612075565b604051601f8201601f19908116603f0116810190838211818310171561212957612129612075565b816040528281528b602084870101111561214257600080fd5b82602086016020830137600060208483010152809750505050505061216960608701611f18565b915061217760808701611f18565b90509295509295909350565b60005b8381101561219e578181015183820152602001612186565b50506000910152565b60208152600082518060208401526121c6816040850160208701612183565b601f01601f19169190910160400192915050565b6000602082840312156121ec57600080fd5b815161165181611f03565b60006020828403121561220957600080fd5b815161165181612067565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b600181811c9082168061226557607f821691505b60208210810361228557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b8b57600081815260208120601f850160051c810160208610156122b25750805b601f850160051c820191505b818110156122d1578281556001016122be565b505050505050565b67ffffffffffffffff8311156122f1576122f1612075565b612305836122ff8354612251565b8361228b565b6000601f84116001811461233957600085156123215750838201355b600019600387901b1c1916600186901b178355610d8d565b600083815260209020601f19861690835b8281101561236a578685013582556020948501946001909201910161234a565b50868210156123875760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b815167ffffffffffffffff8111156123b3576123b3612075565b6123c7816123c18454612251565b8461228b565b602080601f8311600181146123fc57600084156123e45750858301515b600019600386901b1c1916600185901b1785556122d1565b600085815260208120601f198616915b8281101561242b5788860151825594840194600190910190840161240c565b50858210156124495787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561246b57600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124aa816017850160208801612183565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516124e7816028840160208801612183565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610691576106916124f3565b80820180821115610691576106916124f3565b634e487b7160e01b600052603260045260246000fd5b600081612558576125586124f3565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "castVote(uint256,uint256,string)": {
        "params": {
          "_agendaID": "The agenda ID",
          "_comment": "voting comment",
          "_vote": "voting type"
        }
      },
      "changeMember(uint256)": {
        "params": {
          "_memberIndex": "The index of changing member slot"
        },
        "returns": {
          "_0": "Whether or not the execution succeeded"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "isCandidateContract()": {
        "returns": {
          "_0": "Whether or not this contract is a candidate contract"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "retireMember()": {
        "returns": {
          "_0": "Whether or not the execution succeeded"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setCommittee(address)": {
        "params": {
          "_committee": "New DAOCommitteeProxy contract address"
        }
      },
      "setMemo(string)": {
        "params": {
          "_memo": "New memo on this candidate"
        }
      },
      "stakedOf(address)": {
        "params": {
          "_account": "Address being retrieved"
        },
        "returns": {
          "amount": "The staked balance of the account on this candidate"
        }
      },
      "totalStaked()": {
        "returns": {
          "totalsupply": "Total staked amount on this candidate"
        }
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      },
      "updateSeigniorage()": {
        "returns": {
          "_0": "Whether or not the execution succeeded"
        }
      }
    },
    "title": "Managing a candidate",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "castVote(uint256,uint256,string)": {
        "notice": "Vote on an agenda"
      },
      "changeMember(uint256)": {
        "notice": "Try to be a member"
      },
      "isCandidateContract()": {
        "notice": "Checks whether this contract is a candidate contract"
      },
      "retireMember()": {
        "notice": "Retire a member"
      },
      "setCommittee(address)": {
        "notice": "Set DAOCommitteeProxy contract address"
      },
      "setMemo(string)": {
        "notice": "Set memo"
      },
      "stakedOf(address)": {
        "notice": "Retrieves the staked balance of the account on this candidate"
      },
      "totalStaked()": {
        "notice": "Retrieves the total staked balance on this candidate"
      },
      "updateSeigniorage()": {
        "notice": "Set DAOCommitteeProxy contract addressCall updateSeigniorage on SeigManager"
      }
    },
    "notice": "Either a user or layer2 contract can be a candidate",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11867,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11871,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11875,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11879,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 1801,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 24,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "_roles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5684,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 5686,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "isLayer2Candidate",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 5688,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "candidate",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5690,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "memo",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 5692,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "committee",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5694,
        "contract": "contracts/dao/Candidate.sol:Candidate",
        "label": "seigManager",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/dao/Candidate.sol:Candidate",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/dao/Candidate.sol:Candidate",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}