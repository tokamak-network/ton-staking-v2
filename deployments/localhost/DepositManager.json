{
  "address": "0x68d2Ecd85bDEbfFd075Fb6D87fFD829AD025DD5C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accStakedAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "accStakedLayer2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accUnstaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accUnstakedAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "accUnstakedLayer2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptDelayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumDelayBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "getDelayBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalWithdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wton_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seigManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "globalWithdrawalDelay_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numPendingRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "pendingUnstaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "pendingUnstakedAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "pendingUnstakedLayer2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wtonAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "receiveTON",
          "type": "bool"
        }
      ],
      "name": "processRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "receiveTON",
          "type": "bool"
        }
      ],
      "name": "processRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "redeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "redepositMulti",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "requestWithdrawalAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delayBlocks",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawalWithDeplay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDelay",
          "type": "uint256"
        }
      ],
      "name": "setAcceptDelayPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "globalWithdrawalDelay_",
          "type": "uint256"
        }
      ],
      "name": "setGlobalWithdrawalDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seigManager_",
          "type": "address"
        }
      ],
      "name": "setSeigManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2chain",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalDelay_",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "slash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "withdrawalRequest",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawableBlockNumber",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "processed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdrawalRequestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3fbe138d4661b2417f735e1fb05524606df87f049dd8ea5e67fde88faac2fbc3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x68d2Ecd85bDEbfFd075Fb6D87fFD829AD025DD5C",
    "transactionIndex": 0,
    "gasUsed": "2953697",
    "logsBloom": "0x
    "blockHash": "0x9b4c08eb6517637226f01d5e25b8025e5e3079f268f377e490f4dd87665088c6",
    "transactionHash": "0x3fbe138d4661b2417f735e1fb05524606df87f049dd8ea5e67fde88faac2fbc3",
    "logs": [],
    "blockNumber": 18231457,
    "cumulativeGasUsed": "2953697",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87712d450cfd6ca926c6544b6712808e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accStakedAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"accStakedLayer2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accUnstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accUnstakedAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"accUnstakedLayer2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptDelayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDelayBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"getDelayBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seigManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"globalWithdrawalDelay_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numPendingRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingUnstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingUnstakedAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"pendingUnstakedLayer2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveTON\",\"type\":\"bool\"}],\"name\":\"processRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveTON\",\"type\":\"bool\"}],\"name\":\"processRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"redeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"redepositMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"requestWithdrawalAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalWithDeplay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"}],\"name\":\"setAcceptDelayPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalWithdrawalDelay_\",\"type\":\"uint256\"}],\"name\":\"setGlobalWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seigManager_\",\"type\":\"address\"}],\"name\":\"setSeigManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2chain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalDelay_\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequest\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawableBlockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawalRequestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"DepositManager manages WTON deposit and withdrawal from operator and WTON holders.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"deposit(address,uint256)\":{\"details\":\"deposit `amount` WTON in RAY\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"redeposit(address)\":{\"details\":\"re-deposit pending requests in the pending queue\"},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stake/managers/DepositManager.sol\":\"DepositManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n}\\n\",\"keccak256\":\"0x0d32f9f26e844108502fd2204972019ee8f49b7642e7f657e1822c44f60e4460\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef35b3e8e188ae00ac341be828fadae45c2da6e510f93b8695a44dc25a241950\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IWTON.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWTON {\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount) external returns (bool);\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount) external returns (bool);\\n    function renounceTonMinter() external;\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function renounceMinter() external ;\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n}\",\"keccak256\":\"0x6ed6404309dad833fb32fb39445f08ca7fa321b5541a6279d1ce36392d1b122e\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"contracts/stake/managers/DepositManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IWTON } from \\\"../../dao/interfaces/IWTON.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../../common/AccessibleCommon.sol\\\";\\nimport { DepositManagerStorage } from \\\"./DepositManagerStorage.sol\\\";\\n\\ninterface IOnApprove {\\n  function onApprove(address owner, address spender, uint256 amount, bytes calldata data) external returns (bool);\\n}\\n\\ninterface ILayer2Registry {\\n  function layer2s(address layer2) external view returns (bool);\\n}\\n\\ninterface ILayer2 {\\n  function operator() external view returns (address);\\n}\\n\\ninterface ISeigManager {\\n  function stakeOf(address layer2, address account) external view returns (uint256);\\n  function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n  function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n}\\n\\n/**\\n * @dev DepositManager manages WTON deposit and withdrawal from operator and WTON holders.\\n */\\n//ERC165\\ncontract DepositManager is ProxyStorage, AccessibleCommon, DepositManagerStorage {\\n  using SafeERC20 for IERC20;\\n\\n  ////////////////////\\n  // Modifiers\\n  ////////////////////\\n\\n  modifier onlyLayer2(address layer2) {\\n    require(ILayer2Registry(_registry).layer2s(layer2));\\n    _;\\n  }\\n\\n  modifier onlySeigManager() {\\n    require(msg.sender == _seigManager);\\n    _;\\n  }\\n\\n  ////////////////////\\n  // Events\\n  ////////////////////\\n\\n  event Deposited(address indexed layer2, address depositor, uint256 amount);\\n  event WithdrawalRequested(address indexed layer2, address depositor, uint256 amount);\\n  event WithdrawalProcessed(address indexed layer2, address depositor, uint256 amount);\\n\\n  function initialize (\\n    address wton_,\\n    address registry_,\\n    address seigManager_,\\n    uint256 globalWithdrawalDelay_\\n  ) external {\\n    require(_wton == address(0), \\\"already initialized\\\");\\n\\n    _wton = wton_;\\n    _registry = registry_;\\n    _seigManager = seigManager_;\\n    globalWithdrawalDelay = globalWithdrawalDelay_;\\n    _registerInterface(IOnApprove.onApprove.selector);\\n  }\\n\\n  ////////////////////\\n  // SeiManager function\\n  ////////////////////\\n\\n  function setSeigManager(address seigManager_) external onlyOwner {\\n    _seigManager = seigManager_;\\n  }\\n\\n  ////////////////////\\n  // ERC20 Approve callback\\n  ////////////////////\\n\\n  function onApprove(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (bool) {\\n    require(msg.sender == _wton, \\\"DepositManager: only accept WTON approve callback\\\");\\n\\n    address layer2 = _decodeDepositManagerOnApproveData(data);\\n    require(_deposit(layer2, owner, amount, owner));\\n\\n    return true;\\n  }\\n\\n  function _decodeDepositManagerOnApproveData(\\n    bytes memory data\\n  ) internal pure returns (address layer2) {\\n    require(data.length == 0x20);\\n\\n    assembly {\\n      layer2 := mload(add(data, 0x20))\\n    }\\n  }\\n\\n  ////////////////////\\n  // Deposit function\\n  ////////////////////\\n\\n  /**\\n   * @dev deposit `amount` WTON in RAY\\n   */\\n\\n  function deposit(address layer2, uint256 amount) external returns (bool) {\\n    require(_deposit(layer2, msg.sender, amount));\\n    return true;\\n  }\\n\\n  function deposit(address layer2, address account, uint256 amount) external returns (bool) {\\n    require(_deposit(layer2, account, amount, msg.sender));\\n    return true;\\n  }\\n\\n  function deposit(address layer2, address[] memory accounts, uint256[] memory amounts) external returns (bool) {\\n    require(accounts.length != 0, 'no account');\\n    require(accounts.length == amounts.length, 'wrong lenth');\\n\\n    for (uint256 i = 0; i < accounts.length; i++){\\n      require(accounts[i] != address(0) && amounts[i] != 0, \\\"zero amount or zero address\\\");\\n      require(_deposit(layer2, accounts[i], amounts[i], msg.sender));\\n    }\\n\\n    return true;\\n  }\\n\\n  function _deposit(address layer2, address account, uint256 amount) internal onlyLayer2(layer2) returns (bool) {\\n     return _deposit(layer2, account, amount, account);\\n  }\\n\\n  function _deposit(address layer2, address account, uint256 amount, address payer) internal onlyLayer2(layer2) returns (bool) {\\n    _accStaked[layer2][account] = _accStaked[layer2][account] + amount;\\n    _accStakedLayer2[layer2] = _accStakedLayer2[layer2] + amount;\\n    _accStakedAccount[account] = _accStakedAccount[account] + amount;\\n\\n    IERC20(_wton).safeTransferFrom(payer, address(this), amount);\\n\\n    emit Deposited(layer2, account, amount);\\n\\n    require(ISeigManager(_seigManager).onDeposit(layer2, account, amount));\\n\\n    return true;\\n  }\\n\\n  ////////////////////\\n  // Re-deposit function\\n  ////////////////////\\n\\n  /**\\n   * @dev re-deposit pending requests in the pending queue\\n   */\\n\\n  function redeposit(address layer2) external returns (bool) {\\n    uint256 i = _withdrawalRequestIndex[layer2][msg.sender];\\n    require(_redeposit(layer2, i, 1));\\n    return true;\\n  }\\n\\n  function redepositMulti(address layer2, uint256 n) external returns (bool) {\\n    uint256 i = _withdrawalRequestIndex[layer2][msg.sender];\\n    require(_redeposit(layer2, i, n));\\n    return true;\\n  }\\n\\n  function _redeposit(address layer2, uint256 i, uint256 n) internal onlyLayer2(layer2) returns (bool) {\\n    uint256 accAmount;\\n\\n    require(_withdrawalRequests[layer2][msg.sender].length > 0, \\\"DepositManager: no request\\\");\\n    require(_withdrawalRequests[layer2][msg.sender].length - i >= n, \\\"DepositManager: n exceeds num of pending requests\\\");\\n\\n    uint256 e = i + n;\\n    for (; i < e; i++) {\\n      WithdrawalReqeust storage r = _withdrawalRequests[layer2][msg.sender][i];\\n      uint256 amount = r.amount;\\n\\n      require(!r.processed, \\\"DepositManager: pending request already processed\\\");\\n      require(amount > 0, \\\"DepositManager: no valid pending request\\\");\\n\\n      accAmount = accAmount + amount;\\n      r.processed = true;\\n    }\\n\\n\\n    // deposit-related storages\\n    _accStaked[layer2][msg.sender] = _accStaked[layer2][msg.sender] + accAmount;\\n    _accStakedLayer2[layer2] = _accStakedLayer2[layer2] + accAmount;\\n    _accStakedAccount[msg.sender] = _accStakedAccount[msg.sender] + accAmount;\\n\\n    // withdrawal-related storages\\n    _pendingUnstaked[layer2][msg.sender] = _pendingUnstaked[layer2][msg.sender] - accAmount;\\n    _pendingUnstakedLayer2[layer2] = _pendingUnstakedLayer2[layer2] - accAmount;\\n    _pendingUnstakedAccount[msg.sender] = _pendingUnstakedAccount[msg.sender] - accAmount;\\n\\n    _withdrawalRequestIndex[layer2][msg.sender] += n;\\n\\n    emit Deposited(layer2, msg.sender, accAmount);\\n\\n    require(ISeigManager(_seigManager).onDeposit(layer2, msg.sender, accAmount));\\n\\n    return true;\\n  }\\n\\n  ////////////////////\\n  // Slash functions\\n  ////////////////////\\n\\n  function slash(address layer2, address recipient, uint256 amount) external onlySeigManager returns (bool) {\\n    //return _wton.transferFrom(owner, recipient, amount);\\n  }\\n\\n  ////////////////////\\n  // Setter\\n  ////////////////////\\n\\n  function setGlobalWithdrawalDelay(uint256 globalWithdrawalDelay_) external onlyOwner {\\n    globalWithdrawalDelay = globalWithdrawalDelay_;\\n  }\\n\\n  function setWithdrawalDelay(address l2chain, uint256 withdrawalDelay_) external {\\n    require(_isOperator(l2chain, msg.sender));\\n    withdrawalDelay[l2chain] = withdrawalDelay_;\\n  }\\n\\n  function setAcceptDelayPeriod(uint256 start, uint256 end, uint256 minDelay) external onlyOwner {\\n    acceptDelayPeriod = AcceptDelayPeriod(start, end, minDelay);\\n  }\\n\\n  ////////////////////\\n  // Withdrawal functions\\n  ////////////////////\\n\\n  function requestWithdrawalWithDeplay(address layer2, uint256 amount, uint256 delayBlocks) external returns (bool) {\\n    AcceptDelayPeriod memory period = acceptDelayPeriod;\\n\\n    require(period.start != 0 && period.start < period.end &&\\n      block.number >= period.start && block.number < period.end, 'Now is not acceptable for setting delay.');\\n\\n    require(delayBlocks >= period.minimumDelayBlocks, 'delayBlocks is less than minimum');\\n\\n    return _requestWithdrawal(layer2, amount, delayBlocks);\\n  }\\n\\n\\n  function requestWithdrawal(address layer2, uint256 amount) external returns (bool) {\\n    return _requestWithdrawal(layer2, amount, getDelayBlocks(layer2));\\n\\n  }\\n\\n  function _requestWithdrawal(address layer2, uint256 amount, uint256 delay) internal onlyLayer2(layer2) returns (bool) {\\n    require(amount > 0, \\\"DepositManager: amount must not be zero\\\");\\n    // uint256 delay = globalWithdrawalDelay > withdrawalDelay[layer2] ? globalWithdrawalDelay : withdrawalDelay[layer2];\\n    _withdrawalRequests[layer2][msg.sender].push(WithdrawalReqeust({\\n      withdrawableBlockNumber: uint128(block.number + delay),\\n      amount: uint128(amount),\\n      processed: false\\n    }));\\n\\n    _pendingUnstaked[layer2][msg.sender] = _pendingUnstaked[layer2][msg.sender] + amount;\\n    _pendingUnstakedLayer2[layer2] = _pendingUnstakedLayer2[layer2] + amount;\\n    _pendingUnstakedAccount[msg.sender] = _pendingUnstakedAccount[msg.sender] + amount;\\n\\n    emit WithdrawalRequested(layer2, msg.sender, amount);\\n\\n    require(ISeigManager(_seigManager).onWithdraw(layer2, msg.sender, amount));\\n\\n    return true;\\n  }\\n\\n  function processRequest(address layer2, bool receiveTON) external returns (bool) {\\n    return _processRequest(layer2, receiveTON);\\n  }\\n\\n  function _processRequest(address layer2, bool receiveTON) internal returns (bool) {\\n    uint256 index = _withdrawalRequestIndex[layer2][msg.sender];\\n    require(_withdrawalRequests[layer2][msg.sender].length > index, \\\"DepositManager: no request to process\\\");\\n\\n    WithdrawalReqeust storage r = _withdrawalRequests[layer2][msg.sender][index];\\n\\n    require(r.withdrawableBlockNumber <= block.number, \\\"DepositManager: wait for withdrawal delay\\\");\\n    r.processed = true;\\n\\n    _withdrawalRequestIndex[layer2][msg.sender] += 1;\\n\\n    uint256 amount = r.amount;\\n\\n    _pendingUnstaked[layer2][msg.sender] = _pendingUnstaked[layer2][msg.sender] - amount;\\n    _pendingUnstakedLayer2[layer2] = _pendingUnstakedLayer2[layer2] - amount;\\n    _pendingUnstakedAccount[msg.sender] = _pendingUnstakedAccount[msg.sender] - amount;\\n\\n    _accUnstaked[layer2][msg.sender] = _accUnstaked[layer2][msg.sender] + amount;\\n    _accUnstakedLayer2[layer2] = _accUnstakedLayer2[layer2] + amount;\\n    _accUnstakedAccount[msg.sender] = _accUnstakedAccount[msg.sender] + amount;\\n\\n    if (receiveTON) {\\n      require(IWTON(_wton).swapToTONAndTransfer(msg.sender, amount));\\n    } else {\\n      IERC20(_wton).safeTransfer(msg.sender, amount);\\n    }\\n\\n    emit WithdrawalProcessed(layer2, msg.sender, amount);\\n    return true;\\n  }\\n\\n  function requestWithdrawalAll(address layer2) external onlyLayer2(layer2) returns (bool) {\\n    uint256 amount = ISeigManager(_seigManager).stakeOf(layer2, msg.sender);\\n\\n    return _requestWithdrawal(layer2, amount, getDelayBlocks(layer2));\\n  }\\n\\n  function processRequests(address layer2, uint256 n, bool receiveTON) external returns (bool) {\\n    for (uint256 i = 0; i < n; i++) {\\n      require(_processRequest(layer2, receiveTON));\\n    }\\n    return true;\\n  }\\n\\n  function numRequests(address layer2, address account) external view returns (uint256) {\\n    return _withdrawalRequests[layer2][account].length;\\n  }\\n\\n  function numPendingRequests(address layer2, address account) external view returns (uint256) {\\n    uint256 numRequests_ = _withdrawalRequests[layer2][account].length;\\n    uint256 index = _withdrawalRequestIndex[layer2][account];\\n\\n    if (numRequests_ == 0) return 0;\\n\\n    return numRequests_ - index;\\n  }\\n\\n  function _isOperator(address layer2, address operator) internal view returns (bool) {\\n    return operator == ILayer2(layer2).operator();\\n  }\\n\\n  function getDelayBlocks(address layer2) public view returns (uint256){\\n    return  globalWithdrawalDelay > withdrawalDelay[layer2] ? globalWithdrawalDelay : withdrawalDelay[layer2];\\n  }\\n\\n  ////////////////////\\n  // Storage getters\\n  ////////////////////\\n\\n  // solium-disable\\n  function wton() external view returns (address) { return _wton; }\\n  function registry() external view returns (address) { return _registry; }\\n  function seigManager() external view returns (address) { return _seigManager; }\\n\\n  function accStaked(address layer2, address account) external view returns (uint256 wtonAmount) { return _accStaked[layer2][account]; }\\n  function accStakedLayer2(address layer2) external view returns (uint256 wtonAmount) { return _accStakedLayer2[layer2]; }\\n  function accStakedAccount(address account) external view returns (uint256 wtonAmount) { return _accStakedAccount[account]; }\\n\\n  function pendingUnstaked(address layer2, address account) external view returns (uint256 wtonAmount) { return _pendingUnstaked[layer2][account]; }\\n  function pendingUnstakedLayer2(address layer2) external view returns (uint256 wtonAmount) { return _pendingUnstakedLayer2[layer2]; }\\n  function pendingUnstakedAccount(address account) external view returns (uint256 wtonAmount) { return _pendingUnstakedAccount[account]; }\\n\\n  function accUnstaked(address layer2, address account) external view returns (uint256 wtonAmount) { return _accUnstaked[layer2][account]; }\\n  function accUnstakedLayer2(address layer2) external view returns (uint256 wtonAmount) { return _accUnstakedLayer2[layer2]; }\\n  function accUnstakedAccount(address account) external view returns (uint256 wtonAmount) { return _accUnstakedAccount[account]; }\\n\\n  function withdrawalRequestIndex(address layer2, address account) external view returns (uint256 index) { return _withdrawalRequestIndex[layer2][account]; }\\n  function withdrawalRequest(address layer2, address account, uint256 index) external view returns (uint128 withdrawableBlockNumber, uint128 amount, bool processed ) {\\n    withdrawableBlockNumber = _withdrawalRequests[layer2][account][index].withdrawableBlockNumber;\\n    amount = _withdrawalRequests[layer2][account][index].amount;\\n    processed = _withdrawalRequests[layer2][account][index].processed;\\n  }\\n\\n  // solium-enable\\n}\\n\",\"keccak256\":\"0x871d0c6b6e242af2ad1d99813f2fba97e885ef02062dc8307242fdb394e52167\",\"license\":\"MIT\"},\"contracts/stake/managers/DepositManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title\\n/// @notice\\ncontract DepositManagerStorage   {\\n    ////////////////////\\n    // Storage - contracts\\n    ////////////////////\\n\\n    address internal _wton;\\n    address internal _registry;\\n    address internal _seigManager;\\n\\n    ////////////////////\\n    // Storage - token amount\\n    ////////////////////\\n\\n    // accumulated staked amount\\n    // layer2 => msg.sender => wton amount\\n    mapping (address => mapping (address => uint256)) internal _accStaked;\\n    // layer2 => wton amount\\n    mapping (address => uint256) internal _accStakedLayer2;\\n    // msg.sender => wton amount\\n    mapping (address => uint256) internal _accStakedAccount;\\n\\n    // pending unstaked amount\\n    // layer2 => msg.sender => wton amount\\n    mapping (address => mapping (address => uint256)) internal _pendingUnstaked;\\n    // layer2 => wton amount\\n    mapping (address => uint256) internal _pendingUnstakedLayer2;\\n    // msg.sender => wton amount\\n    mapping (address => uint256) internal _pendingUnstakedAccount;\\n\\n    // accumulated unstaked amount\\n    // layer2 => msg.sender => wton amount\\n    mapping (address => mapping (address => uint256)) internal _accUnstaked;\\n    // layer2 => wton amount\\n    mapping (address => uint256) internal _accUnstakedLayer2;\\n    // msg.sender => wton amount\\n    mapping (address => uint256) internal _accUnstakedAccount;\\n\\n    // layer2 => msg.sender => withdrawal requests\\n    mapping (address => mapping (address => WithdrawalReqeust[])) internal _withdrawalRequests;\\n\\n    // layer2 => msg.sender => index\\n    mapping (address => mapping (address => uint256)) internal _withdrawalRequestIndex;\\n\\n    ////////////////////\\n    // Storage - configuration / ERC165 interfaces\\n    ////////////////////\\n\\n    // withdrawal delay in block number\\n    // @TODO: change delay unit to CYCLE?\\n    uint256 public globalWithdrawalDelay;\\n    mapping (address => uint256) public withdrawalDelay;\\n\\n    AcceptDelayPeriod public acceptDelayPeriod;\\n\\n    struct WithdrawalReqeust {\\n        uint128 withdrawableBlockNumber;\\n        uint128 amount;\\n        bool processed;\\n    }\\n\\n    struct AcceptDelayPeriod {\\n        uint256 start;\\n        uint256 end;\\n        uint256 minimumDelayBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0xe321d90c2c5ca7419863bab20b7b4377b667d3502c84b8cc0451a7d163931071\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061347a806100206000396000f3fe608060405234801561001057600080fd5b50600436106103775760003560e01c80637b103999116101d3578063b911135f11610104578063d547741f116100a2578063e74f82391161007c578063e74f82391461097e578063f2fde38b14610991578063f762eb57146109a4578063fb0713b1146109dd57600080fd5b8063d547741f14610945578063da95ebf714610958578063dc5a709f1461096b57600080fd5b8063cf756fdf116100de578063cf756fdf146108cf578063d1107671146108e2578063d285f78c146108f5578063d53913931461091e57600080fd5b8063b911135f1461085a578063c20a44c614610883578063c647f26e1461089657600080fd5b80639d91b87b11610171578063a35439891161014b578063a3543989146107f8578063a79da34114610821578063b5f19db214610834578063b8bee6281461084757600080fd5b80639d91b87b1461078e578063a0b2a913146107c7578063a217fddf146107f057600080fd5b80638d62d949116101ad5780638d62d949146106d25780638f32d59b146106e35780638fbef2d01461071a57806391d148541461075557600080fd5b80637b103999146106855780638340f549146106965780638af4a948146106a957600080fd5b806347e7ef24116102ad5780636b2160b71161024b57806370480275116102255780637048027514610644578063715018a61461065757806375829def1461065f5780637657f20a1461067257600080fd5b80636b2160b7146106175780636ec3d5ae1461062a5780636fb7f5581461063357600080fd5b8063550d01a311610287578063550d01a3146105c1578063562fa0df146105e45780635c0df46b146105f757806363a8fd891461060a57600080fd5b806347e7ef241461054d5780634ce970361461056057806350d2a2761461058057600080fd5b80632638fdf51161031a57806336568abe116102f457806336568abe146104e75780634273ca16146104fa57806343c657661461050d578063445e83b91461053a57600080fd5b80632638fdf5146104625780632d2fab941461049b5780632f2ff15d146104d457600080fd5b80631785f53c116103565780631785f53c14610404578063239ecad614610419578063248a9ca31461042c57806324d7806c1461044f57600080fd5b806255f5c11461037c578063010ca390146103b857806301ffc9a7146103e1575b600080fd5b6103a561038a366004612dc7565b6001600160a01b03166000908152600b602052604090205490565b6040519081526020015b60405180910390f35b6103a56103c6366004612dc7565b6001600160a01b03166000908152600a602052604090205490565b6103f46103ef366004612de4565b6109f0565b60405190151581526020016103af565b610417610412366004612dc7565b610a01565b005b610417610427366004612e0e565b610a62565b6103a561043a366004612e3a565b60009081526005602052604090206001015490565b6103f461045d366004612dc7565b610ad6565b6103a5610470366004612e53565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205490565b6103a56104a9366004612e53565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b6104176104e2366004612e8c565b610b16565b6104176104f5366004612e8c565b610b40565b6103f4610508366004612eb1565b610bcc565b60165460175460185461051f92919083565b604080519384526020840192909252908201526060016103af565b6103f4610548366004612f50565b610cb4565b6103f461055b366004612f50565b610cf6565b6103a561056e366004612dc7565b60156020526000908152604090205481565b6105a961058e366004612de4565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103af565b6103f46105cf366004612dc7565b60026020526000908152604090205460ff1681565b6103f46105f2366004613052565b610d15565b6103a5610605366004612e53565b610eba565b6000546103f49060ff1681565b6103f4610625366004612dc7565b610f1c565b6103a560145481565b6008546001600160a01b03166105a9565b610417610652366004612dc7565b611029565b610417611082565b61041761066d366004612dc7565b6110dd565b610417610680366004612dc7565b6111ef565b6007546001600160a01b03166105a9565b6103f46106a4366004613128565b61126c565b6103a56106b7366004612dc7565b6001600160a01b031660009081526010602052604090205490565b6006546001600160a01b03166105a9565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166103f4565b61072d610728366004613128565b61127a565b604080516001600160801b0394851681529390921660208401521515908201526060016103af565b6103f4610763366004612e8c565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6103a561079c366004612e53565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6103a56107d5366004612dc7565b6001600160a01b03166000908152600e602052604090205490565b6103a5600081565b6103a5610806366004612dc7565b6001600160a01b031660009081526011602052604090205490565b61041761082f366004612e3a565b611387565b6103a5610842366004612dc7565b6113da565b6103f4610855366004612dc7565b611421565b6105a9610868366004612e3a565b6001602052600090815260409020546001600160a01b031681565b6103f4610891366004613177565b611451565b6103a56108a4366004612e53565b6001600160a01b03918216600090815260136020908152604080832093909416825291909152205490565b6104176108dd3660046131a5565b61145d565b6103f46108f03660046131f6565b61151b565b6103a5610903366004612dc7565b6001600160a01b03166000908152600d602052604090205490565b6103a57ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b610417610953366004612e8c565b61162a565b6103f4610966366004612f50565b61164f565b610417610979366004612f50565b61165f565b6103f461098c366004613128565b61168e565b61041761099f366004612dc7565b6116a8565b6103a56109b2366004612e53565b6001600160a01b03918216600090815260126020908152604080832093909416825291909152205490565b6103f46109eb36600461322b565b6116ff565b60006109fb82611730565b92915050565b610a0a33610ad6565b610a545760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b60648201526084015b60405180910390fd5b610a5f600082610b40565b50565b610a6b33610ad6565b610ab05760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b604080516060810182528481526020810184905201819052601692909255601755601855565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff166109fb565b600082815260056020526040902060010154610b3181611755565b610b3b838361175f565b505050565b6001600160a01b0381163314610bbe5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a4b565b610bc88282611801565b5050565b6006546000906001600160a01b03163314610c4f5760405162461bcd60e51b815260206004820152603160248201527f4465706f7369744d616e616765723a206f6e6c79206163636570742057544f4e60448201527f20617070726f76652063616c6c6261636b0000000000000000000000000000006064820152608401610a4b565b6000610c9084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188492505050565b9050610c9e8188878a61189c565b610ca757600080fd5b5060019695505050505050565b6001600160a01b0382166000908152601360209081526040808320338452909152812054610ce3848285611ac7565b610cec57600080fd5b5060019392505050565b6000610d03833384612028565b610d0c57600080fd5b50600192915050565b60008251600003610d555760405162461bcd60e51b815260206004820152600a6024820152691b9bc81858d8dbdd5b9d60b21b6044820152606401610a4b565b8151835114610da65760405162461bcd60e51b815260206004820152600b60248201527f77726f6e67206c656e74680000000000000000000000000000000000000000006044820152606401610a4b565b60005b8351811015610ead5760006001600160a01b0316848281518110610dcf57610dcf61326d565b60200260200101516001600160a01b031614158015610e085750828181518110610dfb57610dfb61326d565b6020026020010151600014155b610e545760405162461bcd60e51b815260206004820152601b60248201527f7a65726f20616d6f756e74206f72207a65726f206164647265737300000000006044820152606401610a4b565b610e9285858381518110610e6a57610e6a61326d565b6020026020010151858481518110610e8457610e8461326d565b60200260200101513361189c565b610e9b57600080fd5b80610ea581613299565b915050610da9565b50600190505b9392505050565b6001600160a01b038083166000818152601260209081526040808320948616808452948252808320549383526013825280832094835293905291822054818303610f09576000925050506109fb565b610f1381836132b2565b95945050505050565b600754604051630c39b8b760e31b81526001600160a01b03808416600483015260009284929116906361cdc5b890602401602060405180830381865afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e91906132c5565b610f9757600080fd5b6008546040516367265c3b60e11b81526001600160a01b038581166004830152336024830152600092169063ce4cb87690604401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c91906132e2565b9050611021848261101c876113da565b6120af565b949350505050565b61103233610ad6565b6110775760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b610a5f600082610b16565b61108b33610ad6565b6110d05760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b6110db600033610b40565b565b6110e633610ad6565b61112b5760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b6001600160a01b0381166111815760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610a4b565b6001600160a01b03811633036111d95760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610a4b565b6111e4600082610b16565b610a5f600033610b40565b6111f833610ad6565b61123d5760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610ce38484843361189c565b6001600160a01b0380841660009081526012602090815260408083209386168352929052908120805482918291859081106112b7576112b761326d565b600091825260208083206002909202909101546001600160a01b03808a168452601283526040808520918a1685529252912080546001600160801b03909216945090859081106113095761130961326d565b60009182526020808320600292909202909101546001600160a01b038981168452601283526040808520918a168552925291208054600160801b9092046001600160801b0316935090859081106113625761136261326d565b600091825260209091206001600290920201015492969195505060ff90911692509050565b61139033610ad6565b6113d55760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b601455565b6001600160a01b03811660009081526015602052604081205460145411611419576001600160a01b0382166000908152601560205260409020546109fb565b505060145490565b6001600160a01b0381166000908152601360209081526040808320338452909152812054610d0383826001611ac7565b6000610eb383836123ac565b6006546001600160a01b0316156114b65760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610a4b565b600680546001600160a01b0380871673ffffffffffffffffffffffffffffffffffffffff19928316179092556007805486841690831617905560088054928516929091169190911790556014819055611515632139e50b60e11b61279f565b50505050565b6040805160608101825260165480825260175460208301526018549282019290925260009115801590611552575060208101518151105b801561155f575080514310155b801561156e5750806020015143105b6115cb5760405162461bcd60e51b815260206004820152602860248201527f4e6f77206973206e6f742061636365707461626c6520666f722073657474696e60448201526733903232b630bc9760c11b6064820152608401610a4b565b806040015183101561161f5760405162461bcd60e51b815260206004820181905260248201527f64656c6179426c6f636b73206973206c657373207468616e206d696e696d756d6044820152606401610a4b565b610f138585856120af565b60008281526005602052604090206001015461164581611755565b610b3b8383611801565b6000610eb3838361101c866113da565b611669823361281e565b61167257600080fd5b6001600160a01b03909116600090815260156020526040902055565b6008546000906001600160a01b03163314610eb357600080fd5b6116b133610ad6565b6116f65760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b610a5f816110dd565b6000805b83811015610ead5761171585846123ac565b61171e57600080fd5b8061172881613299565b915050611703565b60006001600160e01b03198216637965db0b60e01b14806109fb57506109fb8261289e565b610a5f81336128da565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610bc85760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117bd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610bc85760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000815160201461189457600080fd5b506020015190565b600754604051630c39b8b760e31b81526001600160a01b03808716600483015260009287929116906361cdc5b890602401602060405180830381865afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e91906132c5565b61191757600080fd5b6001600160a01b038087166000908152600960209081526040808320938916835292905220546119489085906132fb565b6001600160a01b038088166000818152600960209081526040808320948b16835293815283822094909455908152600a9092529020546119899085906132fb565b6001600160a01b038088166000908152600a60209081526040808320949094559188168152600b90915220546119c09085906132fb565b6001600160a01b038087166000908152600b60205260409020919091556006546119ed911684308761294f565b604080516001600160a01b038781168252602082018790528816917f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7910160405180910390a2600854604051630412c6d560e41b81526001600160a01b0388811660048301528781166024830152604482018790529091169063412c6d50906064016020604051808303816000875af1158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab291906132c5565b611abb57600080fd5b50600195945050505050565b600754604051630c39b8b760e31b81526001600160a01b03808616600483015260009286929116906361cdc5b890602401602060405180830381865afa158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3991906132c5565b611b4257600080fd5b6001600160a01b0385166000908152601260209081526040808320338452909152812054611bb25760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369744d616e616765723a206e6f20726571756573740000000000006044820152606401610a4b565b6001600160a01b03861660009081526012602090815260408083203384529091529020548490611be39087906132b2565b1015611c575760405162461bcd60e51b815260206004820152603160248201527f4465706f7369744d616e616765723a206e2065786365656473206e756d206f6660448201527f2070656e64696e672072657175657374730000000000000000000000000000006064820152608401610a4b565b6000611c6385876132fb565b90505b80861015611dd5576001600160a01b03871660009081526012602090815260408083203384529091528120805488908110611ca357611ca361326d565b6000918252602090912060029091020180546001820154919250600160801b90046001600160801b03169060ff1615611d445760405162461bcd60e51b815260206004820152603160248201527f4465706f7369744d616e616765723a2070656e64696e6720726571756573742060448201527f616c72656164792070726f6365737365640000000000000000000000000000006064820152608401610a4b565b60008111611da55760405162461bcd60e51b815260206004820152602860248201527f4465706f7369744d616e616765723a206e6f2076616c69642070656e64696e67604482015267081c995c5d595cdd60c21b6064820152608401610a4b565b611daf81856132fb565b6001928301805460ff191690931790925550915085611dcd81613299565b965050611c66565b6001600160a01b0387166000908152600960209081526040808320338452909152902054611e049083906132fb565b6001600160a01b0388166000818152600960209081526040808320338452825280832094909455918152600a9091522054611e409083906132fb565b6001600160a01b0388166000908152600a6020908152604080832093909355338252600b90522054611e739083906132fb565b336000818152600b60209081526040808320949094556001600160a01b038b168252600c8152838220928252919091522054611eb09083906132b2565b6001600160a01b0388166000818152600c60209081526040808320338452825280832094909455918152600d9091522054611eec9083906132b2565b6001600160a01b0388166000908152600d6020908152604080832093909355338252600e90522054611f1f9083906132b2565b336000818152600e60209081526040808320949094556001600160a01b038b16825260138152838220928252919091529081208054879290611f629084906132fb565b909155505060408051338152602081018490526001600160a01b038916917f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7910160405180910390a2600854604051630412c6d560e41b81526001600160a01b038981166004830152336024830152604482018590529091169063412c6d50906064016020604051808303816000875af1158015612004573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e91906132c5565b600754604051630c39b8b760e31b81526001600160a01b03808616600483015260009286929116906361cdc5b890602401602060405180830381865afa158015612076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209a91906132c5565b6120a357600080fd5b610f138585858761189c565b600754604051630c39b8b760e31b81526001600160a01b03808616600483015260009286929116906361cdc5b890602401602060405180830381865afa1580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212191906132c5565b61212a57600080fd5b6000841161218a5760405162461bcd60e51b815260206004820152602760248201527f4465706f7369744d616e616765723a20616d6f756e74206d757374206e6f74206044820152666265207a65726f60c81b6064820152608401610a4b565b6001600160a01b03851660009081526012602090815260408083203384529091529081902081516060810190925290806121c486436132fb565b6001600160801b039081168252878116602080840191909152600060409384018190528554600181810188559682528282208651878501518616600160801b0295169490941760029091029093019283559383015191909401805491151560ff199092169190911790556001600160a01b0388168252600c835280822033835290925220546122549085906132fb565b6001600160a01b0386166000818152600c60209081526040808320338452825280832094909455918152600d90915220546122909085906132fb565b6001600160a01b0386166000908152600d6020908152604080832093909355338252600e905220546122c39085906132fb565b336000818152600e60209081526040918290209390935580519182529181018690526001600160a01b038716917f04c56a409d50971e45c5a2d96e5d557d2b0f1d66d40f14b141e4c958b0f39b32910160405180910390a2600854604051637c287fd560e11b81526001600160a01b038781166004830152336024830152604482018790529091169063f850ffaa906064016020604051808303816000875af1158015612374573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239891906132c5565b6123a157600080fd5b506001949350505050565b6001600160a01b038216600081815260136020908152604080832033808552908352818420549484526012835281842090845290915281205490919081106124445760405162461bcd60e51b815260206004820152602560248201527f4465706f7369744d616e616765723a206e6f207265717565737420746f2070726044820152646f6365737360d81b6064820152608401610a4b565b6001600160a01b038416600090815260126020908152604080832033845290915281208054839081106124795761247961326d565b600091825260209091206002909102018054909150436001600160801b0390911611156124fa5760405162461bcd60e51b815260206004820152602960248201527f4465706f7369744d616e616765723a207761697420666f72207769746864726160448201526877616c2064656c617960b81b6064820152608401610a4b565b6001818101805460ff1916821790556001600160a01b03861660009081526013602090815260408083203384529091528120805490919061253c9084906132fb565b909155505080546001600160a01b0386166000908152600c60209081526040808320338452909152902054600160801b9091046001600160801b0316906125849082906132b2565b6001600160a01b0387166000818152600c60209081526040808320338452825280832094909455918152600d90915220546125c09082906132b2565b6001600160a01b0387166000908152600d6020908152604080832093909355338252600e905220546125f39082906132b2565b336000818152600e60209081526040808320949094556001600160a01b038a168252600f81528382209282529190915220546126309082906132fb565b6001600160a01b0387166000818152600f602090815260408083203384528252808320949094559181526010909152205461266c9082906132fb565b6001600160a01b03871660009081526010602090815260408083209390935533825260119052205461269f9082906132fb565b3360009081526011602052604090205584156127385760065460405163e3b99e8560e01b8152336004820152602481018390526001600160a01b039091169063e3b99e85906044016020604051808303816000875af1158015612706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272a91906132c5565b61273357600080fd5b61274f565b60065461274f906001600160a01b031633836129cf565b60408051338152602081018390526001600160a01b038816917fcd1fce47d5ad89dd70b04c75bd6bdb8114d4d4ff7b4393f9fb5937e733ba9582910160405180910390a250600195945050505050565b6001600160e01b031980821690036127f95760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610a4b565b6001600160e01b0319166000908152600460205260409020805460ff19166001179055565b6000826001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa15801561285e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612882919061330e565b6001600160a01b0316826001600160a01b031614905092915050565b60006301ffc9a760e01b6001600160e01b0319831614806109fb5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610bc85761290d816129ff565b612918836020612a11565b60405160200161292992919061334f565b60408051601f198184030181529082905262461bcd60e51b8252610a4b916004016133d0565b6040516001600160a01b03808516602483015283166044820152606481018290526115159085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612bba565b6040516001600160a01b038316602482015260448101829052610b3b90849063a9059cbb60e01b90606401612983565b60606109fb6001600160a01b03831660145b60606000612a20836002613403565b612a2b9060026132fb565b67ffffffffffffffff811115612a4357612a43612f7c565b6040519080825280601f01601f191660200182016040528015612a6d576020820181803683370190505b509050600360fc1b81600081518110612a8857612a8861326d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ab757612ab761326d565b60200101906001600160f81b031916908160001a9053506000612adb846002613403565b612ae69060016132fb565b90505b6001811115612b6b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612b2757612b2761326d565b1a60f81b828281518110612b3d57612b3d61326d565b60200101906001600160f81b031916908160001a90535060049490941c93612b648161341a565b9050612ae9565b508315610eb35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a4b565b6000612c0f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c8f9092919063ffffffff16565b9050805160001480612c30575080806020019051810190612c3091906132c5565b610b3b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a4b565b6060611021848460008585600080866001600160a01b03168587604051612cb69190613431565b60006040518083038185875af1925050503d8060008114612cf3576040519150601f19603f3d011682016040523d82523d6000602084013e612cf8565b606091505b5091509150612d0987838387612d14565b979650505050505050565b60608315612d83578251600003612d7c576001600160a01b0385163b612d7c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a4b565b5081611021565b6110218383815115612d985781518083602001fd5b8060405162461bcd60e51b8152600401610a4b91906133d0565b6001600160a01b0381168114610a5f57600080fd5b600060208284031215612dd957600080fd5b8135610eb381612db2565b600060208284031215612df657600080fd5b81356001600160e01b031981168114610eb357600080fd5b600080600060608486031215612e2357600080fd5b505081359360208301359350604090920135919050565b600060208284031215612e4c57600080fd5b5035919050565b60008060408385031215612e6657600080fd5b8235612e7181612db2565b91506020830135612e8181612db2565b809150509250929050565b60008060408385031215612e9f57600080fd5b823591506020830135612e8181612db2565b600080600080600060808688031215612ec957600080fd5b8535612ed481612db2565b94506020860135612ee481612db2565b935060408601359250606086013567ffffffffffffffff80821115612f0857600080fd5b818801915088601f830112612f1c57600080fd5b813581811115612f2b57600080fd5b896020828501011115612f3d57600080fd5b9699959850939650602001949392505050565b60008060408385031215612f6357600080fd5b8235612f6e81612db2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612fbb57612fbb612f7c565b604052919050565b600067ffffffffffffffff821115612fdd57612fdd612f7c565b5060051b60200190565b600082601f830112612ff857600080fd5b8135602061300d61300883612fc3565b612f92565b82815260059290921b8401810191818101908684111561302c57600080fd5b8286015b848110156130475780358352918301918301613030565b509695505050505050565b60008060006060848603121561306757600080fd5b833561307281612db2565b925060208481013567ffffffffffffffff8082111561309057600080fd5b818701915087601f8301126130a457600080fd5b81356130b261300882612fc3565b81815260059190911b8301840190848101908a8311156130d157600080fd5b938501935b828510156130f85784356130e981612db2565b825293850193908501906130d6565b96505050604087013592508083111561311057600080fd5b505061311e86828701612fe7565b9150509250925092565b60008060006060848603121561313d57600080fd5b833561314881612db2565b9250602084013561315881612db2565b929592945050506040919091013590565b8015158114610a5f57600080fd5b6000806040838503121561318a57600080fd5b823561319581612db2565b91506020830135612e8181613169565b600080600080608085870312156131bb57600080fd5b84356131c681612db2565b935060208501356131d681612db2565b925060408501356131e681612db2565b9396929550929360600135925050565b60008060006060848603121561320b57600080fd5b833561321681612db2565b95602085013595506040909401359392505050565b60008060006060848603121561324057600080fd5b833561324b81612db2565b925060208401359150604084013561326281613169565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016132ab576132ab613283565b5060010190565b818103818111156109fb576109fb613283565b6000602082840312156132d757600080fd5b8151610eb381613169565b6000602082840312156132f457600080fd5b5051919050565b808201808211156109fb576109fb613283565b60006020828403121561332057600080fd5b8151610eb381612db2565b60005b8381101561334657818101518382015260200161332e565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161338781601785016020880161332b565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516133c481602884016020880161332b565b01602801949350505050565b60208152600082518060208401526133ef81604085016020870161332b565b601f01601f19169190910160400192915050565b80820281158282048414176109fb576109fb613283565b60008161342957613429613283565b506000190190565b6000825161344381846020870161332b565b919091019291505056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103775760003560e01c80637b103999116101d3578063b911135f11610104578063d547741f116100a2578063e74f82391161007c578063e74f82391461097e578063f2fde38b14610991578063f762eb57146109a4578063fb0713b1146109dd57600080fd5b8063d547741f14610945578063da95ebf714610958578063dc5a709f1461096b57600080fd5b8063cf756fdf116100de578063cf756fdf146108cf578063d1107671146108e2578063d285f78c146108f5578063d53913931461091e57600080fd5b8063b911135f1461085a578063c20a44c614610883578063c647f26e1461089657600080fd5b80639d91b87b11610171578063a35439891161014b578063a3543989146107f8578063a79da34114610821578063b5f19db214610834578063b8bee6281461084757600080fd5b80639d91b87b1461078e578063a0b2a913146107c7578063a217fddf146107f057600080fd5b80638d62d949116101ad5780638d62d949146106d25780638f32d59b146106e35780638fbef2d01461071a57806391d148541461075557600080fd5b80637b103999146106855780638340f549146106965780638af4a948146106a957600080fd5b806347e7ef24116102ad5780636b2160b71161024b57806370480275116102255780637048027514610644578063715018a61461065757806375829def1461065f5780637657f20a1461067257600080fd5b80636b2160b7146106175780636ec3d5ae1461062a5780636fb7f5581461063357600080fd5b8063550d01a311610287578063550d01a3146105c1578063562fa0df146105e45780635c0df46b146105f757806363a8fd891461060a57600080fd5b806347e7ef241461054d5780634ce970361461056057806350d2a2761461058057600080fd5b80632638fdf51161031a57806336568abe116102f457806336568abe146104e75780634273ca16146104fa57806343c657661461050d578063445e83b91461053a57600080fd5b80632638fdf5146104625780632d2fab941461049b5780632f2ff15d146104d457600080fd5b80631785f53c116103565780631785f53c14610404578063239ecad614610419578063248a9ca31461042c57806324d7806c1461044f57600080fd5b806255f5c11461037c578063010ca390146103b857806301ffc9a7146103e1575b600080fd5b6103a561038a366004612dc7565b6001600160a01b03166000908152600b602052604090205490565b6040519081526020015b60405180910390f35b6103a56103c6366004612dc7565b6001600160a01b03166000908152600a602052604090205490565b6103f46103ef366004612de4565b6109f0565b60405190151581526020016103af565b610417610412366004612dc7565b610a01565b005b610417610427366004612e0e565b610a62565b6103a561043a366004612e3a565b60009081526005602052604090206001015490565b6103f461045d366004612dc7565b610ad6565b6103a5610470366004612e53565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205490565b6103a56104a9366004612e53565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b6104176104e2366004612e8c565b610b16565b6104176104f5366004612e8c565b610b40565b6103f4610508366004612eb1565b610bcc565b60165460175460185461051f92919083565b604080519384526020840192909252908201526060016103af565b6103f4610548366004612f50565b610cb4565b6103f461055b366004612f50565b610cf6565b6103a561056e366004612dc7565b60156020526000908152604090205481565b6105a961058e366004612de4565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103af565b6103f46105cf366004612dc7565b60026020526000908152604090205460ff1681565b6103f46105f2366004613052565b610d15565b6103a5610605366004612e53565b610eba565b6000546103f49060ff1681565b6103f4610625366004612dc7565b610f1c565b6103a560145481565b6008546001600160a01b03166105a9565b610417610652366004612dc7565b611029565b610417611082565b61041761066d366004612dc7565b6110dd565b610417610680366004612dc7565b6111ef565b6007546001600160a01b03166105a9565b6103f46106a4366004613128565b61126c565b6103a56106b7366004612dc7565b6001600160a01b031660009081526010602052604090205490565b6006546001600160a01b03166105a9565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166103f4565b61072d610728366004613128565b61127a565b604080516001600160801b0394851681529390921660208401521515908201526060016103af565b6103f4610763366004612e8c565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6103a561079c366004612e53565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6103a56107d5366004612dc7565b6001600160a01b03166000908152600e602052604090205490565b6103a5600081565b6103a5610806366004612dc7565b6001600160a01b031660009081526011602052604090205490565b61041761082f366004612e3a565b611387565b6103a5610842366004612dc7565b6113da565b6103f4610855366004612dc7565b611421565b6105a9610868366004612e3a565b6001602052600090815260409020546001600160a01b031681565b6103f4610891366004613177565b611451565b6103a56108a4366004612e53565b6001600160a01b03918216600090815260136020908152604080832093909416825291909152205490565b6104176108dd3660046131a5565b61145d565b6103f46108f03660046131f6565b61151b565b6103a5610903366004612dc7565b6001600160a01b03166000908152600d602052604090205490565b6103a57ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b610417610953366004612e8c565b61162a565b6103f4610966366004612f50565b61164f565b610417610979366004612f50565b61165f565b6103f461098c366004613128565b61168e565b61041761099f366004612dc7565b6116a8565b6103a56109b2366004612e53565b6001600160a01b03918216600090815260126020908152604080832093909416825291909152205490565b6103f46109eb36600461322b565b6116ff565b60006109fb82611730565b92915050565b610a0a33610ad6565b610a545760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b60648201526084015b60405180910390fd5b610a5f600082610b40565b50565b610a6b33610ad6565b610ab05760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b604080516060810182528481526020810184905201819052601692909255601755601855565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff166109fb565b600082815260056020526040902060010154610b3181611755565b610b3b838361175f565b505050565b6001600160a01b0381163314610bbe5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a4b565b610bc88282611801565b5050565b6006546000906001600160a01b03163314610c4f5760405162461bcd60e51b815260206004820152603160248201527f4465706f7369744d616e616765723a206f6e6c79206163636570742057544f4e60448201527f20617070726f76652063616c6c6261636b0000000000000000000000000000006064820152608401610a4b565b6000610c9084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188492505050565b9050610c9e8188878a61189c565b610ca757600080fd5b5060019695505050505050565b6001600160a01b0382166000908152601360209081526040808320338452909152812054610ce3848285611ac7565b610cec57600080fd5b5060019392505050565b6000610d03833384612028565b610d0c57600080fd5b50600192915050565b60008251600003610d555760405162461bcd60e51b815260206004820152600a6024820152691b9bc81858d8dbdd5b9d60b21b6044820152606401610a4b565b8151835114610da65760405162461bcd60e51b815260206004820152600b60248201527f77726f6e67206c656e74680000000000000000000000000000000000000000006044820152606401610a4b565b60005b8351811015610ead5760006001600160a01b0316848281518110610dcf57610dcf61326d565b60200260200101516001600160a01b031614158015610e085750828181518110610dfb57610dfb61326d565b6020026020010151600014155b610e545760405162461bcd60e51b815260206004820152601b60248201527f7a65726f20616d6f756e74206f72207a65726f206164647265737300000000006044820152606401610a4b565b610e9285858381518110610e6a57610e6a61326d565b6020026020010151858481518110610e8457610e8461326d565b60200260200101513361189c565b610e9b57600080fd5b80610ea581613299565b915050610da9565b50600190505b9392505050565b6001600160a01b038083166000818152601260209081526040808320948616808452948252808320549383526013825280832094835293905291822054818303610f09576000925050506109fb565b610f1381836132b2565b95945050505050565b600754604051630c39b8b760e31b81526001600160a01b03808416600483015260009284929116906361cdc5b890602401602060405180830381865afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e91906132c5565b610f9757600080fd5b6008546040516367265c3b60e11b81526001600160a01b038581166004830152336024830152600092169063ce4cb87690604401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c91906132e2565b9050611021848261101c876113da565b6120af565b949350505050565b61103233610ad6565b6110775760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b610a5f600082610b16565b61108b33610ad6565b6110d05760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b6110db600033610b40565b565b6110e633610ad6565b61112b5760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b6001600160a01b0381166111815760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610a4b565b6001600160a01b03811633036111d95760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610a4b565b6111e4600082610b16565b610a5f600033610b40565b6111f833610ad6565b61123d5760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610ce38484843361189c565b6001600160a01b0380841660009081526012602090815260408083209386168352929052908120805482918291859081106112b7576112b761326d565b600091825260208083206002909202909101546001600160a01b03808a168452601283526040808520918a1685529252912080546001600160801b03909216945090859081106113095761130961326d565b60009182526020808320600292909202909101546001600160a01b038981168452601283526040808520918a168552925291208054600160801b9092046001600160801b0316935090859081106113625761136261326d565b600091825260209091206001600290920201015492969195505060ff90911692509050565b61139033610ad6565b6113d55760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b601455565b6001600160a01b03811660009081526015602052604081205460145411611419576001600160a01b0382166000908152601560205260409020546109fb565b505060145490565b6001600160a01b0381166000908152601360209081526040808320338452909152812054610d0383826001611ac7565b6000610eb383836123ac565b6006546001600160a01b0316156114b65760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610a4b565b600680546001600160a01b0380871673ffffffffffffffffffffffffffffffffffffffff19928316179092556007805486841690831617905560088054928516929091169190911790556014819055611515632139e50b60e11b61279f565b50505050565b6040805160608101825260165480825260175460208301526018549282019290925260009115801590611552575060208101518151105b801561155f575080514310155b801561156e5750806020015143105b6115cb5760405162461bcd60e51b815260206004820152602860248201527f4e6f77206973206e6f742061636365707461626c6520666f722073657474696e60448201526733903232b630bc9760c11b6064820152608401610a4b565b806040015183101561161f5760405162461bcd60e51b815260206004820181905260248201527f64656c6179426c6f636b73206973206c657373207468616e206d696e696d756d6044820152606401610a4b565b610f138585856120af565b60008281526005602052604090206001015461164581611755565b610b3b8383611801565b6000610eb3838361101c866113da565b611669823361281e565b61167257600080fd5b6001600160a01b03909116600090815260156020526040902055565b6008546000906001600160a01b03163314610eb357600080fd5b6116b133610ad6565b6116f65760405162461bcd60e51b8152602060048201526022602482015260008051602061344e83398151915260448201526134b760f11b6064820152608401610a4b565b610a5f816110dd565b6000805b83811015610ead5761171585846123ac565b61171e57600080fd5b8061172881613299565b915050611703565b60006001600160e01b03198216637965db0b60e01b14806109fb57506109fb8261289e565b610a5f81336128da565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610bc85760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117bd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610bc85760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000815160201461189457600080fd5b506020015190565b600754604051630c39b8b760e31b81526001600160a01b03808716600483015260009287929116906361cdc5b890602401602060405180830381865afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e91906132c5565b61191757600080fd5b6001600160a01b038087166000908152600960209081526040808320938916835292905220546119489085906132fb565b6001600160a01b038088166000818152600960209081526040808320948b16835293815283822094909455908152600a9092529020546119899085906132fb565b6001600160a01b038088166000908152600a60209081526040808320949094559188168152600b90915220546119c09085906132fb565b6001600160a01b038087166000908152600b60205260409020919091556006546119ed911684308761294f565b604080516001600160a01b038781168252602082018790528816917f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7910160405180910390a2600854604051630412c6d560e41b81526001600160a01b0388811660048301528781166024830152604482018790529091169063412c6d50906064016020604051808303816000875af1158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab291906132c5565b611abb57600080fd5b50600195945050505050565b600754604051630c39b8b760e31b81526001600160a01b03808616600483015260009286929116906361cdc5b890602401602060405180830381865afa158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3991906132c5565b611b4257600080fd5b6001600160a01b0385166000908152601260209081526040808320338452909152812054611bb25760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369744d616e616765723a206e6f20726571756573740000000000006044820152606401610a4b565b6001600160a01b03861660009081526012602090815260408083203384529091529020548490611be39087906132b2565b1015611c575760405162461bcd60e51b815260206004820152603160248201527f4465706f7369744d616e616765723a206e2065786365656473206e756d206f6660448201527f2070656e64696e672072657175657374730000000000000000000000000000006064820152608401610a4b565b6000611c6385876132fb565b90505b80861015611dd5576001600160a01b03871660009081526012602090815260408083203384529091528120805488908110611ca357611ca361326d565b6000918252602090912060029091020180546001820154919250600160801b90046001600160801b03169060ff1615611d445760405162461bcd60e51b815260206004820152603160248201527f4465706f7369744d616e616765723a2070656e64696e6720726571756573742060448201527f616c72656164792070726f6365737365640000000000000000000000000000006064820152608401610a4b565b60008111611da55760405162461bcd60e51b815260206004820152602860248201527f4465706f7369744d616e616765723a206e6f2076616c69642070656e64696e67604482015267081c995c5d595cdd60c21b6064820152608401610a4b565b611daf81856132fb565b6001928301805460ff191690931790925550915085611dcd81613299565b965050611c66565b6001600160a01b0387166000908152600960209081526040808320338452909152902054611e049083906132fb565b6001600160a01b0388166000818152600960209081526040808320338452825280832094909455918152600a9091522054611e409083906132fb565b6001600160a01b0388166000908152600a6020908152604080832093909355338252600b90522054611e739083906132fb565b336000818152600b60209081526040808320949094556001600160a01b038b168252600c8152838220928252919091522054611eb09083906132b2565b6001600160a01b0388166000818152600c60209081526040808320338452825280832094909455918152600d9091522054611eec9083906132b2565b6001600160a01b0388166000908152600d6020908152604080832093909355338252600e90522054611f1f9083906132b2565b336000818152600e60209081526040808320949094556001600160a01b038b16825260138152838220928252919091529081208054879290611f629084906132fb565b909155505060408051338152602081018490526001600160a01b038916917f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7910160405180910390a2600854604051630412c6d560e41b81526001600160a01b038981166004830152336024830152604482018590529091169063412c6d50906064016020604051808303816000875af1158015612004573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e91906132c5565b600754604051630c39b8b760e31b81526001600160a01b03808616600483015260009286929116906361cdc5b890602401602060405180830381865afa158015612076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209a91906132c5565b6120a357600080fd5b610f138585858761189c565b600754604051630c39b8b760e31b81526001600160a01b03808616600483015260009286929116906361cdc5b890602401602060405180830381865afa1580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212191906132c5565b61212a57600080fd5b6000841161218a5760405162461bcd60e51b815260206004820152602760248201527f4465706f7369744d616e616765723a20616d6f756e74206d757374206e6f74206044820152666265207a65726f60c81b6064820152608401610a4b565b6001600160a01b03851660009081526012602090815260408083203384529091529081902081516060810190925290806121c486436132fb565b6001600160801b039081168252878116602080840191909152600060409384018190528554600181810188559682528282208651878501518616600160801b0295169490941760029091029093019283559383015191909401805491151560ff199092169190911790556001600160a01b0388168252600c835280822033835290925220546122549085906132fb565b6001600160a01b0386166000818152600c60209081526040808320338452825280832094909455918152600d90915220546122909085906132fb565b6001600160a01b0386166000908152600d6020908152604080832093909355338252600e905220546122c39085906132fb565b336000818152600e60209081526040918290209390935580519182529181018690526001600160a01b038716917f04c56a409d50971e45c5a2d96e5d557d2b0f1d66d40f14b141e4c958b0f39b32910160405180910390a2600854604051637c287fd560e11b81526001600160a01b038781166004830152336024830152604482018790529091169063f850ffaa906064016020604051808303816000875af1158015612374573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239891906132c5565b6123a157600080fd5b506001949350505050565b6001600160a01b038216600081815260136020908152604080832033808552908352818420549484526012835281842090845290915281205490919081106124445760405162461bcd60e51b815260206004820152602560248201527f4465706f7369744d616e616765723a206e6f207265717565737420746f2070726044820152646f6365737360d81b6064820152608401610a4b565b6001600160a01b038416600090815260126020908152604080832033845290915281208054839081106124795761247961326d565b600091825260209091206002909102018054909150436001600160801b0390911611156124fa5760405162461bcd60e51b815260206004820152602960248201527f4465706f7369744d616e616765723a207761697420666f72207769746864726160448201526877616c2064656c617960b81b6064820152608401610a4b565b6001818101805460ff1916821790556001600160a01b03861660009081526013602090815260408083203384529091528120805490919061253c9084906132fb565b909155505080546001600160a01b0386166000908152600c60209081526040808320338452909152902054600160801b9091046001600160801b0316906125849082906132b2565b6001600160a01b0387166000818152600c60209081526040808320338452825280832094909455918152600d90915220546125c09082906132b2565b6001600160a01b0387166000908152600d6020908152604080832093909355338252600e905220546125f39082906132b2565b336000818152600e60209081526040808320949094556001600160a01b038a168252600f81528382209282529190915220546126309082906132fb565b6001600160a01b0387166000818152600f602090815260408083203384528252808320949094559181526010909152205461266c9082906132fb565b6001600160a01b03871660009081526010602090815260408083209390935533825260119052205461269f9082906132fb565b3360009081526011602052604090205584156127385760065460405163e3b99e8560e01b8152336004820152602481018390526001600160a01b039091169063e3b99e85906044016020604051808303816000875af1158015612706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272a91906132c5565b61273357600080fd5b61274f565b60065461274f906001600160a01b031633836129cf565b60408051338152602081018390526001600160a01b038816917fcd1fce47d5ad89dd70b04c75bd6bdb8114d4d4ff7b4393f9fb5937e733ba9582910160405180910390a250600195945050505050565b6001600160e01b031980821690036127f95760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610a4b565b6001600160e01b0319166000908152600460205260409020805460ff19166001179055565b6000826001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa15801561285e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612882919061330e565b6001600160a01b0316826001600160a01b031614905092915050565b60006301ffc9a760e01b6001600160e01b0319831614806109fb5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610bc85761290d816129ff565b612918836020612a11565b60405160200161292992919061334f565b60408051601f198184030181529082905262461bcd60e51b8252610a4b916004016133d0565b6040516001600160a01b03808516602483015283166044820152606481018290526115159085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612bba565b6040516001600160a01b038316602482015260448101829052610b3b90849063a9059cbb60e01b90606401612983565b60606109fb6001600160a01b03831660145b60606000612a20836002613403565b612a2b9060026132fb565b67ffffffffffffffff811115612a4357612a43612f7c565b6040519080825280601f01601f191660200182016040528015612a6d576020820181803683370190505b509050600360fc1b81600081518110612a8857612a8861326d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ab757612ab761326d565b60200101906001600160f81b031916908160001a9053506000612adb846002613403565b612ae69060016132fb565b90505b6001811115612b6b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612b2757612b2761326d565b1a60f81b828281518110612b3d57612b3d61326d565b60200101906001600160f81b031916908160001a90535060049490941c93612b648161341a565b9050612ae9565b508315610eb35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a4b565b6000612c0f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c8f9092919063ffffffff16565b9050805160001480612c30575080806020019051810190612c3091906132c5565b610b3b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a4b565b6060611021848460008585600080866001600160a01b03168587604051612cb69190613431565b60006040518083038185875af1925050503d8060008114612cf3576040519150601f19603f3d011682016040523d82523d6000602084013e612cf8565b606091505b5091509150612d0987838387612d14565b979650505050505050565b60608315612d83578251600003612d7c576001600160a01b0385163b612d7c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a4b565b5081611021565b6110218383815115612d985781518083602001fd5b8060405162461bcd60e51b8152600401610a4b91906133d0565b6001600160a01b0381168114610a5f57600080fd5b600060208284031215612dd957600080fd5b8135610eb381612db2565b600060208284031215612df657600080fd5b81356001600160e01b031981168114610eb357600080fd5b600080600060608486031215612e2357600080fd5b505081359360208301359350604090920135919050565b600060208284031215612e4c57600080fd5b5035919050565b60008060408385031215612e6657600080fd5b8235612e7181612db2565b91506020830135612e8181612db2565b809150509250929050565b60008060408385031215612e9f57600080fd5b823591506020830135612e8181612db2565b600080600080600060808688031215612ec957600080fd5b8535612ed481612db2565b94506020860135612ee481612db2565b935060408601359250606086013567ffffffffffffffff80821115612f0857600080fd5b818801915088601f830112612f1c57600080fd5b813581811115612f2b57600080fd5b896020828501011115612f3d57600080fd5b9699959850939650602001949392505050565b60008060408385031215612f6357600080fd5b8235612f6e81612db2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612fbb57612fbb612f7c565b604052919050565b600067ffffffffffffffff821115612fdd57612fdd612f7c565b5060051b60200190565b600082601f830112612ff857600080fd5b8135602061300d61300883612fc3565b612f92565b82815260059290921b8401810191818101908684111561302c57600080fd5b8286015b848110156130475780358352918301918301613030565b509695505050505050565b60008060006060848603121561306757600080fd5b833561307281612db2565b925060208481013567ffffffffffffffff8082111561309057600080fd5b818701915087601f8301126130a457600080fd5b81356130b261300882612fc3565b81815260059190911b8301840190848101908a8311156130d157600080fd5b938501935b828510156130f85784356130e981612db2565b825293850193908501906130d6565b96505050604087013592508083111561311057600080fd5b505061311e86828701612fe7565b9150509250925092565b60008060006060848603121561313d57600080fd5b833561314881612db2565b9250602084013561315881612db2565b929592945050506040919091013590565b8015158114610a5f57600080fd5b6000806040838503121561318a57600080fd5b823561319581612db2565b91506020830135612e8181613169565b600080600080608085870312156131bb57600080fd5b84356131c681612db2565b935060208501356131d681612db2565b925060408501356131e681612db2565b9396929550929360600135925050565b60008060006060848603121561320b57600080fd5b833561321681612db2565b95602085013595506040909401359392505050565b60008060006060848603121561324057600080fd5b833561324b81612db2565b925060208401359150604084013561326281613169565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016132ab576132ab613283565b5060010190565b818103818111156109fb576109fb613283565b6000602082840312156132d757600080fd5b8151610eb381613169565b6000602082840312156132f457600080fd5b5051919050565b808201808211156109fb576109fb613283565b60006020828403121561332057600080fd5b8151610eb381612db2565b60005b8381101561334657818101518382015260200161332e565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161338781601785016020880161332b565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516133c481602884016020880161332b565b01602801949350505050565b60208152600082518060208401526133ef81604085016020870161332b565b601f01601f19169190910160400192915050565b80820281158282048414176109fb576109fb613283565b60008161342957613429613283565b506000190190565b6000825161344381846020870161332b565b919091019291505056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000813000a",
  "devdoc": {
    "details": "DepositManager manages WTON deposit and withdrawal from operator and WTON holders.",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "deposit(address,uint256)": {
        "details": "deposit `amount` WTON in RAY"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "redeposit(address)": {
        "details": "re-deposit pending requests in the pending queue"
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11867,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11871,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11875,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11879,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 1801,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 24,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_roles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 16191,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_wton",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16193,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_registry",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 16195,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_seigManager",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 16201,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_accStaked",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16205,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_accStakedLayer2",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16209,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_accStakedAccount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16215,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_pendingUnstaked",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16219,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_pendingUnstakedLayer2",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16223,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_pendingUnstakedAccount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16229,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_accUnstaked",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16233,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_accUnstakedLayer2",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16237,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_accUnstakedAccount",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16245,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_withdrawalRequests",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage))"
      },
      {
        "astId": 16251,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "_withdrawalRequestIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16253,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "globalWithdrawalDelay",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 16257,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "withdrawalDelay",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16260,
        "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
        "label": "acceptDelayPeriod",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(AcceptDelayPeriod)16274_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage": {
        "base": "t_struct(WithdrawalReqeust)16267_storage",
        "encoding": "dynamic_array",
        "label": "struct DepositManagerStorage.WithdrawalReqeust[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DepositManagerStorage.WithdrawalReqeust[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct DepositManagerStorage.WithdrawalReqeust[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AcceptDelayPeriod)16274_storage": {
        "encoding": "inplace",
        "label": "struct DepositManagerStorage.AcceptDelayPeriod",
        "members": [
          {
            "astId": 16269,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16271,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16273,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "minimumDelayBlocks",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WithdrawalReqeust)16267_storage": {
        "encoding": "inplace",
        "label": "struct DepositManagerStorage.WithdrawalReqeust",
        "members": [
          {
            "astId": 16262,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "withdrawableBlockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 16264,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "amount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 16266,
            "contract": "contracts/stake/managers/DepositManager.sol:DepositManager",
            "label": "processed",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}