{
  "address": "0x8731d45ff9684d380302573cCFafd994Dfa7f7d3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "alive",
          "type": "bool"
        }
      ],
      "name": "SetAliveImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "SetSelectorImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptDelayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumDelayBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        }
      ],
      "name": "getSelectorImplementation2",
      "outputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalWithdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "implementation2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_alive",
          "type": "bool"
        }
      ],
      "name": "setAliveImplementation2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_alive",
          "type": "bool"
        }
      ],
      "name": "setImplementation2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "setProxyPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "_selectors",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "_imp",
          "type": "address"
        }
      ],
      "name": "setSelectorImplementations2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb2c9b55102dacb7ddcf5f3f2c321c81d6bfa3a1e2091fa8a2af69585f298a40",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8731d45ff9684d380302573cCFafd994Dfa7f7d3",
    "transactionIndex": 0,
    "gasUsed": "1489300",
    "logsBloom": "0x
    "blockHash": "0xfd2709bcff9ccc68f43f2671b6f7a182952608a77453d39163013033fb572927",
    "transactionHash": "0xeb2c9b55102dacb7ddcf5f3f2c321c81d6bfa3a1e2091fa8a2af69585f298a40",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18231460,
        "transactionHash": "0xeb2c9b55102dacb7ddcf5f3f2c321c81d6bfa3a1e2091fa8a2af69585f298a40",
        "address": "0x8731d45ff9684d380302573cCFafd994Dfa7f7d3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfd2709bcff9ccc68f43f2671b6f7a182952608a77453d39163013033fb572927"
      }
    ],
    "blockNumber": 18231460,
    "cumulativeGasUsed": "1489300",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87712d450cfd6ca926c6544b6712808e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"alive\",\"type\":\"bool\"}],\"name\":\"SetAliveImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"SetSelectorImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptDelayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDelayBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"getSelectorImplementation2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"implementation2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_alive\",\"type\":\"bool\"}],\"name\":\"setAliveImplementation2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_alive\",\"type\":\"bool\"}],\"name\":\"setImplementation2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setProxyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"_imp\",\"type\":\"address\"}],\"name\":\"setSelectorImplementations2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSelectorImplementation2(bytes4)\":{\"details\":\"view implementation address of selector of function\",\"params\":{\"_selector\":\"selector of function\"},\"returns\":{\"impl\":\"address of the implementation\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"implementation()\":{\"details\":\"returns the implementation\"},\"implementation2(uint256)\":{\"details\":\"view implementation address of the proxy[index]\",\"params\":{\"_index\":\"index of proxy\"},\"returns\":{\"_0\":\"address of the implementation\"}},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAliveImplementation2(address,bool)\":{\"details\":\"set alive status of implementation\",\"params\":{\"_alive\":\"alive status\",\"newImplementation\":\"Address of the new implementation.\"}},\"setImplementation2(address,uint256,bool)\":{\"details\":\"set the implementation address and status of the proxy[index]\",\"params\":{\"_alive\":\"_alive\",\"_index\":\"index\",\"newImplementation\":\"Address of the new implementation.\"}},\"setProxyPause(bool)\":{\"params\":{\"_pause\":\"true:pause or false:resume\"}},\"setSelectorImplementations2(bytes4[],address)\":{\"details\":\"set selectors of Implementation\",\"params\":{\"_imp\":\"implementation address\",\"_selectors\":\"being added selectors\"}},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}},\"upgradeTo(address)\":{\"params\":{\"impl\":\"New implementation contract address\"}}},\"title\":\"@dev\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setProxyPause(bool)\":{\"notice\":\"Set pause state\"},\"upgradeTo(address)\":{\"notice\":\"Set implementation contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stake/managers/DepositManagerProxy.sol\":\"DepositManagerProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n}\\n\",\"keccak256\":\"0x0d32f9f26e844108502fd2204972019ee8f49b7642e7f657e1822c44f60e4460\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef35b3e8e188ae00ac341be828fadae45c2da6e510f93b8695a44dc25a241950\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyAction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/// @title IProxyAction\\ninterface IProxyAction {\\n\\n    /// @dev set the implementation address and status of the proxy[index]\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _index index\\n    /// @param _alive _alive\\n    function setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) external;\\n\\n\\n    /// @dev set alive status of implementation\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _alive alive status\\n    function setAliveImplementation2(address newImplementation, bool _alive)\\n        external;\\n\\n\\n    /// @dev set selectors of Implementation\\n    /// @param _selectors being added selectors\\n    /// @param _imp implementation address\\n    function setSelectorImplementations2(\\n        bytes4[] calldata _selectors,\\n        address _imp\\n    ) external  ;\\n\\n\\n\\n    /// onlyOwner\\n\\n    /// @notice Set pause state\\n    /// @param _pause true:pause or false:resume\\n    function setProxyPause(bool _pause) external ;\\n\\n\\n    /// anybody\\n\\n    /// @dev view implementation address of selector of function\\n    /// @param _selector selector of function\\n    /// @return impl address of the implementation\\n    function getSelectorImplementation2(bytes4 _selector)\\n        external\\n        view\\n        returns (address impl);\\n\\n\\n    /// @dev view implementation address of the proxy[index]\\n    /// @param _index index of proxy\\n    /// @return address of the implementation\\n    function implementation2(uint256 _index) external view returns (address) ;\\n}\\n\\n\",\"keccak256\":\"0xe38287fd24503eb3b9de4a0b856cf270465d68c21677f6cacfccdb045b5c32b6\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyEvent.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/// @title IProxyEvent\\ninterface IProxyEvent {\\n\\n    event Upgraded(address indexed implementation);\\n\\n    event SetAliveImplementation(address indexed impl, bool alive);\\n    event SetSelectorImplementation(bytes4 indexed selector, address indexed impl);\\n\\n\\n}\\n\",\"keccak256\":\"0x742ba2dfeec4b3b3e49911108f50faebd48b345b4cc5ff25264b6d28586d34a0\",\"license\":\"MIT\"},\"contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../common/AccessibleCommon.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IProxyEvent.sol\\\";\\nimport \\\"../interfaces/IProxyAction.sol\\\";\\n\\ncontract Proxy is ProxyStorage, AccessibleCommon, IProxyEvent, IProxyAction\\n{\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor () {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n\\n    /* ========== onlyOwner ========== */\\n\\n    /// @inheritdoc IProxyAction\\n    function setProxyPause(bool _pause) external override onlyOwner {\\n        pauseProxy = _pause;\\n    }\\n\\n    /// @notice Set implementation contract\\n    /// @param impl New implementation contract address\\n    function upgradeTo(address impl) external onlyOwner {\\n        require(impl != address(0), \\\"input is zero\\\");\\n        require(\\n            _implementation2(0) != impl,\\n            \\\"same addr\\\"\\n        );\\n        _setImplementation2(impl, 0, true);\\n        emit Upgraded(impl);\\n    }\\n\\n\\n    /// @inheritdoc IProxyAction\\n    function setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) external override onlyOwner {\\n        _setImplementation2(newImplementation, _index, _alive);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function setAliveImplementation2(address newImplementation, bool _alive)\\n        public override onlyOwner\\n    {\\n        _setAliveImplementation2(newImplementation, _alive);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function setSelectorImplementations2(\\n        bytes4[] calldata _selectors,\\n        address _imp\\n    ) public override onlyOwner {\\n        require(\\n            _selectors.length > 0,\\n            \\\"Proxy: _selectors's size is zero\\\"\\n        );\\n        require(aliveImplementation[_imp], \\\"Proxy: _imp is not alive\\\");\\n\\n        for (uint256 i = 0; i < _selectors.length; i++) {\\n            require(\\n                selectorImplementation[_selectors[i]] != _imp,\\n                \\\"LiquidityVaultProxy: same imp\\\"\\n            );\\n            selectorImplementation[_selectors[i]] = _imp;\\n            emit SetSelectorImplementation(_selectors[i], _imp);\\n        }\\n    }\\n\\n    /* ========== Anyone can   ========== */\\n\\n\\n\\n    /* ========== VIEW ========== */\\n\\n    /// @dev returns the implementation\\n    function implementation() external view returns (address) {\\n        return _implementation2(0);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function implementation2(uint256 _index) external override view returns (address) {\\n        return _implementation2(_index);\\n    }\\n\\n\\n    /// @inheritdoc IProxyAction\\n    function getSelectorImplementation2(bytes4 _selector)\\n        public override\\n        view\\n        returns (address impl)\\n    {\\n        if (selectorImplementation[_selector] == address(0))\\n            return proxyImplementation[0];\\n        else if (aliveImplementation[selectorImplementation[_selector]]){\\n            return selectorImplementation[_selector];\\n        }\\n        else return proxyImplementation[0];\\n    }\\n\\n\\n    /// @dev receive ether\\n    receive() external payable {\\n        revert(\\\"cannot receive Ether\\\");\\n    }\\n\\n    /// @dev fallback function , execute on undefined function call\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n    /// @dev view implementation address of the proxy[index]\\n    /// @param _index index of proxy\\n    /// @return impl address of the implementation\\n    function _implementation2(uint256 _index)\\n        internal\\n        view\\n        returns (address impl)\\n    {\\n        return proxyImplementation[_index];\\n    }\\n\\n    /// @dev fallback function , execute on undefined function call\\n    function _fallback() internal {\\n        address _impl = getSelectorImplementation2(msg.sig);\\n\\n        require(\\n            _impl != address(0) && !pauseProxy,\\n            \\\"Proxy: impl OR proxy is false\\\"\\n        );\\n\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n                // delegatecall returns 0 on error.\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    /// @dev set the implementation address and status of the proxy[index]\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _index index of proxy\\n    /// @param _alive alive status\\n    function _setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) internal {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"Proxy: not contract address\\\"\\n        );\\n        if (_alive) proxyImplementation[_index] = newImplementation;\\n        _setAliveImplementation2(newImplementation, _alive);\\n    }\\n\\n    /// @dev set alive status of implementation\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _alive alive status\\n    function _setAliveImplementation2(address newImplementation, bool _alive)\\n        internal\\n    {\\n        aliveImplementation[newImplementation] = _alive;\\n        emit SetAliveImplementation(newImplementation, _alive);\\n    }\\n\\n}\",\"keccak256\":\"0xaa569b9328f30bc5acbc7742ba1f64ac90b930dd952ad19b851fb561e78b48c3\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"contracts/stake/managers/DepositManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../proxy/Proxy.sol\\\";\\nimport \\\"./DepositManagerStorage.sol\\\";\\n\\n/**\\n * @title\\n * @dev\\n */\\ncontract DepositManagerProxy is Proxy, DepositManagerStorage {\\n\\n}\\n\",\"keccak256\":\"0xcbcee79667887d1d9053e8bf86b9f5fbfaaf74d6557cf529d04420d2fd408bcd\",\"license\":\"MIT\"},\"contracts/stake/managers/DepositManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title\\n/// @notice\\ncontract DepositManagerStorage   {\\n    ////////////////////\\n    // Storage - contracts\\n    ////////////////////\\n\\n    address internal _wton;\\n    address internal _registry;\\n    address internal _seigManager;\\n\\n    ////////////////////\\n    // Storage - token amount\\n    ////////////////////\\n\\n    // accumulated staked amount\\n    // layer2 => msg.sender => wton amount\\n    mapping (address => mapping (address => uint256)) internal _accStaked;\\n    // layer2 => wton amount\\n    mapping (address => uint256) internal _accStakedLayer2;\\n    // msg.sender => wton amount\\n    mapping (address => uint256) internal _accStakedAccount;\\n\\n    // pending unstaked amount\\n    // layer2 => msg.sender => wton amount\\n    mapping (address => mapping (address => uint256)) internal _pendingUnstaked;\\n    // layer2 => wton amount\\n    mapping (address => uint256) internal _pendingUnstakedLayer2;\\n    // msg.sender => wton amount\\n    mapping (address => uint256) internal _pendingUnstakedAccount;\\n\\n    // accumulated unstaked amount\\n    // layer2 => msg.sender => wton amount\\n    mapping (address => mapping (address => uint256)) internal _accUnstaked;\\n    // layer2 => wton amount\\n    mapping (address => uint256) internal _accUnstakedLayer2;\\n    // msg.sender => wton amount\\n    mapping (address => uint256) internal _accUnstakedAccount;\\n\\n    // layer2 => msg.sender => withdrawal requests\\n    mapping (address => mapping (address => WithdrawalReqeust[])) internal _withdrawalRequests;\\n\\n    // layer2 => msg.sender => index\\n    mapping (address => mapping (address => uint256)) internal _withdrawalRequestIndex;\\n\\n    ////////////////////\\n    // Storage - configuration / ERC165 interfaces\\n    ////////////////////\\n\\n    // withdrawal delay in block number\\n    // @TODO: change delay unit to CYCLE?\\n    uint256 public globalWithdrawalDelay;\\n    mapping (address => uint256) public withdrawalDelay;\\n\\n    AcceptDelayPeriod public acceptDelayPeriod;\\n\\n    struct WithdrawalReqeust {\\n        uint128 withdrawableBlockNumber;\\n        uint128 amount;\\n        bool processed;\\n    }\\n\\n    struct AcceptDelayPeriod {\\n        uint256 start;\\n        uint256 end;\\n        uint256 minimumDelayBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0xe321d90c2c5ca7419863bab20b7b4377b667d3502c84b8cc0451a7d163931071\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001c600033610021565b6100d1565b61002b828261002f565b5050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1661002b5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561008d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61197f806100e06000396000f3fe6080604052600436106101d15760003560e01c80636ec3d5ae116100f75780638d4fdb4011610095578063b911135f11610064578063b911135f1461064f578063d539139314610685578063d547741f146106b9578063f2fde38b146106d957610223565b80638d4fdb40146105905780638f32d59b146105b057806391d14854146105f4578063a217fddf1461063a57610223565b806375829def116100d157806375829def146105105780637cb00d25146105305780637cd5f663146105505780638b8f4a651461057057610223565b80636ec3d5ae146104c557806370480275146104db578063715018a6146104fb57610223565b806343c657661161016f578063550d01a31161013e578063550d01a3146104155780635c60da1b146104455780635cc797d81461048b57806363a8fd89146104ab57610223565b806343c65766146103405780634a5df50f1461037a5780634ce970361461039a57806350d2a276146103c757610223565b806324d7806c116101ab57806324d7806c146102c05780632f2ff15d146102e057806336568abe146103005780633659cfe61461032057610223565b806301ffc9a71461022d5780631785f53c14610262578063248a9ca31461028257610223565b366102235760405162461bcd60e51b815260206004820152601460248201527f63616e6e6f74207265636569766520457468657200000000000000000000000060448201526064015b60405180910390fd5b61022b6106f9565b005b34801561023957600080fd5b5061024d610248366004611631565b6107a2565b60405190151581526020015b60405180910390f35b34801561026e57600080fd5b5061022b61027d366004611672565b6107b3565b34801561028e57600080fd5b506102b261029d36600461168d565b60009081526005602052604090206001015490565b604051908152602001610259565b3480156102cc57600080fd5b5061024d6102db366004611672565b61080f565b3480156102ec57600080fd5b5061022b6102fb3660046116a6565b61084f565b34801561030c57600080fd5b5061022b61031b3660046116a6565b610874565b34801561032c57600080fd5b5061022b61033b366004611672565b610900565b34801561034c57600080fd5b5060165460175460185461035f92919083565b60408051938452602084019290925290820152606001610259565b34801561038657600080fd5b5061022b6103953660046116d2565b610a59565b3480156103a657600080fd5b506102b26103b5366004611672565b60156020526000908152604090205481565b3480156103d357600080fd5b506103fd6103e2366004611631565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610259565b34801561042157600080fd5b5061024d610430366004611672565b60026020526000908152604090205460ff1681565b34801561045157600080fd5b506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03166103fd565b34801561049757600080fd5b5061022b6104a6366004611766565b610d06565b3480156104b757600080fd5b5060005461024d9060ff1681565b3480156104d157600080fd5b506102b260145481565b3480156104e757600080fd5b5061022b6104f6366004611672565b610d5e565b34801561050757600080fd5b5061022b610db7565b34801561051c57600080fd5b5061022b61052b366004611672565b610e12565b34801561053c57600080fd5b5061022b61054b366004611790565b610f24565b34801561055c57600080fd5b5061022b61056b3660046117ab565b610f85565b34801561057c57600080fd5b506103fd61058b36600461168d565b610fde565b34801561059c57600080fd5b506103fd6105ab366004611631565b610ffb565b3480156105bc57600080fd5b503360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff1661024d565b34801561060057600080fd5b5061024d61060f3660046116a6565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561064657600080fd5b506102b2600081565b34801561065b57600080fd5b506103fd61066a36600461168d565b6001602052600090815260409020546001600160a01b031681565b34801561069157600080fd5b506102b27ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b3480156106c557600080fd5b5061022b6106d43660046116a6565b6110f7565b3480156106e557600080fd5b5061022b6106f4366004611672565b61111c565b60006107106000356001600160e01b031916610ffb565b90506001600160a01b0381161580159061072d575060005460ff16155b6107795760405162461bcd60e51b815260206004820152601d60248201527f50726f78793a20696d706c204f522070726f78792069732066616c7365000000604482015260640161021a565b3660008037600080366000845af43d6000803e808015610798573d6000f35b3d6000fd5b505050565b60006107ad82611173565b92915050565b6107bc3361080f565b6108015760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61080c600082610874565b50565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff166107ad565b60008281526005602052604090206001015461086a81611198565b61079d83836111a2565b6001600160a01b03811633146108f25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161021a565b6108fc8282611244565b5050565b6109093361080f565b61094e5760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6001600160a01b0381166109a45760405162461bcd60e51b815260206004820152600d60248201527f696e707574206973207a65726f00000000000000000000000000000000000000604482015260640161021a565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03828116911603610a155760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b604482015260640161021a565b610a2281600060016112c7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610a623361080f565b610aa75760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b81610af45760405162461bcd60e51b815260206004820181905260248201527f50726f78793a205f73656c6563746f727327732073697a65206973207a65726f604482015260640161021a565b6001600160a01b03811660009081526002602052604090205460ff16610b5c5760405162461bcd60e51b815260206004820152601860248201527f50726f78793a205f696d70206973206e6f7420616c6976650000000000000000604482015260640161021a565b60005b82811015610d0057816001600160a01b031660036000868685818110610b8757610b876117de565b9050602002016020810190610b9c9190611631565b6001600160e01b03191681526020810191909152604001600020546001600160a01b031603610c0d5760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646974795661756c7450726f78793a2073616d6520696d70000000604482015260640161021a565b8160036000868685818110610c2457610c246117de565b9050602002016020810190610c399190611631565b6001600160e01b03191681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558216848483818110610c8e57610c8e6117de565b9050602002016020810190610ca39190611631565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f14ebc1c32aa68f4d766e89f3e546cee249f7df25183fc10ab1568d91c2ce9b7b60405160405180910390a380610cf88161180a565b915050610b5f565b50505050565b610d0f3361080f565b610d545760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6108fc828261135f565b610d673361080f565b610dac5760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61080c60008261084f565b610dc03361080f565b610e055760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b610e10600033610874565b565b610e1b3361080f565b610e605760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6001600160a01b038116610eb65760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f20616464726573730000000000000000604482015260640161021a565b6001600160a01b0381163303610f0e5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e00000000000000000000604482015260640161021a565b610f1960008261084f565b61080c600033610874565b610f2d3361080f565b610f725760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6000805460ff1916911515919091179055565b610f8e3361080f565b610fd35760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61079d8383836112c7565b6000818152600160205260408120546001600160a01b03166107ad565b6001600160e01b031981166000908152600360205260408120546001600160a01b031661105b5750506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b6001600160e01b031982166000908152600360209081526040808320546001600160a01b03168352600290915290205460ff16156110b957506001600160e01b0319166000908152600360205260409020546001600160a01b031690565b50506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b919050565b60008281526005602052604090206001015461111281611198565b61079d8383611244565b6111253361080f565b61116a5760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61080c81610e12565b60006001600160e01b03198216637965db0b60e01b14806107ad57506107ad826113be565b61080c81336113fa565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166108fc5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556112003390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16156108fc5760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0383163b61131e5760405162461bcd60e51b815260206004820152601b60248201527f50726f78793a206e6f7420636f6e747261637420616464726573730000000000604482015260640161021a565b8015611359576000828152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b61079d83825b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f72558d9bfba4210f9ef095c782589484151f6d90f7a81bb3cb9b33efc695d324910160405180910390a25050565b60006301ffc9a760e01b6001600160e01b0319831614806107ad5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166108fc5761142d8161146f565b611438836020611481565b604051602001611449929190611847565b60408051601f198184030181529082905262461bcd60e51b825261021a916004016118c8565b60606107ad6001600160a01b03831660145b606060006114908360026118fb565b61149b906002611912565b67ffffffffffffffff8111156114b3576114b3611925565b6040519080825280601f01601f1916602001820160405280156114dd576020820181803683370190505b509050600360fc1b816000815181106114f8576114f86117de565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611527576115276117de565b60200101906001600160f81b031916908160001a905350600061154b8460026118fb565b611556906001611912565b90505b60018111156115db577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611597576115976117de565b1a60f81b8282815181106115ad576115ad6117de565b60200101906001600160f81b031916908160001a90535060049490941c936115d48161193b565b9050611559565b50831561162a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161021a565b9392505050565b60006020828403121561164357600080fd5b81356001600160e01b03198116811461162a57600080fd5b80356001600160a01b03811681146110f257600080fd5b60006020828403121561168457600080fd5b61162a8261165b565b60006020828403121561169f57600080fd5b5035919050565b600080604083850312156116b957600080fd5b823591506116c96020840161165b565b90509250929050565b6000806000604084860312156116e757600080fd5b833567ffffffffffffffff808211156116ff57600080fd5b818601915086601f83011261171357600080fd5b81358181111561172257600080fd5b8760208260051b850101111561173757600080fd5b60209283019550935061174d918601905061165b565b90509250925092565b803580151581146110f257600080fd5b6000806040838503121561177957600080fd5b6117828361165b565b91506116c960208401611756565b6000602082840312156117a257600080fd5b61162a82611756565b6000806000606084860312156117c057600080fd5b6117c98461165b565b92506020840135915061174d60408501611756565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161181c5761181c6117f4565b5060010190565b60005b8381101561183e578181015183820152602001611826565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161187f816017850160208801611823565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516118bc816028840160208801611823565b01602801949350505050565b60208152600082518060208401526118e7816040850160208701611823565b601f01601f19169190910160400192915050565b80820281158282048414176107ad576107ad6117f4565b808201808211156107ad576107ad6117f4565b634e487b7160e01b600052604160045260246000fd5b60008161194a5761194a6117f4565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000813000a",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c80636ec3d5ae116100f75780638d4fdb4011610095578063b911135f11610064578063b911135f1461064f578063d539139314610685578063d547741f146106b9578063f2fde38b146106d957610223565b80638d4fdb40146105905780638f32d59b146105b057806391d14854146105f4578063a217fddf1461063a57610223565b806375829def116100d157806375829def146105105780637cb00d25146105305780637cd5f663146105505780638b8f4a651461057057610223565b80636ec3d5ae146104c557806370480275146104db578063715018a6146104fb57610223565b806343c657661161016f578063550d01a31161013e578063550d01a3146104155780635c60da1b146104455780635cc797d81461048b57806363a8fd89146104ab57610223565b806343c65766146103405780634a5df50f1461037a5780634ce970361461039a57806350d2a276146103c757610223565b806324d7806c116101ab57806324d7806c146102c05780632f2ff15d146102e057806336568abe146103005780633659cfe61461032057610223565b806301ffc9a71461022d5780631785f53c14610262578063248a9ca31461028257610223565b366102235760405162461bcd60e51b815260206004820152601460248201527f63616e6e6f74207265636569766520457468657200000000000000000000000060448201526064015b60405180910390fd5b61022b6106f9565b005b34801561023957600080fd5b5061024d610248366004611631565b6107a2565b60405190151581526020015b60405180910390f35b34801561026e57600080fd5b5061022b61027d366004611672565b6107b3565b34801561028e57600080fd5b506102b261029d36600461168d565b60009081526005602052604090206001015490565b604051908152602001610259565b3480156102cc57600080fd5b5061024d6102db366004611672565b61080f565b3480156102ec57600080fd5b5061022b6102fb3660046116a6565b61084f565b34801561030c57600080fd5b5061022b61031b3660046116a6565b610874565b34801561032c57600080fd5b5061022b61033b366004611672565b610900565b34801561034c57600080fd5b5060165460175460185461035f92919083565b60408051938452602084019290925290820152606001610259565b34801561038657600080fd5b5061022b6103953660046116d2565b610a59565b3480156103a657600080fd5b506102b26103b5366004611672565b60156020526000908152604090205481565b3480156103d357600080fd5b506103fd6103e2366004611631565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610259565b34801561042157600080fd5b5061024d610430366004611672565b60026020526000908152604090205460ff1681565b34801561045157600080fd5b506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03166103fd565b34801561049757600080fd5b5061022b6104a6366004611766565b610d06565b3480156104b757600080fd5b5060005461024d9060ff1681565b3480156104d157600080fd5b506102b260145481565b3480156104e757600080fd5b5061022b6104f6366004611672565b610d5e565b34801561050757600080fd5b5061022b610db7565b34801561051c57600080fd5b5061022b61052b366004611672565b610e12565b34801561053c57600080fd5b5061022b61054b366004611790565b610f24565b34801561055c57600080fd5b5061022b61056b3660046117ab565b610f85565b34801561057c57600080fd5b506103fd61058b36600461168d565b610fde565b34801561059c57600080fd5b506103fd6105ab366004611631565b610ffb565b3480156105bc57600080fd5b503360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff1661024d565b34801561060057600080fd5b5061024d61060f3660046116a6565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561064657600080fd5b506102b2600081565b34801561065b57600080fd5b506103fd61066a36600461168d565b6001602052600090815260409020546001600160a01b031681565b34801561069157600080fd5b506102b27ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b3480156106c557600080fd5b5061022b6106d43660046116a6565b6110f7565b3480156106e557600080fd5b5061022b6106f4366004611672565b61111c565b60006107106000356001600160e01b031916610ffb565b90506001600160a01b0381161580159061072d575060005460ff16155b6107795760405162461bcd60e51b815260206004820152601d60248201527f50726f78793a20696d706c204f522070726f78792069732066616c7365000000604482015260640161021a565b3660008037600080366000845af43d6000803e808015610798573d6000f35b3d6000fd5b505050565b60006107ad82611173565b92915050565b6107bc3361080f565b6108015760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61080c600082610874565b50565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff166107ad565b60008281526005602052604090206001015461086a81611198565b61079d83836111a2565b6001600160a01b03811633146108f25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161021a565b6108fc8282611244565b5050565b6109093361080f565b61094e5760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6001600160a01b0381166109a45760405162461bcd60e51b815260206004820152600d60248201527f696e707574206973207a65726f00000000000000000000000000000000000000604482015260640161021a565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03828116911603610a155760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b604482015260640161021a565b610a2281600060016112c7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610a623361080f565b610aa75760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b81610af45760405162461bcd60e51b815260206004820181905260248201527f50726f78793a205f73656c6563746f727327732073697a65206973207a65726f604482015260640161021a565b6001600160a01b03811660009081526002602052604090205460ff16610b5c5760405162461bcd60e51b815260206004820152601860248201527f50726f78793a205f696d70206973206e6f7420616c6976650000000000000000604482015260640161021a565b60005b82811015610d0057816001600160a01b031660036000868685818110610b8757610b876117de565b9050602002016020810190610b9c9190611631565b6001600160e01b03191681526020810191909152604001600020546001600160a01b031603610c0d5760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646974795661756c7450726f78793a2073616d6520696d70000000604482015260640161021a565b8160036000868685818110610c2457610c246117de565b9050602002016020810190610c399190611631565b6001600160e01b03191681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558216848483818110610c8e57610c8e6117de565b9050602002016020810190610ca39190611631565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f14ebc1c32aa68f4d766e89f3e546cee249f7df25183fc10ab1568d91c2ce9b7b60405160405180910390a380610cf88161180a565b915050610b5f565b50505050565b610d0f3361080f565b610d545760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6108fc828261135f565b610d673361080f565b610dac5760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61080c60008261084f565b610dc03361080f565b610e055760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b610e10600033610874565b565b610e1b3361080f565b610e605760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6001600160a01b038116610eb65760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f20616464726573730000000000000000604482015260640161021a565b6001600160a01b0381163303610f0e5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e00000000000000000000604482015260640161021a565b610f1960008261084f565b61080c600033610874565b610f2d3361080f565b610f725760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b6000805460ff1916911515919091179055565b610f8e3361080f565b610fd35760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61079d8383836112c7565b6000818152600160205260408120546001600160a01b03166107ad565b6001600160e01b031981166000908152600360205260408120546001600160a01b031661105b5750506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b6001600160e01b031982166000908152600360209081526040808320546001600160a01b03168352600290915290205460ff16156110b957506001600160e01b0319166000908152600360205260409020546001600160a01b031690565b50506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b919050565b60008281526005602052604090206001015461111281611198565b61079d8383611244565b6111253361080f565b61116a5760405162461bcd60e51b8152602060048201526022602482015260008051602061195383398151915260448201526134b760f11b606482015260840161021a565b61080c81610e12565b60006001600160e01b03198216637965db0b60e01b14806107ad57506107ad826113be565b61080c81336113fa565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166108fc5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556112003390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16156108fc5760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0383163b61131e5760405162461bcd60e51b815260206004820152601b60248201527f50726f78793a206e6f7420636f6e747261637420616464726573730000000000604482015260640161021a565b8015611359576000828152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b61079d83825b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f72558d9bfba4210f9ef095c782589484151f6d90f7a81bb3cb9b33efc695d324910160405180910390a25050565b60006301ffc9a760e01b6001600160e01b0319831614806107ad5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166108fc5761142d8161146f565b611438836020611481565b604051602001611449929190611847565b60408051601f198184030181529082905262461bcd60e51b825261021a916004016118c8565b60606107ad6001600160a01b03831660145b606060006114908360026118fb565b61149b906002611912565b67ffffffffffffffff8111156114b3576114b3611925565b6040519080825280601f01601f1916602001820160405280156114dd576020820181803683370190505b509050600360fc1b816000815181106114f8576114f86117de565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611527576115276117de565b60200101906001600160f81b031916908160001a905350600061154b8460026118fb565b611556906001611912565b90505b60018111156115db577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611597576115976117de565b1a60f81b8282815181106115ad576115ad6117de565b60200101906001600160f81b031916908160001a90535060049490941c936115d48161193b565b9050611559565b50831561162a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161021a565b9392505050565b60006020828403121561164357600080fd5b81356001600160e01b03198116811461162a57600080fd5b80356001600160a01b03811681146110f257600080fd5b60006020828403121561168457600080fd5b61162a8261165b565b60006020828403121561169f57600080fd5b5035919050565b600080604083850312156116b957600080fd5b823591506116c96020840161165b565b90509250929050565b6000806000604084860312156116e757600080fd5b833567ffffffffffffffff808211156116ff57600080fd5b818601915086601f83011261171357600080fd5b81358181111561172257600080fd5b8760208260051b850101111561173757600080fd5b60209283019550935061174d918601905061165b565b90509250925092565b803580151581146110f257600080fd5b6000806040838503121561177957600080fd5b6117828361165b565b91506116c960208401611756565b6000602082840312156117a257600080fd5b61162a82611756565b6000806000606084860312156117c057600080fd5b6117c98461165b565b92506020840135915061174d60408501611756565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161181c5761181c6117f4565b5060010190565b60005b8381101561183e578181015183820152602001611826565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161187f816017850160208801611823565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516118bc816028840160208801611823565b01602801949350505050565b60208152600082518060208401526118e7816040850160208701611823565b601f01601f19169190910160400192915050565b80820281158282048414176107ad576107ad6117f4565b808201808211156107ad576107ad6117f4565b634e487b7160e01b600052604160045260246000fd5b60008161194a5761194a6117f4565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSelectorImplementation2(bytes4)": {
        "details": "view implementation address of selector of function",
        "params": {
          "_selector": "selector of function"
        },
        "returns": {
          "impl": "address of the implementation"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "implementation()": {
        "details": "returns the implementation"
      },
      "implementation2(uint256)": {
        "details": "view implementation address of the proxy[index]",
        "params": {
          "_index": "index of proxy"
        },
        "returns": {
          "_0": "address of the implementation"
        }
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAliveImplementation2(address,bool)": {
        "details": "set alive status of implementation",
        "params": {
          "_alive": "alive status",
          "newImplementation": "Address of the new implementation."
        }
      },
      "setImplementation2(address,uint256,bool)": {
        "details": "set the implementation address and status of the proxy[index]",
        "params": {
          "_alive": "_alive",
          "_index": "index",
          "newImplementation": "Address of the new implementation."
        }
      },
      "setProxyPause(bool)": {
        "params": {
          "_pause": "true:pause or false:resume"
        }
      },
      "setSelectorImplementations2(bytes4[],address)": {
        "details": "set selectors of Implementation",
        "params": {
          "_imp": "implementation address",
          "_selectors": "being added selectors"
        }
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      },
      "upgradeTo(address)": {
        "params": {
          "impl": "New implementation contract address"
        }
      }
    },
    "title": "@dev",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setProxyPause(bool)": {
        "notice": "Set pause state"
      },
      "upgradeTo(address)": {
        "notice": "Set implementation contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11867,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11871,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11875,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11879,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 1801,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 24,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_roles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 16191,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_wton",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16193,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_registry",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 16195,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_seigManager",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 16201,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_accStaked",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16205,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_accStakedLayer2",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16209,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_accStakedAccount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16215,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_pendingUnstaked",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16219,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_pendingUnstakedLayer2",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16223,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_pendingUnstakedAccount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16229,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_accUnstaked",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16233,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_accUnstakedLayer2",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16237,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_accUnstakedAccount",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16245,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_withdrawalRequests",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage))"
      },
      {
        "astId": 16251,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "_withdrawalRequestIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16253,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "globalWithdrawalDelay",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 16257,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "withdrawalDelay",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16260,
        "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
        "label": "acceptDelayPeriod",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(AcceptDelayPeriod)16274_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage": {
        "base": "t_struct(WithdrawalReqeust)16267_storage",
        "encoding": "dynamic_array",
        "label": "struct DepositManagerStorage.WithdrawalReqeust[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DepositManagerStorage.WithdrawalReqeust[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct DepositManagerStorage.WithdrawalReqeust[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(WithdrawalReqeust)16267_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AcceptDelayPeriod)16274_storage": {
        "encoding": "inplace",
        "label": "struct DepositManagerStorage.AcceptDelayPeriod",
        "members": [
          {
            "astId": 16269,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16271,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16273,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "minimumDelayBlocks",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WithdrawalReqeust)16267_storage": {
        "encoding": "inplace",
        "label": "struct DepositManagerStorage.WithdrawalReqeust",
        "members": [
          {
            "astId": 16262,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "withdrawableBlockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 16264,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "amount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 16266,
            "contract": "contracts/stake/managers/DepositManagerProxy.sol:DepositManagerProxy",
            "label": "processed",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}