{
  "address": "0xA29C36A8874fC0A642b735E3730184fd9dcB98A8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "coinage",
          "type": "address"
        }
      ],
      "name": "CoinageCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "Comitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupplyOfWTON",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "CommitLog1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "OnSnapshot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakedSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "powertonSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pseig",
          "type": "uint256"
        }
      ],
      "name": "SeigGiven",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinageBurnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totBurnAmount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTotFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCoinageFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTotFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextCoinageFactor",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSeigniorage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALID_COMMISSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VALID_COMMISSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accRelativeSeig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "additionalTotBurnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjustCommissionDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "coinages",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "commissionRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoSeigRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayedCommissionBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayedCommissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayedCommissionRateNegative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "deployCoinage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "getOperatorAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ton_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wton_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seigPerBlock_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastSeigBlock_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isChallenger",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "isCommissionRateNegative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "lastCommitBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSeigBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "powerTONSeigRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "powerton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relativeSeigRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceWTONMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "adjustDelay_",
          "type": "uint256"
        }
      ],
      "name": "setAdjustDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "name": "setCoinageFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isCommissionRateNegative_",
          "type": "bool"
        }
      ],
      "name": "setCommissionRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoSeigRate_",
          "type": "uint256"
        }
      ],
      "name": "setDaoSeigRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "powerton_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "powerTONSeigRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoSeigRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "relativeSeigRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adjustDelay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount_",
          "type": "uint256"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumAmount_",
          "type": "uint256"
        }
      ],
      "name": "setMinimumAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "powerton_",
          "type": "address"
        }
      ],
      "name": "setPowerTON",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "powerTONSeigRate_",
          "type": "uint256"
        }
      ],
      "name": "setPowerTONSeigRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pseigRate_",
          "type": "uint256"
        }
      ],
      "name": "setPseigRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        }
      ],
      "name": "slash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "stakeOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeOfTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "stakeOfTotalAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSeigManager",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "coinages_",
          "type": "address[]"
        }
      ],
      "name": "transferCoinageOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "uncomittedStakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpausedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSeigniorage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "updateSeigniorageLayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d18555c81c2541706d845f963d86f61f66ba4838e579de916e14a80f1753a78",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0xA29C36A8874fC0A642b735E3730184fd9dcB98A8",
    "transactionIndex": 17,
    "gasUsed": "4961464",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa78334d0a17000bd6f640299351e9fc2fa9137af7fbbfa57603e0a98326c474e",
    "transactionHash": "0x0d18555c81c2541706d845f963d86f61f66ba4838e579de916e14a80f1753a78",
    "logs": [],
    "blockNumber": 9807212,
    "cumulativeGasUsed": "6476437",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "788129922d3841cef4d3fd6850dbd1fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinage\",\"type\":\"address\"}],\"name\":\"CoinageCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"Comitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupplyOfWTON\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotalSupply\",\"type\":\"uint256\"}],\"name\":\"CommitLog1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"OnSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powertonSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pseig\",\"type\":\"uint256\"}],\"name\":\"SeigGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinageBurnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totBurnAmount\",\"type\":\"uint256\"}],\"name\":\"UnstakeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCoinageFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextCoinageFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedSeigniorage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRelativeSeig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"additionalTotBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustCommissionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"coinages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"commissionRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionRateNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"deployCoinage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"getOperatorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seigPerBlock_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastSeigBlock_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isChallenger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"isCommissionRateNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"lastCommitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSeigBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerTONSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relativeSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWTONMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustDelay_\",\"type\":\"uint256\"}],\"name\":\"setAdjustDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"name\":\"setCoinageFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCommissionRateNegative_\",\"type\":\"bool\"}],\"name\":\"setCommissionRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoSeigRate_\",\"type\":\"uint256\"}],\"name\":\"setDaoSeigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"powerTONSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount_\",\"type\":\"uint256\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount_\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerton_\",\"type\":\"address\"}],\"name\":\"setPowerTON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"powerTONSeigRate_\",\"type\":\"uint256\"}],\"name\":\"setPowerTONSeigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pseigRate_\",\"type\":\"uint256\"}],\"name\":\"setPseigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeOfTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfTotalAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSeigManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"coinages_\",\"type\":\"address[]\"}],\"name\":\"transferCoinageOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"uncomittedStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSeigniorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"updateSeigniorageLayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"SeigManager gives seigniorage to operator and WTON holders. For each commit by operator, operator (or user) will get seigniorage in propotion to the staked (or delegated) amount of WTON. [Tokens] - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?). - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract. For each commit by operator,  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /     (total supply of TON and WTON) * (num blocks * seigniorage per block).  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,     up to the increased amount in step (1).  3. set the layer2's balance of {committed} as the layer2's {tot} balance. For each stake or delegate with amount of {v} to a Layer2,  1. mint {v} {coinages[layer2]} tokens to the account  2. mint {v} {tot} tokens to the layer2 contract For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,  1. burn {v} {coinages[layer2]} tokens from the account  2. burn {v + \\u237a} {tot} tokens from the layer2 contract,   where \\u237a = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"deployCoinage(address)\":{\"details\":\"deploy coinage token for the layer2.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"onDeposit(address,address,uint256)\":{\"details\":\"Callback for a new deposit\"},\"onTransfer(address,address,uint256)\":{\"details\":\"Callback for a token transfer\"},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}},\"unpause()\":{\"details\":\"Called by a pauser to unpause, returns to normal state.\"},\"updateSeigniorage()\":{\"details\":\"Callback for a new commit\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stake/managers/SeigManager.sol\":\"SeigManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/AuthControlSeigManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AuthRoleSeigManager.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract AuthControlSeigManager is AuthRoleSeigManager, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"AuthControl: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"AuthControl: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, msg.sender), \\\"AuthControl: Caller is not an operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyChallenger() {\\n        require(hasRole(CHALLENGER_ROLE, msg.sender), \\\"AuthControl: Caller is not a challenger\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSE_ROLE, msg.sender), \\\"AuthControl: Caller is not a pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinterOrAdmin() {\\n        console.log('onlyMinterOrAdmin msg.sender ', msg.sender);\\n        console.logBool(hasRole(MINTER_ROLE, msg.sender));\\n\\n        require(isAdmin(msg.sender) || hasRole(MINTER_ROLE, msg.sender), \\\"not onlyMinterOrAdmin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function addMinter(address account) public virtual onlyOwner {\\n        grantRole(MINTER_ROLE, account);\\n    }\\n\\n    function addOperator(address account) public virtual onlyOwner {\\n        grantRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function addChallenger(address account) public virtual onlyMinterOrAdmin {\\n        grantRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function removeMinter(address account) public virtual onlyOwner {\\n        renounceRole(MINTER_ROLE, account);\\n    }\\n\\n    function removeChallenger(address account) public virtual onlyOwner {\\n        renounceRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    function removeOperator(address account) public virtual onlyOwner {\\n        renounceRole(OPERATOR_ROLE, account);\\n    }\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function renounceMinter() public {\\n        renounceRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function renounceOperator() public {\\n        renounceRole(OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    function renounceChallenger() public {\\n        renounceRole(CHALLENGER_ROLE, msg.sender);\\n    }\\n\\n    function revokeMinter(address account) public onlyOwner {\\n        revokeRole(MINTER_ROLE, account);\\n    }\\n\\n    function revokeOperator(address account) public onlyOwner {\\n        revokeRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function revokeChallenger(address account) public onlyOwner {\\n        revokeRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function isMinter(address account) public view virtual returns (bool) {\\n        return hasRole(MINTER_ROLE, account);\\n    }\\n\\n    function isOperator(address account) public view virtual returns (bool) {\\n        return hasRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function isChallenger(address account) public view virtual returns (bool) {\\n        return hasRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb34edfd4e9e7f507a74f6a7cc2db6f5c637ab46726662b8a2914faef53f9a350\",\"license\":\"MIT\"},\"contracts/common/AuthRoleSeigManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AuthRoleSeigManager {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\n    bytes32 public constant CHALLENGER_ROLE = keccak256(\\\"CHALLENGER\\\");\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE\\\");\\n}\\n\",\"keccak256\":\"0x4ef5ed953856121614c2ea0ff527a8ffcebba5c70309fcd80e4a7d9c54ab3f49\",\"license\":\"MIT\"},\"contracts/dao/interfaces/CoinageFactoryI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface CoinageFactoryI {\\n  function deploy() external returns (address);\\n}\\n\",\"keccak256\":\"0x66ce5e84f4bf072616568e4683d451123a746e2b73fa21cb7acc1c1c7b27fd15\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IWTON.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWTON {\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount) external returns (bool);\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount) external returns (bool);\\n    function renounceTonMinter() external;\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function renounceMinter() external ;\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n}\",\"keccak256\":\"0x6ed6404309dad833fb32fb39445f08ca7fa321b5541a6279d1ce36392d1b122e\",\"license\":\"MIT\"},\"contracts/dao/interfaces/Layer2I.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface Layer2I {\\n  function operator() external view returns (address);\\n  function isLayer2() external view returns (bool);\\n  function currentFork() external view returns (uint);\\n  function lastEpoch(uint forkNumber) external view returns (uint);\\n  function changeOperator(address _operator) external;\\n}\\n\",\"keccak256\":\"0x76ae3e18aba63a43d292d06f65853817a344f4725e4026784a7445ee9cd13a91\",\"license\":\"MIT\"},\"contracts/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract DSMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n    return x <= y ? x : y;\\n  }\\n  function max(uint x, uint y) internal pure returns (uint z) {\\n    return x >= y ? x : y;\\n  }\\n  function imin(int x, int y) internal pure returns (int z) {\\n    return x <= y ? x : y;\\n  }\\n  function imax(int x, int y) internal pure returns (int z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  uint constant WAD_ = 10 ** 18;\\n  uint constant RAY_ = 10 ** 27;\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), WAD_ / 2) / WAD_;\\n  }\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), RAY_ / 2) / RAY_;\\n  }\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, WAD_), y / 2) / y;\\n  }\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, RAY_), y / 2) / y;\\n  }\\n\\n  function wmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / WAD_;\\n  }\\n  function rmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / RAY_;\\n  }\\n  function wdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, WAD_) / y;\\n  }\\n  function rdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, RAY_) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //  x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //  floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function wpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : WAD_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = wmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = wmul(z, x);\\n      }\\n    }\\n  }\\n\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : RAY_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x61ed70add2b6579a40cfea37088db547f1a411b039853d22aa6dc363c7b6ee60\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"contracts/stake/interfaces/RefactorCoinageSnapshotI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface RefactorCoinageSnapshotI {\\n  function factor() external view returns (uint256);\\n  function setFactor(uint256 factor) external returns (bool);\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function mint(address account, uint256 amount) external returns (bool);\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function addMinter(address account) external;\\n  function renounceMinter() external;\\n  function transferOwnership(address newOwner) external;\\n  function snapshot() external returns (uint256 id);\\n  function totalSupplyAt(uint256 snapshotId) external view returns (uint256 amount);\\n  function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x04ed1689825225618106a62839f896e8f775ba9900684b51424544ed9608ac17\",\"license\":\"MIT\"},\"contracts/stake/interfaces/SeigManagerI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface SeigManagerI {\\n  function registry() external view returns (address);\\n  function depositManager() external view returns (address);\\n  function ton() external view returns (address);\\n  function wton() external view returns (address);\\n  function powerton() external view returns (address);\\n  function tot() external view returns (address);\\n  function coinages(address layer2) external view returns (address);\\n  function commissionRates(address layer2) external view returns (uint256);\\n\\n  function lastCommitBlock(address layer2) external view returns (uint256);\\n  function seigPerBlock() external view returns (uint256);\\n  function lastSeigBlock() external view returns (uint256);\\n  function pausedBlock() external view returns (uint256);\\n  function unpausedBlock() external view returns (uint256);\\n  function DEFAULT_FACTOR() external view returns (uint256);\\n\\n  function deployCoinage(address layer2) external returns (bool);\\n  function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n  function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\\n  function stakeOf(address layer2, address account) external view returns (uint256);\\n  function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n  function updateSeigniorage() external returns (bool);\\n  function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n  function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n\\n}\\n\",\"keccak256\":\"0xf5ecb45a9f6521b045a8f0688448d77b6d0656f90e54f5e87e5a8532dd1d93ea\",\"license\":\"MIT\"},\"contracts/stake/managers/SeigManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { DSMath } from \\\"../../libraries/DSMath.sol\\\";\\nimport { RefactorCoinageSnapshotI } from \\\"../interfaces/RefactorCoinageSnapshotI.sol\\\";\\nimport { CoinageFactoryI } from \\\"../../dao/interfaces/CoinageFactoryI.sol\\\";\\nimport { IWTON } from \\\"../../dao/interfaces/IWTON.sol\\\";\\nimport { Layer2I } from \\\"../../dao/interfaces/Layer2I.sol\\\";\\nimport { SeigManagerI } from \\\"../interfaces/SeigManagerI.sol\\\";\\n\\nimport \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AuthControlSeigManager } from \\\"../../common/AuthControlSeigManager.sol\\\";\\nimport { SeigManagerStorage } from \\\"./SeigManagerStorage.sol\\\";\\n\\ninterface MinterRoleRenounceTarget {\\n  function renounceMinter() external;\\n}\\n\\ninterface PauserRoleRenounceTarget {\\n  function renouncePauser() external;\\n}\\n\\ninterface OwnableTarget {\\n  function renounceOwnership() external;\\n  function transferOwnership(address newOwner) external;\\n}\\n\\ninterface IILayer2Registry {\\n  function layer2s(address layer2) external view returns (bool);\\n  function numLayer2s() external view  returns (uint256);\\n  function layer2ByIndex(uint256 index) external view returns (address);\\n}\\n\\ninterface IPowerTON {\\n  function onDeposit(address layer2, address account, uint256 amount) external;\\n  function onWithdraw(address layer2, address account, uint256 amount) external;\\n  function updateSeigniorage(uint256 amount) external;\\n}\\n\\ninterface ITON {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IRefactorCoinageSnapshot {\\n  function snapshot() external returns (uint256 id);\\n}\\n\\ninterface ICandidate {\\n  function updateSeigniorage() external returns (bool);\\n}\\n/**\\n * @dev SeigManager gives seigniorage to operator and WTON holders.\\n * For each commit by operator, operator (or user) will get seigniorage\\n * in propotion to the staked (or delegated) amount of WTON.\\n *\\n * [Tokens]\\n * - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?).\\n * - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract.\\n *\\n * For each commit by operator,\\n *  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /\\n *     (total supply of TON and WTON) * (num blocks * seigniorage per block).\\n *  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,\\n *     up to the increased amount in step (1).\\n *  3. set the layer2's balance of {committed} as the layer2's {tot} balance.\\n *\\n * For each stake or delegate with amount of {v} to a Layer2,\\n *  1. mint {v} {coinages[layer2]} tokens to the account\\n *  2. mint {v} {tot} tokens to the layer2 contract\\n *\\n * For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,\\n *  1. burn {v} {coinages[layer2]} tokens from the account\\n *  2. burn {v + \\u237a} {tot} tokens from the layer2 contract,\\n *   where \\u237a = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account\\n *     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2\\n *     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply\\n *     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage\\n *\\n */\\ncontract SeigManager is ProxyStorage, AuthControlSeigManager, SeigManagerStorage, SeigManagerI, DSMath {\\n\\n  //////////////////////////////\\n  // Modifiers\\n  //////////////////////////////\\n\\n  modifier onlyRegistry() {\\n    require(msg.sender == _registry, \\\"not onlyRegistry\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegistryOrOperator(address layer2) {\\n    require(msg.sender == _registry || msg.sender == Layer2I(layer2).operator(), \\\"not onlyRegistryOrOperator\\\");\\n    _;\\n  }\\n\\n  modifier onlyDepositManager() {\\n    require(msg.sender == _depositManager, \\\"not onlyDepositManager\\\");\\n    _;\\n  }\\n\\n  modifier onlyLayer2(address layer2) {\\n    require(IILayer2Registry(_registry).layer2s(layer2), \\\"not onlyLayer2\\\");\\n    _;\\n  }\\n\\n  modifier checkCoinage(address layer2) {\\n    require(address(_coinages[layer2]) != address(0), \\\"SeigManager: coinage has not been deployed yet\\\");\\n    _;\\n  }\\n\\n  modifier whenNotPaused() {\\n      require(!paused, \\\"Pausable: paused\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n      require(paused, \\\"Pausable: not paused\\\");\\n      _;\\n  }\\n\\n\\n  //////////////////////////////\\n  // Events\\n  //////////////////////////////\\n\\n  event CoinageCreated(address indexed layer2, address coinage);\\n  event SeigGiven(address indexed layer2, uint256 totalSeig, uint256 stakedSeig, uint256 unstakedSeig, uint256 powertonSeig, uint256 pseig);\\n  event Comitted(address indexed layer2);\\n  event CommissionRateSet(address indexed layer2, uint256 previousRate, uint256 newRate);\\n  event Paused(address account);\\n  event Unpaused(address account);\\n\\n  // DEV ONLY\\n  event CommitLog1(uint256 totalStakedAmount, uint256 totalSupplyOfWTON, uint256 prevTotalSupply, uint256 nextTotalSupply);\\n\\n  // DEV ONLY\\n  event UnstakeLog(uint coinageBurnAmount, uint totBurnAmount);\\n\\n  event UpdatedSeigniorage(address indexed layer2, uint256 blockNumber, uint256 prevTotal, uint256 nextTotal, uint256 oldTotFactor, uint256 oldCoinageFactor, uint256 nextTotFactor, uint256 nextCoinageFactor);\\n  event OnSnapshot(uint256 snapshotId);\\n\\n  //////////////////////////////\\n  // Constuctor\\n  //////////////////////////////\\n\\n  function initialize (\\n    address ton_,\\n    address wton_,\\n    address registry_,\\n    address depositManager_,\\n    uint256 seigPerBlock_,\\n    address factory_,\\n    uint256 lastSeigBlock_\\n  ) external {\\n    require(_ton == address(0) && _lastSeigBlock == 0, \\\"already initialized\\\");\\n\\n    _ton = ton_;\\n    _wton = wton_;\\n    _registry = registry_;\\n    _depositManager = depositManager_;\\n    _seigPerBlock = seigPerBlock_;\\n\\n    factory = factory_;\\n    address c = CoinageFactoryI(factory).deploy();\\n    require(c != address(0), \\\"zero tot\\\");\\n    _tot = RefactorCoinageSnapshotI(c);\\n\\n    _lastSeigBlock = lastSeigBlock_;\\n  }\\n\\n  //////////////////////////////\\n  // Pausable\\n  //////////////////////////////\\n\\n  function pause() public onlyPauser whenNotPaused {\\n    _pausedBlock = block.number;\\n    paused = true;\\n    emit Paused(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Called by a pauser to unpause, returns to normal state.\\n   */\\n  function unpause() public onlyPauser whenPaused {\\n    _unpausedBlock = block.number;\\n    paused = false;\\n    emit Unpaused(msg.sender);\\n  }\\n\\n\\n  //////////////////////////////\\n  // onlyOwner\\n  //////////////////////////////\\n\\n  function setData(\\n      address powerton_,\\n      address daoAddress,\\n      uint256 powerTONSeigRate_,\\n      uint256 daoSeigRate_,\\n      uint256 relativeSeigRate_,\\n      uint256 adjustDelay_,\\n      uint256 minimumAmount_\\n  ) external onlyOwner {\\n    require(\\n      powerTONSeigRate + daoSeigRate + relativeSeigRate <= RAY, \\\"exceeded seigniorage rate\\\"\\n    );\\n    _powerton = powerton_;\\n    dao = daoAddress;\\n    powerTONSeigRate = powerTONSeigRate_;\\n    daoSeigRate = daoSeigRate_;\\n    relativeSeigRate = relativeSeigRate_;\\n    adjustCommissionDelay = adjustDelay_;\\n    minimumAmount = minimumAmount_;\\n  }\\n\\n  function setPowerTON(address powerton_) external onlyOwner {\\n    _powerton = powerton_;\\n  }\\n\\n  function setDao(address daoAddress) external onlyOwner {\\n    dao = daoAddress;\\n  }\\n\\n  function setPowerTONSeigRate(uint256 powerTONSeigRate_) external onlyOwner {\\n    require(powerTONSeigRate_ > 0 && powerTONSeigRate_ < RAY, \\\"exceeded seigniorage rate\\\");\\n    powerTONSeigRate = powerTONSeigRate_;\\n  }\\n\\n  function setDaoSeigRate(uint256 daoSeigRate_) external onlyOwner {\\n    require(daoSeigRate_ > 0 && daoSeigRate_ < RAY, \\\"exceeded seigniorage rate\\\");\\n    daoSeigRate = daoSeigRate_;\\n  }\\n\\n  function setPseigRate(uint256 pseigRate_) external onlyOwner {\\n    require(pseigRate_ > 0 && pseigRate_ < RAY, \\\"exceeded seigniorage rate\\\");\\n    relativeSeigRate = pseigRate_;\\n  }\\n\\n  function setCoinageFactory(address factory_) external onlyOwner {\\n    factory = factory_;\\n  }\\n\\n  function transferCoinageOwnership(address newSeigManager, address[] calldata coinages_) external onlyOwner {\\n    for (uint256 i = 0; i < coinages_.length; i++) {\\n      RefactorCoinageSnapshotI c = RefactorCoinageSnapshotI(coinages_[i]);\\n      c.addMinter(newSeigManager);\\n      c.renounceMinter();\\n      c.transferOwnership(newSeigManager);\\n    }\\n  }\\n\\n  function renounceWTONMinter() external onlyOwner {\\n    IWTON(_wton).renounceMinter();\\n  }\\n\\n  function setAdjustDelay(uint256 adjustDelay_) external onlyOwner {\\n    adjustCommissionDelay = adjustDelay_;\\n  }\\n\\n  function setMinimumAmount(uint256 minimumAmount_) external onlyOwner {\\n    minimumAmount = minimumAmount_;\\n  }\\n\\n\\n  //////////////////////////////\\n  // onlyRegistry\\n  //////////////////////////////\\n\\n  /**\\n   * @dev deploy coinage token for the layer2.\\n   */\\n  function deployCoinage(address layer2) external onlyRegistry returns (bool) {\\n    // create new coinage token for the layer2 contract\\n    if (address(_coinages[layer2]) == address(0)) {\\n      address c = CoinageFactoryI(factory).deploy();\\n      _lastCommitBlock[layer2] = block.number;\\n      // addChallenger(layer2);\\n      _coinages[layer2] = RefactorCoinageSnapshotI(c);\\n      emit CoinageCreated(layer2, c);\\n    }\\n\\n    return true;\\n  }\\n\\n  function setCommissionRate(\\n    address layer2,\\n    uint256 commissionRate,\\n    bool isCommissionRateNegative_\\n  )\\n    external\\n    onlyRegistryOrOperator(layer2)\\n    returns (bool)\\n  {\\n    // check commission range\\n    require(\\n      (commissionRate == 0) ||\\n      (MIN_VALID_COMMISSION <= commissionRate && commissionRate <= MAX_VALID_COMMISSION),\\n      \\\"SeigManager: commission rate must be 0 or between 1 RAY and 0.01 RAY\\\"\\n    );\\n\\n    uint256 previous = _commissionRates[layer2];\\n    if (adjustCommissionDelay == 0) {\\n      _commissionRates[layer2] = commissionRate;\\n      _isCommissionRateNegative[layer2] = isCommissionRateNegative_;\\n    } else {\\n      delayedCommissionBlock[layer2] = block.number + adjustCommissionDelay;\\n      delayedCommissionRate[layer2] = commissionRate;\\n      delayedCommissionRateNegative[layer2] = isCommissionRateNegative_;\\n    }\\n\\n    emit CommissionRateSet(layer2, previous, commissionRate);\\n\\n    return true;\\n  }\\n\\n  // No implementation in registry.\\n  // function addChallenger(address account) public onlyRegistry {\\n  //   grantRole(CHALLENGER_ROLE, account);\\n  // }\\n\\n  // No implementation in layer2 (candidate).\\n  function slash(address layer2, address challenger) external onlyChallenger checkCoinage(layer2) returns (bool) {\\n    Layer2I(layer2).changeOperator(challenger);\\n\\n    return true;\\n  }\\n\\n  //////////////////////////////\\n  // onlyDepositManager\\n  //////////////////////////////\\n\\n  /**\\n   * @dev Callback for a new deposit\\n   */\\n  function onDeposit(address layer2, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(layer2)\\n    returns (bool)\\n  {\\n    if (_isOperator(layer2, account)) {\\n      uint256 newAmount = _coinages[layer2].balanceOf(account) + amount;\\n      require(newAmount >= minimumAmount, \\\"minimum amount is required\\\");\\n    }\\n    _tot.mint(layer2, amount);\\n    _coinages[layer2].mint(account, amount);\\n    if (address(_powerton) != address(0)) {\\n      IPowerTON(_powerton).onDeposit(layer2, account, amount);\\n    }\\n    return true;\\n  }\\n\\n  function onWithdraw(address layer2, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(layer2)\\n    returns (bool)\\n  {\\n    require(_coinages[layer2].balanceOf(account) >= amount, \\\"SeigManager: insufficiant balance to unstake\\\");\\n\\n    if (_isOperator(layer2, account)) {\\n      uint256 newAmount = _coinages[layer2].balanceOf(account) - amount;\\n      require(newAmount >= minimumAmount, \\\"minimum amount is required\\\");\\n    }\\n\\n    // burn {v + \\u237a} {tot} tokens to the layer2 contract,\\n    uint256 totAmount = _additionalTotBurnAmount(layer2, account, amount);\\n    _tot.burnFrom(layer2, amount+totAmount);\\n\\n    // burn {v} {coinages[layer2]} tokens to the account\\n    _coinages[layer2].burnFrom(account, amount);\\n\\n    if (address(_powerton) != address(0)) {\\n      IPowerTON(_powerton).onWithdraw(layer2, account, amount);\\n    }\\n\\n    emit UnstakeLog(amount, totAmount);\\n\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // checkCoinage\\n  //////////////////////////////\\n\\n  /**\\n   * @dev Callback for a new commit\\n   */\\n  function updateSeigniorage()\\n    public\\n    checkCoinage(msg.sender)\\n    returns (bool)\\n  {\\n    // short circuit if paused\\n    if (paused) {\\n      return true;\\n    }\\n    require(block.number > _lastSeigBlock, \\\"last seig block is not past\\\");\\n\\n    uint256 operatorAmount = getOperatorAmount(msg.sender);\\n    require(operatorAmount >= minimumAmount, \\\"minimumAmount is insufficient\\\");\\n\\n    RefactorCoinageSnapshotI coinage = _coinages[msg.sender];\\n\\n    uint256 oldCoinageFactor = coinage.factor();\\n    uint256 oldTotFactor = _tot.factor();\\n\\n    _increaseTot();\\n\\n    _lastCommitBlock[msg.sender] = block.number;\\n\\n    // 2. increase total supply of {coinages[layer2]}\\n    // RefactorCoinageSnapshotI coinage = _coinages[msg.sender];\\n\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(msg.sender);\\n\\n    // short circuit if there is no seigs for the layer2\\n    if (prevTotalSupply >= nextTotalSupply) {\\n      emit Comitted(msg.sender);\\n      return true;\\n    }\\n\\n    uint256 seigs = nextTotalSupply - prevTotalSupply;\\n    address operator = Layer2I(msg.sender).operator();\\n    uint256 operatorSeigs;\\n\\n    // calculate commission amount\\n    bool isCommissionRateNegative_ = _isCommissionRateNegative[msg.sender];\\n\\n    (nextTotalSupply, operatorSeigs) = _calcSeigsDistribution(\\n      msg.sender,\\n      coinage,\\n      prevTotalSupply,\\n      seigs,\\n      isCommissionRateNegative_,\\n      operator\\n    );\\n\\n    // gives seigniorages to the layer2 as coinage\\n    coinage.setFactor(\\n      _calcNewFactor(\\n        prevTotalSupply,\\n        nextTotalSupply,\\n        coinage.factor()\\n      )\\n    );\\n\\n    // give commission to operator or delegators\\n    if (operatorSeigs != 0) {\\n      if (isCommissionRateNegative_) {\\n        // TODO: adjust arithmetic error\\n        // burn by \\ud835\\udf38\\n        coinage.burnFrom(operator, operatorSeigs);\\n      } else {\\n        coinage.mint(operator, operatorSeigs);\\n      }\\n    }\\n\\n    uint256 newCoinageFactor = coinage.factor();\\n    uint256 newTotFactor = _tot.factor();\\n\\n    IWTON(_wton).mint(address(_depositManager), seigs);\\n\\n    emit Comitted(msg.sender);\\n    emit UpdatedSeigniorage(msg.sender, block.number, prevTotalSupply, nextTotalSupply, oldTotFactor, oldCoinageFactor, newTotFactor, newCoinageFactor);\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // External functions\\n  //////////////////////////////\\n\\n  function getOperatorAmount(address layer2) public view returns (uint256) {\\n    address operator = Layer2I(msg.sender).operator();\\n    return _coinages[layer2].balanceOf(operator);\\n  }\\n\\n  /**\\n   * @dev Callback for a token transfer\\n   */\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool) {\\n    require(msg.sender == address(_ton) || msg.sender == address(_wton),\\n      \\\"SeigManager: only TON or WTON can call onTransfer\\\");\\n\\n    if (!paused) {\\n      _increaseTot();\\n    }\\n\\n    return true;\\n  }\\n\\n\\n  function additionalTotBurnAmount(address layer2, address account, uint256 amount)\\n    external\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    return _additionalTotBurnAmount(layer2, account, amount);\\n  }\\n\\n\\n  function uncomittedStakeOf(address layer2, address account) external view returns (uint256) {\\n    RefactorCoinageSnapshotI coinage = RefactorCoinageSnapshotI(_coinages[layer2]);\\n\\n    uint256 prevFactor = coinage.factor();\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(layer2);\\n    uint256 newFactor = _calcNewFactor(prevTotalSupply, nextTotalSupply, prevFactor);\\n\\n    uint256 uncomittedBalance = rmul(\\n      rdiv(coinage.balanceOf(account), prevFactor),\\n      newFactor\\n    );\\n\\n    return (uncomittedBalance - _coinages[layer2].balanceOf(account));\\n  }\\n\\n  function stakeOf(address layer2, address account) public view returns (uint256) {\\n    return _coinages[layer2].balanceOf(account);\\n  }\\n\\n  function stakeOf(address account) external view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    // amount = 0;\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].balanceOf(account);\\n    }\\n  }\\n\\n  function stakeOfAt(address account, uint256 snapshotId) external view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    // amount = 0;\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].balanceOfAt(account, snapshotId);\\n    }\\n  }\\n\\n  function stakeOfTotal() external view returns (uint256 amount) {\\n    amount = _tot.totalSupply();\\n  }\\n\\n  function stakeOfTotalAt(uint256 snapshotId) external view returns (uint256 amount) {\\n    amount = _tot.totalSupplyAt(snapshotId);\\n  }\\n\\n  function onSnapshot() external returns (uint256 snapshotId) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    for (uint256 i = 0 ; i < num; i++){\\n        address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n        IRefactorCoinageSnapshot(address(_coinages[layer2])).snapshot();\\n    }\\n    snapshotId = IRefactorCoinageSnapshot(address(_tot)).snapshot();\\n    emit OnSnapshot(snapshotId);\\n  }\\n\\n  function updateSeigniorageLayer(address layer2) external returns (bool){\\n    require(ICandidate(layer2).updateSeigniorage(), \\\"fail updateSeigniorage\\\");\\n    return true;\\n  }\\n\\n  //////////////////////////////\\n  // Public functions\\n  //////////////////////////////\\n\\n\\n  //////////////////////////////\\n  // Internal functions\\n  //////////////////////////////\\n\\n  // return \\u237a, where \\u237a = (tot.balanceOf(layer2) - coinages[layer2].totalSupply()) * (amount / coinages[layer2].totalSupply())\\n  function _additionalTotBurnAmount(address layer2, address account, uint256 amount)\\n    internal\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    uint256 coinageTotalSupply = _coinages[layer2].totalSupply();\\n    uint256 totBalalnce = _tot.balanceOf(layer2);\\n\\n    // NOTE: arithamtic operations (mul and div) make some errors, so we gonna adjust them under 1e-9 WTON.\\n    //       note that coinageTotalSupply and totBalalnce are RAY values.\\n    if (coinageTotalSupply > totBalalnce && coinageTotalSupply - totBalalnce < WAD_) {\\n      return 0;\\n    }\\n\\n    return rdiv(\\n      rmul(\\n        totBalalnce - coinageTotalSupply,\\n        amount\\n      ),\\n      coinageTotalSupply\\n    );\\n  }\\n\\n\\n  function _calcSeigsDistribution(\\n    address layer2,\\n    RefactorCoinageSnapshotI coinage,\\n    uint256 prevTotalSupply,\\n    uint256 seigs,\\n    bool isCommissionRateNegative_,\\n    address operator\\n  ) internal returns (\\n    uint256 nextTotalSupply,\\n    uint256 operatorSeigs\\n  ) {\\n    if (block.number >= delayedCommissionBlock[layer2] && delayedCommissionBlock[layer2] != 0) {\\n      _commissionRates[layer2] = delayedCommissionRate[layer2];\\n      _isCommissionRateNegative[layer2] = delayedCommissionRateNegative[layer2];\\n      delayedCommissionBlock[layer2] = 0;\\n    }\\n\\n    uint256 commissionRate = _commissionRates[msg.sender];\\n\\n    nextTotalSupply = prevTotalSupply + seigs;\\n\\n    // short circuit if there is no commission rate\\n    if (commissionRate == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // if commission rate is possitive\\n    if (!isCommissionRateNegative_) {\\n      operatorSeigs = rmul(seigs, commissionRate); // additional seig for operator\\n      nextTotalSupply = nextTotalSupply - operatorSeigs;\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // short circuit if there is no previous total deposit (meanning, there is no deposit)\\n    if (prevTotalSupply == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // See negative commission distribution formular here: TBD\\n    uint256 operatorBalance = coinage.balanceOf(operator);\\n\\n    // short circuit if there is no operator deposit\\n    if (operatorBalance == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    uint256 operatorRate = rdiv(operatorBalance, prevTotalSupply);\\n\\n    // \\u0251: insufficient seig for operator\\n    operatorSeigs = rmul(\\n      rmul(seigs, operatorRate), // seigs for operator\\n      commissionRate\\n    );\\n\\n    // \\u03b2:\\n    uint256 delegatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : rdiv(operatorSeigs, RAY - operatorRate);\\n\\n    // \\ud835\\udf38:\\n    operatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : operatorSeigs + rmul(delegatorSeigs, operatorRate);\\n\\n    nextTotalSupply = nextTotalSupply + delegatorSeigs;\\n\\n    return (nextTotalSupply, operatorSeigs);\\n  }\\n\\n  function _calcNewFactor(uint256 source, uint256 target, uint256 oldFactor) internal pure returns (uint256) {\\n    return rdiv(rmul(target, oldFactor), source);\\n  }\\n\\n\\n  function _calcNumSeigBlocks() internal view returns (uint256) {\\n    require(!paused);\\n\\n    uint256 span = block.number - _lastSeigBlock;\\n    if (_unpausedBlock < _lastSeigBlock) {\\n      return span;\\n    }\\n\\n    return span - (_unpausedBlock - _pausedBlock);\\n  }\\n\\n  function _isOperator(address layer2, address operator) internal view returns (bool) {\\n    return operator == Layer2I(layer2).operator();\\n  }\\n\\n\\n  function _increaseTot() internal returns (bool) {\\n    // short circuit if already seigniorage is given.\\n    if (block.number <= _lastSeigBlock) {\\n      return false;\\n    }\\n\\n    if (RefactorCoinageSnapshotI(_tot).totalSupply() == 0) {\\n      _lastSeigBlock = block.number;\\n      return false;\\n    }\\n\\n    uint256 prevTotalSupply;\\n    uint256 nextTotalSupply;\\n\\n    // 1. increase total supply of {tot} by maximum seigniorages * staked rate\\n    //    staked rate = total staked amount / total supply of (W)TON\\n\\n    prevTotalSupply = _tot.totalSupply();\\n\\n    // maximum seigniorages\\n    uint256 maxSeig = _calcNumSeigBlocks() * _seigPerBlock;\\n\\n    // total supply of (W)TON\\n    uint256 tos = ((ITON(_ton).totalSupply() - ITON(_ton).balanceOf(_wton)) * (10 ** 9)) + (_tot.totalSupply());  // consider additional TOT balance as total supply\\n\\n    // maximum seigniorages * staked rate\\n    uint256 stakedSeig = rdiv(\\n      rmul(\\n        maxSeig,\\n        // total staked amount\\n        _tot.totalSupply()\\n      ),\\n      tos\\n    );\\n\\n    // pseig\\n    uint256 totalPseig = rmul(maxSeig - stakedSeig, relativeSeigRate);\\n\\n    nextTotalSupply = prevTotalSupply + stakedSeig + totalPseig;\\n    _lastSeigBlock = block.number;\\n\\n    _tot.setFactor(_calcNewFactor(prevTotalSupply, nextTotalSupply, _tot.factor()));\\n\\n    // TODO: reduce computation\\n    // DEV ONLY\\n    emit CommitLog1(\\n      _tot.totalSupply(),\\n      tos,\\n      prevTotalSupply,\\n      nextTotalSupply\\n    );\\n\\n    uint256 unstakedSeig = maxSeig - stakedSeig;\\n    uint256 powertonSeig;\\n    uint256 daoSeig;\\n    uint256 relativeSeig;\\n\\n    if (address(_powerton) != address(0)) {\\n      powertonSeig = rmul(unstakedSeig, powerTONSeigRate);\\n      IWTON(_wton).mint(address(_powerton), powertonSeig);\\n      IPowerTON(_powerton).updateSeigniorage(powertonSeig);\\n    }\\n\\n    if (dao != address(0)) {\\n      daoSeig = rmul(unstakedSeig, daoSeigRate);\\n      IWTON(_wton).mint(address(dao), daoSeig);\\n    }\\n\\n    if (relativeSeigRate != 0) {\\n      relativeSeig = totalPseig;\\n      accRelativeSeig = accRelativeSeig + relativeSeig;\\n    }\\n\\n    emit SeigGiven(msg.sender, maxSeig, stakedSeig, unstakedSeig, powertonSeig, relativeSeig);\\n\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // Storage getters\\n  //////////////////////////////\\n\\n  // solium-disable\\n  function registry() external view returns (address) { return address(_registry); }\\n  function depositManager() external view returns (address) { return address(_depositManager); }\\n  function ton() external view returns (address) { return address(_ton); }\\n  function wton() external view returns (address) { return address(_wton); }\\n  function powerton() external view returns (address) { return address(_powerton); }\\n  function tot() external view returns (address) { return address(_tot); }\\n  function coinages(address layer2) external view returns (address) { return address(_coinages[layer2]); }\\n  function commissionRates(address layer2) external view returns (uint256) { return _commissionRates[layer2]; }\\n  function isCommissionRateNegative(address layer2) external view returns (bool) { return _isCommissionRateNegative[layer2]; }\\n\\n  function lastCommitBlock(address layer2) external view returns (uint256) { return _lastCommitBlock[layer2]; }\\n  function seigPerBlock() external view returns (uint256) { return _seigPerBlock; }\\n  function lastSeigBlock() external view returns (uint256) { return _lastSeigBlock; }\\n  function pausedBlock() external view returns (uint256) { return _pausedBlock; }\\n  function unpausedBlock() external view returns (uint256) { return _unpausedBlock; }\\n\\n  function DEFAULT_FACTOR() external pure returns (uint256) { return _DEFAULT_FACTOR; }\\n  // solium-enable\\n\\n\\n  //====\\n  function renounceMinter(address target) public onlyOwner {\\n    MinterRoleRenounceTarget(target).renounceMinter();\\n  }\\n\\n  function renouncePauser(address target) public onlyOwner {\\n    PauserRoleRenounceTarget(target).renouncePauser();\\n  }\\n\\n  function renounceOwnership(address target) public onlyOwner {\\n    OwnableTarget(target).renounceOwnership();\\n  }\\n\\n  function transferOwnership(address target, address newOwner) public onlyOwner {\\n    OwnableTarget(target).transferOwnership(newOwner);\\n  }\\n\\n  //=====\\n\\n}\\n\",\"keccak256\":\"0xf95e14c4fc316020427679bb6c9ac14506c1133b40cac1ea976debc11ad2abb1\",\"license\":\"MIT\"},\"contracts/stake/managers/SeigManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { RefactorCoinageSnapshotI } from \\\"../interfaces/RefactorCoinageSnapshotI.sol\\\";\\n\\n/// @title\\n/// @notice\\ncontract SeigManagerStorage   {\\n\\n    //////////////////////////////\\n    // Constants\\n    //////////////////////////////\\n\\n    uint256 constant public RAY = 10 ** 27; // 1 RAY\\n    uint256 constant internal _DEFAULT_FACTOR = RAY;\\n\\n    uint256 constant public MAX_VALID_COMMISSION = RAY; // 1 RAY\\n    uint256 constant public MIN_VALID_COMMISSION = 10 ** 25; // 0.01 RAY\\n\\n    //////////////////////////////\\n    // Common contracts\\n    //////////////////////////////\\n\\n    address internal _registry;\\n    address internal _depositManager;\\n    address internal _powerton;\\n    address public dao;\\n\\n    //////////////////////////////\\n    // Token-related\\n    //////////////////////////////\\n\\n    // TON token contract\\n    address internal _ton;\\n\\n    // WTON token contract\\n    address internal _wton; // TODO: use mintable erc20!\\n\\n    // contract factory\\n    address public factory;\\n\\n    // track total deposits of each layer2.\\n    RefactorCoinageSnapshotI internal _tot;\\n\\n    // coinage token for each layer2.\\n    mapping (address => RefactorCoinageSnapshotI) internal _coinages;\\n\\n    // last commit block number for each layer2.\\n    mapping (address => uint256) internal _lastCommitBlock;\\n\\n    // total seigniorage per block\\n    uint256 internal _seigPerBlock;\\n\\n    // the block number when seigniorages are given\\n    uint256 internal _lastSeigBlock;\\n\\n    // block number when paused or unpaused\\n    uint256 internal _pausedBlock;\\n    uint256 internal _unpausedBlock;\\n\\n    // commission rates in RAY\\n    mapping (address => uint256) internal _commissionRates;\\n\\n    // whether commission is negative or not (default=possitive)\\n    mapping (address => bool) internal _isCommissionRateNegative;\\n\\n    // setting commissionrate delay\\n    uint256 public adjustCommissionDelay;\\n    mapping (address => uint256) public delayedCommissionBlock;\\n    mapping (address => uint256) public delayedCommissionRate;\\n    mapping (address => bool) public delayedCommissionRateNegative;\\n\\n    // minimum deposit amount\\n    uint256 public minimumAmount;\\n\\n    uint256 public powerTONSeigRate;\\n    uint256 public daoSeigRate;\\n    uint256 public relativeSeigRate;\\n\\n    uint256 public accRelativeSeig;\\n\\n    bool public paused;\\n}\\n\",\"keccak256\":\"0xb1ee6257c839c8d74ac49c8b7a3e91407034316cd037571ab75d431701106cad\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506158d080620000216000396000f3fe608060405234801561001057600080fd5b50600436106106725760003560e01c80636d70f7ae11610350578063ac893219116101c8578063d547741f11610104578063f35c89e8116100ad578063f850ffaa11610087578063f850ffaa14610e52578063f8951f4614610e65578063fa9789c814610e78578063fad8b32a14610e8b57600080fd5b8063f35c89e814610e1a578063f5b541a614610e22578063f822934814610e4957600080fd5b8063e4034832116100de578063e403483214610de1578063eeb4a9c814610df4578063f2fde38b14610e0757600080fd5b8063d547741f14610da5578063df7fbef014610db8578063e2fe8fd114610dc157600080fd5b8063c59f104611610171578063ce4cb8761161014b578063ce4cb87614610d50578063ce6c035514610d63578063cfbd488514610d6b578063d539139314610d7e57600080fd5b8063c59f104614610cf6578063cbfebe6214610d1f578063cc48b94714610d3f57600080fd5b8063b911135f116101a2578063b911135f14610cb1578063bb0c829814610cda578063c45a015514610ce357600080fd5b8063ac89321914610c83578063ac8a584a14610c96578063ae3458f814610ca957600080fd5b80638f32d59b11610297578063a0474ef511610240578063a415d8dc1161021a578063a415d8dc14610c28578063a7dcc85014610c3b578063aa271e1a14610c4d578063ac753a7a14610c6057600080fd5b8063a0474ef514610bfc578063a16d6aa714610c0f578063a217fddf14610c2057600080fd5b806398650275116102715780639865027514610bce5780639870d7fe14610bd65780639c877e4714610be957600080fd5b80638f32d59b14610b4b57806391d1485414610b82578063983b2d5614610bbb57600080fd5b80637b056c1b116102f95780638456cb59116102d35780638456cb5914610b205780638bf91dc414610b285780638d62d94914610b3a57600080fd5b80637b056c1b14610ad35780637b10399914610afc578063833a774f14610b0d57600080fd5b806375829def1161032a57806375829def14610aa5578063764a785614610ab85780637aeccce914610ac057600080fd5b80636d70f7ae14610a775780637048027514610a8a578063715018a614610a9d57600080fd5b80634162169f116104ee578063552033c41161042a5780635f40a349116103d35780636637b882116103ad5780636637b88214610a2d5780636c578c1d14610a405780636c7ac9d814610a535780636d43542114610a6457600080fd5b80635f40a34914610a0f5780636304a62414610a1757806363a8fd8914610a2057600080fd5b80635a16a416116104045780635a16a416146109c35780635c975abb146109ef5780635f112c68146109fc57600080fd5b8063552033c41461084257806358d00cd6146109b25780635998a8d7146109ba57600080fd5b806348c8577e116104975780634c75ab9c116104715780634c75ab9c1461092c57806350d2a2761461093f578063530adbb414610968578063550d01a31461098f57600080fd5b806348c8577e146108da5780634a393149146108ed5780634c063c191461090057600080fd5b80634224ed66116104c85780634224ed66146108a157806342623360146108b457806346a99fe7146108c757600080fd5b80634162169f14610868578063418130201461087b57806341eb24bb1461088e57600080fd5b80632f17250a116105bd578063389ed267116105665780633e832e1d116105405780633e832e1d146108155780633f4ba83a1461083a5780634123196f14610842578063412c6d501461085557600080fd5b8063389ed267146107c857806338bf3cfa146107ef5780633c4911731461080257600080fd5b806332053c991161059757806332053c991461079a57806332847953146107a257806336568abe146107b557600080fd5b80632f17250a146107615780632f2ff15d146107745780633092afd51461078757600080fd5b8063248a9ca31161061f57806325e90db4116105f957806325e90db41461073e5780632ab6f8db146107465780632d1bdec81461074e57600080fd5b8063248a9ca3146106ff57806324d7806c1461072257806325374a9a1461073557600080fd5b80631785f53c116106505780631785f53c146106c75780631cc47890146106da5780631e1f0b60146106ec57600080fd5b806301ffc9a71461067757806303e1cc271461069f5780630ceb6780146106b4575b600080fd5b61068a61068536600461534f565b610e9e565b60405190151581526020015b60405180910390f35b6106b26106ad366004615379565b610eaf565b005b6106b26106c23660046153a7565b610f49565b6106b26106d53660046153a7565b61107e565b6013545b604051908152602001610696565b61068a6106fa3660046153a7565b6110ae565b6106de61070d366004615379565b60009081526005602052604090206001015490565b61068a6107303660046153a7565b611168565b6106de601d5481565b6106b26111a8565b6106b26111d4565b6106b261075c366004615379565b6111fe565b6106de61076f3660046153a7565b611228565b6106b26107823660046153c4565b611313565b6106b26107953660046153a7565b61133d565b6012546106de565b6106b26107b03660046153f4565b61138c565b6106b26107c33660046153c4565b61150c565b6106de7ffcb9fcbfa83b897fb2d5cf4b58962164105c1e71489a37ef3ae0db3fdce576f681565b6106b26107fd3660046153a7565b611598565b6106b26108103660046153a7565b611613565b6008546001600160a01b03165b6040516001600160a01b039091168152602001610696565b6106b2611662565b6106de6b033b2e3c9fd0803ce800000081565b61068a61086336600461547c565b611782565b600954610822906001600160a01b031681565b6106b26108893660046153a7565b611ad8565b6106b261089c3660046153a7565b611b1f565b61068a6108af3660046154cb565b611b7f565b6106de6108c23660046153a7565b611dfb565b6106b26108d536600461550d565b611f96565b6106de6108e836600461547c565b612126565b61068a6108fb36600461547c565b61213b565b61082261090e3660046153a7565b6001600160a01b039081166000908152600e60205260409020541690565b6106de61093a366004615591565b6121f1565b61082261094d36600461534f565b6003602052600090815260409020546001600160a01b031681565b6106de7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab681565b61068a61099d3660046153a7565b60026020526000908152604090205460ff1681565b6106de612394565b6106de601c5481565b61068a6109d13660046153a7565b6001600160a01b031660009081526015602052604090205460ff1690565b601f5461068a9060ff1681565b6106b2610a0a3660046153a7565b6125d5565b6010546106de565b6106de601b5481565b60005461068a9060ff1681565b6106b2610a3b3660046153a7565b612635565b6106b2610a4e3660046153a7565b61267c565b6007546001600160a01b0316610822565b6106b2610a723660046155bd565b6126cb565b61068a610a853660046153a7565b61274f565b6106b2610a983660046153a7565b61278f565b6106b26127bf565b6106b2610ab33660046153a7565b6127ef565b61068a6128d8565b61068a610ace3660046155bd565b6130a4565b6106de610ae13660046153a7565b6001600160a01b031660009081526014602052604090205490565b6006546001600160a01b0316610822565b61068a610b1b3660046153a7565b613217565b6106b261337a565b6b033b2e3c9fd0803ce80000006106de565b600b546001600160a01b0316610822565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff1661068a565b61068a610b903660046153c4565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6106b2610bc93660046153a7565b61349d565b6106b26134ec565b6106b2610be43660046153a7565b613516565b6106b2610bf7366004615379565b613565565b6106de610c0a366004615379565b6135f6565b600d546001600160a01b0316610822565b6106de600081565b61068a610c363660046153a7565b613664565b6106de6a084595161401484a00000081565b61068a610c5b3660046153a7565b6136a4565b61068a610c6e3660046153a7565b60196020526000908152604090205460ff1681565b6106b2610c913660046153a7565b6136e4565b6106b2610ca43660046153a7565b61372b565b6106b261377a565b610822610cbf366004615379565b6001602052600090815260409020546001600160a01b031681565b6106de601a5481565b600c54610822906001600160a01b031681565b6106de610d043660046153a7565b6001600160a01b03166000908152600f602052604090205490565b6106de610d2d3660046153a7565b60176020526000908152604090205481565b600a546001600160a01b0316610822565b6106de610d5e3660046155bd565b613803565b6106de61385c565b6106b2610d793660046153a7565b6138ca565b6106de7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6106b2610db33660046153c4565b613915565b6106de60165481565b6106de610dcf3660046153a7565b60186020526000908152604090205481565b6106b2610def366004615379565b61393a565b6106b2610e02366004615379565b6139cb565b6106b2610e153660046153a7565b6139f5565b6011546106de565b6106de7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b6106de601e5481565b61068a610e6036600461547c565b613a23565b6106b2610e733660046155eb565b613eaa565b6106de610e863660046155bd565b613f8e565b6106b2610e993660046153a7565b61420e565b6000610ea98261425d565b92915050565b610eb833611168565b610edd5760405162461bcd60e51b8152600401610ed49061564d565b60405180910390fd5b600081118015610ef857506b033b2e3c9fd0803ce800000081105b610f445760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b601c55565b610f886040518060400160405280601d81526020017f6f6e6c794d696e7465724f7241646d696e206d73672e73656e6465722000000081525033614282565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d068546020526040902054610fc39060ff166142c7565b610fcc33611168565b8061100557503360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604090205460ff165b6110515760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f6e6c794d696e7465724f7241646d696e00000000000000000000006044820152606401610ed4565b61107b7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab682611313565b50565b61108733611168565b6110a35760405162461bcd60e51b8152600401610ed49061564d565b61107b60008261150c565b6000816001600160a01b031663764a78566040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190615690565b6111605760405162461bcd60e51b815260206004820152601660248201527f6661696c20757064617465536569676e696f72616765000000000000000000006044820152606401610ed4565b506001919050565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610ea9565b6111d27fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab63361150c565b565b6111d27f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c3361150c565b61120733611168565b6112235760405162461bcd60e51b8152600401610ed49061564d565b601655565b600080336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128d91906156ad565b6001600160a01b038481166000908152600e6020526040908190205490516370a0823160e01b8152838316600482015292935016906370a0823190602401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c91906156ca565b9392505050565b60008281526005602052604090206001015461132e81614308565b6113388383614312565b505050565b61134633611168565b6113625760405162461bcd60e51b8152600401610ed49061564d565b61107b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc98261150c565b61139533611168565b6113b15760405162461bcd60e51b8152600401610ed49061564d565b60005b818110156115065760008383838181106113d0576113d06156e3565b90506020020160208101906113e591906153a7565b604051634c1d96ab60e11b81526001600160a01b0387811660048301529192509082169063983b2d5690602401600060405180830381600087803b15801561142c57600080fd5b505af1158015611440573d6000803e3d6000fd5b50505050806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561147f57600080fd5b505af1158015611493573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0388811660048301528416925063f2fde38b9150602401600060405180830381600087803b1580156114da57600080fd5b505af11580156114ee573d6000803e3d6000fd5b505050505080806114fe9061570f565b9150506113b4565b50505050565b6001600160a01b038116331461158a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ed4565b61159482826143b4565b5050565b6115a133611168565b6115bd5760405162461bcd60e51b8152600401610ed49061564d565b806001600160a01b031663715018a66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b5050505050565b61161c33611168565b6116385760405162461bcd60e51b8152600401610ed49061564d565b61107b7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab682613915565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166116ec5760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610ed4565b601f5460ff1661173e5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ed4565b43601355601f805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b6007546000906001600160a01b031633146117df5760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610ed4565b6001600160a01b038085166000908152600e602052604090205485911661185f5760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b6118698585614437565b1561194e576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa1580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ee91906156ca565b6118f89190615728565b9050601a5481101561194c5760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610ed4565b505b600d546040516340c10f1960e01b81526001600160a01b03878116600483015260248201869052909116906340c10f19906044016020604051808303816000875af11580156119a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c59190615690565b506001600160a01b038581166000908152600e6020526040908190205490516340c10f1960e01b81528683166004820152602481018690529116906340c10f19906044016020604051808303816000875af1158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190615690565b506008546001600160a01b031615611acd57600854604051630412c6d560e41b81526001600160a01b0387811660048301528681166024830152604482018690529091169063412c6d5090606401600060405180830381600087803b158015611ab457600080fd5b505af1158015611ac8573d6000803e3d6000fd5b505050505b506001949350505050565b611ae133611168565b611afd5760405162461bcd60e51b8152600401610ed49061564d565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b611b2833611168565b611b445760405162461bcd60e51b8152600401610ed49061564d565b806001600160a01b0316636ef8d66d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115f857600080fd5b60065460009084906001600160a01b0316331480611c0f5750806001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfa91906156ad565b6001600160a01b0316336001600160a01b0316145b611c5b5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f6e6c7952656769737472794f724f70657261746f720000000000006044820152606401610ed4565b831580611c8a5750836a084595161401484a00000011158015611c8a57506b033b2e3c9fd0803ce80000008411155b611d0a5760405162461bcd60e51b8152602060048201526044602482018190527f536569674d616e616765723a20636f6d6d697373696f6e2072617465206d7573908201527f742062652030206f72206265747765656e20312052415920616e6420302e30316064820152632052415960e01b608482015260a401610ed4565b6001600160a01b038516600090815260146020526040812054601654909103611d63576001600160a01b038616600090815260146020908152604080832088905560159091529020805460ff1916851515179055611dab565b601654611d709043615728565b6001600160a01b038716600090815260176020908152604080832093909355601881528282208890556019905220805460ff19168515151790555b60408051828152602081018790526001600160a01b038816917f11841078e38c91feada06e1f8ded3697ab2dadc2583c52b14109b82ccd4f77d7910160405180910390a250600195945050505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7591906156ca565b905060005b81811015611f8f5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef091906156ad565b6001600160a01b038181166000908152600e6020526040908190205490516370a0823160e01b8152888316600482015292935016906370a0823190602401602060405180830381865afa158015611f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6f91906156ca565b611f799085615728565b9350508080611f879061570f565b915050611e7a565b5050919050565b600a546001600160a01b0316158015611faf5750601154155b611ffb5760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610ed4565b600a80546001600160a01b03808a166001600160a01b031992831617909255600b805489841690831617905560068054888416908316179055600780548784169083161790556010859055600c8054928516929091168217905560408051631dd70c0360e21b815290516000929163775c300c916004828101926020929190829003018187875af1158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b891906156ad565b90506001600160a01b0381166120fb5760405162461bcd60e51b81526020600482015260086024820152671e995c9bc81d1bdd60c21b6044820152606401610ed4565b600d80546001600160a01b0319166001600160a01b0392909216919091179055601155505050505050565b60006121338484846144b7565b949350505050565b600a546000906001600160a01b03163314806121615750600b546001600160a01b031633145b6121d35760405162461bcd60e51b815260206004820152603160248201527f536569674d616e616765723a206f6e6c7920544f4e206f722057544f4e20636160448201527f6e2063616c6c206f6e5472616e736665720000000000000000000000000000006064820152608401610ed4565b601f5460ff166121e7576121e56145fe565b505b5060019392505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa158015612247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226b91906156ca565b905060005b8181101561238c5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e691906156ad565b6001600160a01b038181166000908152600e60205260409081902054905163277166bf60e11b81528983166004820152602481018990529293501690634ee2cd7e90604401602060405180830381865afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c91906156ca565b6123769085615728565b93505080806123849061570f565b915050612270565b505092915050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e91906156ca565b905060005b8181101561251c5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015612465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248991906156ad565b6001600160a01b038082166000908152600e60209081526040808320548151634b88b8ad60e11b8152915195965090931693639711715a936004808201949183900301908290875af11580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250791906156ca565b505080806125149061570f565b915050612413565b50600d60009054906101000a90046001600160a01b03166001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612572573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259691906156ca565b91507fac3d68540f9902349c72a28dc187ad15b504d68182767a2b00a3db86880507ba826040516125c991815260200190565b60405180910390a15090565b6125de33611168565b6125fa5760405162461bcd60e51b8152600401610ed49061564d565b806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115f857600080fd5b61263e33611168565b61265a5760405162461bcd60e51b8152600401610ed49061564d565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b61268533611168565b6126a15760405162461bcd60e51b8152600401610ed49061564d565b61107b7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab68261150c565b6126d433611168565b6126f05760405162461bcd60e51b8152600401610ed49061564d565b60405163f2fde38b60e01b81526001600160a01b03828116600483015283169063f2fde38b90602401600060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b505050505050565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff16610ea9565b61279833611168565b6127b45760405162461bcd60e51b8152600401610ed49061564d565b61107b600082611313565b6127c833611168565b6127e45760405162461bcd60e51b8152600401610ed49061564d565b6111d260003361150c565b6127f833611168565b6128145760405162461bcd60e51b8152600401610ed49061564d565b6001600160a01b03811661286a5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610ed4565b6001600160a01b03811633036128c25760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610ed4565b6128cd600082611313565b61107b60003361150c565b336000818152600e60205260408120549091906001600160a01b03166129575760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b601f5460ff161561296a57600191505090565b60115443116129bb5760405162461bcd60e51b815260206004820152601b60248201527f6c617374207365696720626c6f636b206973206e6f74207061737400000000006044820152606401610ed4565b60006129c633611228565b9050601a54811015612a1a5760405162461bcd60e51b815260206004820152601d60248201527f6d696e696d756d416d6f756e7420697320696e73756666696369656e740000006044820152606401610ed4565b336000908152600e60209081526040808320548151630a9ee07f60e31b815291516001600160a01b03909116939284926354f703f892600480830193928290030181865afa158015612a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9491906156ca565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0f91906156ca565b9050612b196145fe565b50336000908152600f6020908152604080832043905580516318160ddd60e01b815290516001600160a01b038716926318160ddd92600480820193918290030181865afa158015612b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9291906156ca565b600d546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0491906156ca565b9050808210612c465760405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a2600197505050505050505090565b6000612c52838361573b565b90506000336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb891906156ad565b336000818152601560205260408120549293509160ff1690612cde908a88878588614d00565b8093508196505050886001600160a01b031663817e9d31612d6188888d6001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5c91906156ca565b614f1b565b6040518263ffffffff1660e01b8152600401612d7f91815260200190565b6020604051808303816000875af1158015612d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc29190615690565b508115612eab578015612e365760405163079cc67960e41b81526001600160a01b038481166004830152602482018490528a16906379cc679090604401600060405180830381600087803b158015612e1957600080fd5b505af1158015612e2d573d6000803e3d6000fd5b50505050612eab565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490528a16906340c10f19906044016020604051808303816000875af1158015612e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea99190615690565b505b6000896001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0f91906156ca565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8a91906156ca565b600b546007546040516340c10f1960e01b81526001600160a01b039182166004820152602481018a905292935016906340c10f19906044016020604051808303816000875af1158015612fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130059190615690565b5060405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a260408051438152602081018a9052908101889052606081018a9052608081018b905260a0810182905260c0810183905233907fc93b8f82f3855a72b1cd7998a29e27df8650ab3c2b172a741887d950dbbad40d9060e00160405180910390a260019d505050505050505050505050505090565b3360009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff166131325760405162461bcd60e51b815260206004820152602760248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f74206120636861604482015266363632b733b2b960c91b6064820152608401610ed4565b6001600160a01b038084166000908152600e60205260409020548491166131b25760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b6040516306394c9b60e01b81526001600160a01b0384811660048301528516906306394c9b90602401600060405180830381600087803b1580156131f557600080fd5b505af1158015613209573d6000803e3d6000fd5b506001979650505050505050565b6006546000906001600160a01b031633146132745760405162461bcd60e51b815260206004820152601060248201527f6e6f74206f6e6c795265676973747279000000000000000000000000000000006044820152606401610ed4565b6001600160a01b038281166000908152600e60205260409020541661116057600c5460408051631dd70c0360e21b815290516000926001600160a01b03169163775c300c916004808301926020929190829003018187875af11580156132de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330291906156ad565b6001600160a01b038481166000818152600f60209081526040808320439055600e82529182902080546001600160a01b03191694861694851790559051928352929350917f124cac1e701d08d642237ad795ddd275670e12f2cd956a26709721c68084c2b2910160405180910390a250506001919050565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166134045760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610ed4565b601f5460ff16156134575760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ed4565b43601255601f805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001611778565b905090565b6134a633611168565b6134c25760405162461bcd60e51b8152600401610ed49061564d565b61107b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc982611313565b6111d27ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc93361150c565b61351f33611168565b61353b5760405162461bcd60e51b8152600401610ed49061564d565b61107b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82611313565b61356e33611168565b61358a5760405162461bcd60e51b8152600401610ed49061564d565b6000811180156135a557506b033b2e3c9fd0803ce800000081105b6135f15760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b601b55565b600d54604051630981b24d60e41b8152600481018390526000916001600160a01b03169063981b24d090602401602060405180830381865afa158015613640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea991906156ca565b6001600160a01b03811660009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff16610ea9565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610ea9565b6136ed33611168565b6137095760405162461bcd60e51b8152600401610ed49061564d565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b61373433611168565b6137505760405162461bcd60e51b8152600401610ed49061564d565b61107b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c8261150c565b61378333611168565b61379f5760405162461bcd60e51b8152600401610ed49061564d565b600b60009054906101000a90046001600160a01b03166001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156137ef57600080fd5b505af1158015611506573d6000803e3d6000fd5b6001600160a01b038281166000908152600e60205260408082205490516370a0823160e01b81528484166004820152919216906370a0823190602401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b600d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156138a6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349891906156ca565b6138d333611168565b6138ef5760405162461bcd60e51b8152600401610ed49061564d565b61107b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b60008281526005602052604090206001015461393081614308565b61133883836143b4565b61394333611168565b61395f5760405162461bcd60e51b8152600401610ed49061564d565b60008111801561397a57506b033b2e3c9fd0803ce800000081105b6139c65760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b601d55565b6139d433611168565b6139f05760405162461bcd60e51b8152600401610ed49061564d565b601a55565b6139fe33611168565b613a1a5760405162461bcd60e51b8152600401610ed49061564d565b61107b816127ef565b6007546000906001600160a01b03163314613a805760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610ed4565b6001600160a01b038085166000908152600e6020526040902054859116613b005760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b6001600160a01b038581166000908152600e6020526040908190205490516370a0823160e01b81528683166004820152859291909116906370a0823190602401602060405180830381865afa158015613b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8191906156ca565b1015613bf55760405162461bcd60e51b815260206004820152602c60248201527f536569674d616e616765723a20696e73756666696369616e742062616c616e6360448201527f6520746f20756e7374616b6500000000000000000000000000000000000000006064820152608401610ed4565b613bff8585614437565b15613ce4576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa158015613c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8491906156ca565b613c8e919061573b565b9050601a54811015613ce25760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610ed4565b505b6000613cf18686866144b7565b600d549091506001600160a01b03166379cc679087613d108488615728565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613d5657600080fd5b505af1158015613d6a573d6000803e3d6000fd5b505050506001600160a01b038681166000908152600e60205260409081902054905163079cc67960e41b81528783166004820152602481018790529116906379cc679090604401600060405180830381600087803b158015613dcb57600080fd5b505af1158015613ddf573d6000803e3d6000fd5b50506008546001600160a01b0316159150613e65905057600854604051637c287fd560e11b81526001600160a01b0388811660048301528781166024830152604482018790529091169063f850ffaa90606401600060405180830381600087803b158015613e4c57600080fd5b505af1158015613e60573d6000803e3d6000fd5b505050505b60408051858152602081018390527f650f673bb96a43afff4620ecc3f3e38e0cbfddebde9894e951ba2ceff7472f60910160405180910390a150600195945050505050565b613eb333611168565b613ecf5760405162461bcd60e51b8152600401610ed49061564d565b6b033b2e3c9fd0803ce8000000601d54601c54601b54613eef9190615728565b613ef99190615728565b1115613f475760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b600880546001600160a01b039889166001600160a01b0319918216179091556009805497909816961695909517909555601b92909255601c55601d55601691909155601a55565b6001600160a01b038083166000908152600e60209081526040808320548151630a9ee07f60e31b8152915193941692849284926354f703f892600480830193928290030181865afa158015613fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400b91906156ca565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561404d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407191906156ca565b600d546040516370a0823160e01b81526001600160a01b038981166004830152929350600092909116906370a0823190602401602060405180830381865afa1580156140c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e591906156ca565b905060006140f4838386614f1b565b6040516370a0823160e01b81526001600160a01b03898116600483015291925060009161417891614172918916906370a0823190602401602060405180830381865afa158015614148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061416c91906156ca565b87614f2c565b83614f62565b6001600160a01b038a81166000908152600e6020526040908190205490516370a0823160e01b81528b8316600482015292935016906370a0823190602401602060405180830381865afa1580156141d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f791906156ca565b614201908261573b565b9998505050505050505050565b61421733611168565b6142335760405162461bcd60e51b8152600401610ed49061564d565b61107b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82613915565b60006001600160e01b03198216637965db0b60e01b1480610ea95750610ea982614f95565b611594828260405160240161429892919061579e565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052614fd1565b604051811515602482015261107b9060440160408051601f198184030181529190526020810180516001600160e01b03166332458eed60e01b179052614fd1565b61107b8133614fda565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166115945760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556143703390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16156115945760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000826001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015614477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061449b91906156ad565b6001600160a01b0316826001600160a01b031614905092915050565b6001600160a01b038084166000908152600e602090815260408083205481516318160ddd60e01b81529151939485949116926318160ddd92600480820193918290030181865afa15801561450f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061453391906156ca565b600d546040516370a0823160e01b81526001600160a01b038881166004830152929350600092909116906370a0823190602401602060405180830381865afa158015614583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a791906156ca565b905080821180156145c85750670de0b6b3a76400006145c6828461573b565b105b156145d85760009250505061130c565b6145f46145ee6145e8848461573b565b86614f62565b83614f2c565b9695505050505050565b6000601154431161460f5750600090565b600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468691906156ca565b600003614697575043601155600090565b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061471191906156ca565b9150600060105461472061504f565b61472a91906157c9565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a591906156ca565b600a54600b546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa1580156147f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061481591906156ca565b600a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061488c91906156ca565b614896919061573b565b6148a490633b9aca006157c9565b6148ae9190615728565b905060006149356145ee84600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561490c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061493091906156ca565b614f62565b9050600061494e614946838661573b565b601d54614f62565b90508061495b8388615728565b6149659190615728565b43601155600d5460408051630a9ee07f60e31b815290519297506001600160a01b039091169163817e9d31916149c5918a918a9186916354f703f89160048083019260209291908290030181865afa158015612d38573d6000803e3d6000fd5b6040518263ffffffff1660e01b81526004016149e391815260200190565b6020604051808303816000875af1158015614a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a269190615690565b50600d54604080516318160ddd60e01b815290517f41a79a497d1457df24c25ab99f22349ae9aef4468429f0a781216e8dcf80c628926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015614a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab491906156ca565b604080519182526020820186905281018890526060810187905260800160405180910390a16000614ae5838661573b565b600854909150600090819081906001600160a01b031615614be757614b0c84601b54614f62565b600b546008546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292955016906340c10f19906044016020604051808303816000875af1158015614b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b879190615690565b5060085460405163027aa37b60e01b8152600481018590526001600160a01b039091169063027aa37b90602401600060405180830381600087803b158015614bce57600080fd5b505af1158015614be2573d6000803e3d6000fd5b505050505b6009546001600160a01b031615614c8157614c0484601c54614f62565b600b546009546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292945016906340c10f19906044016020604051808303816000875af1158015614c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c7f9190615690565b505b601d5415614c9e5784905080601e54614c9a9190615728565b601e555b6040805189815260208101889052908101859052606081018490526080810182905233907f0264534168fa7304ade59fc89758924d2288c7dcfd242dd680b668c80449c2829060a00160405180910390a260019a505050505050505050505090565b6001600160a01b03861660009081526017602052604081205481904310801590614d4157506001600160a01b03881660009081526017602052604090205415155b15614d95576001600160a01b0388166000908152601860209081526040808320546014835281842055601982528083205460158352818420805460ff191660ff909216151591909117905560179091528120555b33600090815260146020526040902054614daf8688615728565b925080600003614dbf5750614f10565b84614de257614dce8682614f62565b9150614dda828461573b565b925050614f10565b86600003614df05750614f10565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908a16906370a0823190602401602060405180830381865afa158015614e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e5e91906156ca565b905080600003614e6f575050614f10565b6000614e7b828a614f2c565b9050614e90614e8a8983614f62565b84614f62565b935060006b033b2e3c9fd0803ce80000008214614ecb57614ec685614ec1846b033b2e3c9fd0803ce800000061573b565b614f2c565b614ecd565b845b90506b033b2e3c9fd0803ce80000008214614efb57614eec8183614f62565b614ef69086615728565b614efd565b845b9450614f098187615728565b9550505050505b965096945050505050565b6000612133614f2a8484614f62565b855b600081614f58614f48856b033b2e3c9fd0803ce80000006150a5565b614f536002866157e0565b615115565b61130c91906157e0565b60006b033b2e3c9fd0803ce8000000614f58614f7e85856150a5565b614f5360026b033b2e3c9fd0803ce80000006157e0565b60006301ffc9a760e01b6001600160e01b031983161480610ea95750506001600160e01b03191660009081526004602052604090205460ff1690565b61107b81615173565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166115945761500d81615194565b6150188360206151a6565b604051602001615029929190615802565b60408051601f198184030181529082905262461bcd60e51b8252610ed491600401615883565b601f5460009060ff161561506257600080fd5b600060115443615072919061573b565b9050601154601354101561508557919050565b601254601354615095919061573b565b61509f908261573b565b91505090565b60008115806150c9575082826150bb81836157c9565b92506150c790836157e0565b145b610ea95760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610ed4565b6000826151228382615728565b9150811015610ea95760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610ed4565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6060610ea96001600160a01b03831660145b606060006151b58360026157c9565b6151c0906002615728565b67ffffffffffffffff8111156151d8576151d8615896565b6040519080825280601f01601f191660200182016040528015615202576020820181803683370190505b509050600360fc1b8160008151811061521d5761521d6156e3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061524c5761524c6156e3565b60200101906001600160f81b031916908160001a90535060006152708460026157c9565b61527b906001615728565b90505b6001811115615300577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106152bc576152bc6156e3565b1a60f81b8282815181106152d2576152d26156e3565b60200101906001600160f81b031916908160001a90535060049490941c936152f9816158ac565b905061527e565b50831561130c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ed4565b60006020828403121561536157600080fd5b81356001600160e01b03198116811461130c57600080fd5b60006020828403121561538b57600080fd5b5035919050565b6001600160a01b038116811461107b57600080fd5b6000602082840312156153b957600080fd5b813561130c81615392565b600080604083850312156153d757600080fd5b8235915060208301356153e981615392565b809150509250929050565b60008060006040848603121561540957600080fd5b833561541481615392565b9250602084013567ffffffffffffffff8082111561543157600080fd5b818601915086601f83011261544557600080fd5b81358181111561545457600080fd5b8760208260051b850101111561546957600080fd5b6020830194508093505050509250925092565b60008060006060848603121561549157600080fd5b833561549c81615392565b925060208401356154ac81615392565b929592945050506040919091013590565b801515811461107b57600080fd5b6000806000606084860312156154e057600080fd5b83356154eb81615392565b9250602084013591506040840135615502816154bd565b809150509250925092565b600080600080600080600060e0888a03121561552857600080fd5b873561553381615392565b9650602088013561554381615392565b9550604088013561555381615392565b9450606088013561556381615392565b93506080880135925060a088013561557a81615392565b8092505060c0880135905092959891949750929550565b600080604083850312156155a457600080fd5b82356155af81615392565b946020939093013593505050565b600080604083850312156155d057600080fd5b82356155db81615392565b915060208301356153e981615392565b600080600080600080600060e0888a03121561560657600080fd5b873561561181615392565b9650602088013561562181615392565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b6000602082840312156156a257600080fd5b815161130c816154bd565b6000602082840312156156bf57600080fd5b815161130c81615392565b6000602082840312156156dc57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615721576157216156f9565b5060010190565b80820180821115610ea957610ea96156f9565b81810381811115610ea957610ea96156f9565b60005b83811015615769578181015183820152602001615751565b50506000910152565b6000815180845261578a81602086016020860161574e565b601f01601f19169290920160200192915050565b6040815260006157b16040830185615772565b90506001600160a01b03831660208301529392505050565b8082028115828204841417610ea957610ea96156f9565b6000826157fd57634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161583a81601785016020880161574e565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161587781602884016020880161574e565b01602801949350505050565b60208152600061130c6020830184615772565b634e487b7160e01b600052604160045260246000fd5b6000816158bb576158bb6156f9565b50600019019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106106725760003560e01c80636d70f7ae11610350578063ac893219116101c8578063d547741f11610104578063f35c89e8116100ad578063f850ffaa11610087578063f850ffaa14610e52578063f8951f4614610e65578063fa9789c814610e78578063fad8b32a14610e8b57600080fd5b8063f35c89e814610e1a578063f5b541a614610e22578063f822934814610e4957600080fd5b8063e4034832116100de578063e403483214610de1578063eeb4a9c814610df4578063f2fde38b14610e0757600080fd5b8063d547741f14610da5578063df7fbef014610db8578063e2fe8fd114610dc157600080fd5b8063c59f104611610171578063ce4cb8761161014b578063ce4cb87614610d50578063ce6c035514610d63578063cfbd488514610d6b578063d539139314610d7e57600080fd5b8063c59f104614610cf6578063cbfebe6214610d1f578063cc48b94714610d3f57600080fd5b8063b911135f116101a2578063b911135f14610cb1578063bb0c829814610cda578063c45a015514610ce357600080fd5b8063ac89321914610c83578063ac8a584a14610c96578063ae3458f814610ca957600080fd5b80638f32d59b11610297578063a0474ef511610240578063a415d8dc1161021a578063a415d8dc14610c28578063a7dcc85014610c3b578063aa271e1a14610c4d578063ac753a7a14610c6057600080fd5b8063a0474ef514610bfc578063a16d6aa714610c0f578063a217fddf14610c2057600080fd5b806398650275116102715780639865027514610bce5780639870d7fe14610bd65780639c877e4714610be957600080fd5b80638f32d59b14610b4b57806391d1485414610b82578063983b2d5614610bbb57600080fd5b80637b056c1b116102f95780638456cb59116102d35780638456cb5914610b205780638bf91dc414610b285780638d62d94914610b3a57600080fd5b80637b056c1b14610ad35780637b10399914610afc578063833a774f14610b0d57600080fd5b806375829def1161032a57806375829def14610aa5578063764a785614610ab85780637aeccce914610ac057600080fd5b80636d70f7ae14610a775780637048027514610a8a578063715018a614610a9d57600080fd5b80634162169f116104ee578063552033c41161042a5780635f40a349116103d35780636637b882116103ad5780636637b88214610a2d5780636c578c1d14610a405780636c7ac9d814610a535780636d43542114610a6457600080fd5b80635f40a34914610a0f5780636304a62414610a1757806363a8fd8914610a2057600080fd5b80635a16a416116104045780635a16a416146109c35780635c975abb146109ef5780635f112c68146109fc57600080fd5b8063552033c41461084257806358d00cd6146109b25780635998a8d7146109ba57600080fd5b806348c8577e116104975780634c75ab9c116104715780634c75ab9c1461092c57806350d2a2761461093f578063530adbb414610968578063550d01a31461098f57600080fd5b806348c8577e146108da5780634a393149146108ed5780634c063c191461090057600080fd5b80634224ed66116104c85780634224ed66146108a157806342623360146108b457806346a99fe7146108c757600080fd5b80634162169f14610868578063418130201461087b57806341eb24bb1461088e57600080fd5b80632f17250a116105bd578063389ed267116105665780633e832e1d116105405780633e832e1d146108155780633f4ba83a1461083a5780634123196f14610842578063412c6d501461085557600080fd5b8063389ed267146107c857806338bf3cfa146107ef5780633c4911731461080257600080fd5b806332053c991161059757806332053c991461079a57806332847953146107a257806336568abe146107b557600080fd5b80632f17250a146107615780632f2ff15d146107745780633092afd51461078757600080fd5b8063248a9ca31161061f57806325e90db4116105f957806325e90db41461073e5780632ab6f8db146107465780632d1bdec81461074e57600080fd5b8063248a9ca3146106ff57806324d7806c1461072257806325374a9a1461073557600080fd5b80631785f53c116106505780631785f53c146106c75780631cc47890146106da5780631e1f0b60146106ec57600080fd5b806301ffc9a71461067757806303e1cc271461069f5780630ceb6780146106b4575b600080fd5b61068a61068536600461534f565b610e9e565b60405190151581526020015b60405180910390f35b6106b26106ad366004615379565b610eaf565b005b6106b26106c23660046153a7565b610f49565b6106b26106d53660046153a7565b61107e565b6013545b604051908152602001610696565b61068a6106fa3660046153a7565b6110ae565b6106de61070d366004615379565b60009081526005602052604090206001015490565b61068a6107303660046153a7565b611168565b6106de601d5481565b6106b26111a8565b6106b26111d4565b6106b261075c366004615379565b6111fe565b6106de61076f3660046153a7565b611228565b6106b26107823660046153c4565b611313565b6106b26107953660046153a7565b61133d565b6012546106de565b6106b26107b03660046153f4565b61138c565b6106b26107c33660046153c4565b61150c565b6106de7ffcb9fcbfa83b897fb2d5cf4b58962164105c1e71489a37ef3ae0db3fdce576f681565b6106b26107fd3660046153a7565b611598565b6106b26108103660046153a7565b611613565b6008546001600160a01b03165b6040516001600160a01b039091168152602001610696565b6106b2611662565b6106de6b033b2e3c9fd0803ce800000081565b61068a61086336600461547c565b611782565b600954610822906001600160a01b031681565b6106b26108893660046153a7565b611ad8565b6106b261089c3660046153a7565b611b1f565b61068a6108af3660046154cb565b611b7f565b6106de6108c23660046153a7565b611dfb565b6106b26108d536600461550d565b611f96565b6106de6108e836600461547c565b612126565b61068a6108fb36600461547c565b61213b565b61082261090e3660046153a7565b6001600160a01b039081166000908152600e60205260409020541690565b6106de61093a366004615591565b6121f1565b61082261094d36600461534f565b6003602052600090815260409020546001600160a01b031681565b6106de7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab681565b61068a61099d3660046153a7565b60026020526000908152604090205460ff1681565b6106de612394565b6106de601c5481565b61068a6109d13660046153a7565b6001600160a01b031660009081526015602052604090205460ff1690565b601f5461068a9060ff1681565b6106b2610a0a3660046153a7565b6125d5565b6010546106de565b6106de601b5481565b60005461068a9060ff1681565b6106b2610a3b3660046153a7565b612635565b6106b2610a4e3660046153a7565b61267c565b6007546001600160a01b0316610822565b6106b2610a723660046155bd565b6126cb565b61068a610a853660046153a7565b61274f565b6106b2610a983660046153a7565b61278f565b6106b26127bf565b6106b2610ab33660046153a7565b6127ef565b61068a6128d8565b61068a610ace3660046155bd565b6130a4565b6106de610ae13660046153a7565b6001600160a01b031660009081526014602052604090205490565b6006546001600160a01b0316610822565b61068a610b1b3660046153a7565b613217565b6106b261337a565b6b033b2e3c9fd0803ce80000006106de565b600b546001600160a01b0316610822565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff1661068a565b61068a610b903660046153c4565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6106b2610bc93660046153a7565b61349d565b6106b26134ec565b6106b2610be43660046153a7565b613516565b6106b2610bf7366004615379565b613565565b6106de610c0a366004615379565b6135f6565b600d546001600160a01b0316610822565b6106de600081565b61068a610c363660046153a7565b613664565b6106de6a084595161401484a00000081565b61068a610c5b3660046153a7565b6136a4565b61068a610c6e3660046153a7565b60196020526000908152604090205460ff1681565b6106b2610c913660046153a7565b6136e4565b6106b2610ca43660046153a7565b61372b565b6106b261377a565b610822610cbf366004615379565b6001602052600090815260409020546001600160a01b031681565b6106de601a5481565b600c54610822906001600160a01b031681565b6106de610d043660046153a7565b6001600160a01b03166000908152600f602052604090205490565b6106de610d2d3660046153a7565b60176020526000908152604090205481565b600a546001600160a01b0316610822565b6106de610d5e3660046155bd565b613803565b6106de61385c565b6106b2610d793660046153a7565b6138ca565b6106de7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6106b2610db33660046153c4565b613915565b6106de60165481565b6106de610dcf3660046153a7565b60186020526000908152604090205481565b6106b2610def366004615379565b61393a565b6106b2610e02366004615379565b6139cb565b6106b2610e153660046153a7565b6139f5565b6011546106de565b6106de7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b6106de601e5481565b61068a610e6036600461547c565b613a23565b6106b2610e733660046155eb565b613eaa565b6106de610e863660046155bd565b613f8e565b6106b2610e993660046153a7565b61420e565b6000610ea98261425d565b92915050565b610eb833611168565b610edd5760405162461bcd60e51b8152600401610ed49061564d565b60405180910390fd5b600081118015610ef857506b033b2e3c9fd0803ce800000081105b610f445760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b601c55565b610f886040518060400160405280601d81526020017f6f6e6c794d696e7465724f7241646d696e206d73672e73656e6465722000000081525033614282565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d068546020526040902054610fc39060ff166142c7565b610fcc33611168565b8061100557503360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604090205460ff165b6110515760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f6e6c794d696e7465724f7241646d696e00000000000000000000006044820152606401610ed4565b61107b7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab682611313565b50565b61108733611168565b6110a35760405162461bcd60e51b8152600401610ed49061564d565b61107b60008261150c565b6000816001600160a01b031663764a78566040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190615690565b6111605760405162461bcd60e51b815260206004820152601660248201527f6661696c20757064617465536569676e696f72616765000000000000000000006044820152606401610ed4565b506001919050565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610ea9565b6111d27fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab63361150c565b565b6111d27f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c3361150c565b61120733611168565b6112235760405162461bcd60e51b8152600401610ed49061564d565b601655565b600080336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128d91906156ad565b6001600160a01b038481166000908152600e6020526040908190205490516370a0823160e01b8152838316600482015292935016906370a0823190602401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c91906156ca565b9392505050565b60008281526005602052604090206001015461132e81614308565b6113388383614312565b505050565b61134633611168565b6113625760405162461bcd60e51b8152600401610ed49061564d565b61107b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc98261150c565b61139533611168565b6113b15760405162461bcd60e51b8152600401610ed49061564d565b60005b818110156115065760008383838181106113d0576113d06156e3565b90506020020160208101906113e591906153a7565b604051634c1d96ab60e11b81526001600160a01b0387811660048301529192509082169063983b2d5690602401600060405180830381600087803b15801561142c57600080fd5b505af1158015611440573d6000803e3d6000fd5b50505050806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561147f57600080fd5b505af1158015611493573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0388811660048301528416925063f2fde38b9150602401600060405180830381600087803b1580156114da57600080fd5b505af11580156114ee573d6000803e3d6000fd5b505050505080806114fe9061570f565b9150506113b4565b50505050565b6001600160a01b038116331461158a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ed4565b61159482826143b4565b5050565b6115a133611168565b6115bd5760405162461bcd60e51b8152600401610ed49061564d565b806001600160a01b031663715018a66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b5050505050565b61161c33611168565b6116385760405162461bcd60e51b8152600401610ed49061564d565b61107b7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab682613915565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166116ec5760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610ed4565b601f5460ff1661173e5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ed4565b43601355601f805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b6007546000906001600160a01b031633146117df5760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610ed4565b6001600160a01b038085166000908152600e602052604090205485911661185f5760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b6118698585614437565b1561194e576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa1580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ee91906156ca565b6118f89190615728565b9050601a5481101561194c5760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610ed4565b505b600d546040516340c10f1960e01b81526001600160a01b03878116600483015260248201869052909116906340c10f19906044016020604051808303816000875af11580156119a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c59190615690565b506001600160a01b038581166000908152600e6020526040908190205490516340c10f1960e01b81528683166004820152602481018690529116906340c10f19906044016020604051808303816000875af1158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190615690565b506008546001600160a01b031615611acd57600854604051630412c6d560e41b81526001600160a01b0387811660048301528681166024830152604482018690529091169063412c6d5090606401600060405180830381600087803b158015611ab457600080fd5b505af1158015611ac8573d6000803e3d6000fd5b505050505b506001949350505050565b611ae133611168565b611afd5760405162461bcd60e51b8152600401610ed49061564d565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b611b2833611168565b611b445760405162461bcd60e51b8152600401610ed49061564d565b806001600160a01b0316636ef8d66d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115f857600080fd5b60065460009084906001600160a01b0316331480611c0f5750806001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfa91906156ad565b6001600160a01b0316336001600160a01b0316145b611c5b5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f6e6c7952656769737472794f724f70657261746f720000000000006044820152606401610ed4565b831580611c8a5750836a084595161401484a00000011158015611c8a57506b033b2e3c9fd0803ce80000008411155b611d0a5760405162461bcd60e51b8152602060048201526044602482018190527f536569674d616e616765723a20636f6d6d697373696f6e2072617465206d7573908201527f742062652030206f72206265747765656e20312052415920616e6420302e30316064820152632052415960e01b608482015260a401610ed4565b6001600160a01b038516600090815260146020526040812054601654909103611d63576001600160a01b038616600090815260146020908152604080832088905560159091529020805460ff1916851515179055611dab565b601654611d709043615728565b6001600160a01b038716600090815260176020908152604080832093909355601881528282208890556019905220805460ff19168515151790555b60408051828152602081018790526001600160a01b038816917f11841078e38c91feada06e1f8ded3697ab2dadc2583c52b14109b82ccd4f77d7910160405180910390a250600195945050505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7591906156ca565b905060005b81811015611f8f5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef091906156ad565b6001600160a01b038181166000908152600e6020526040908190205490516370a0823160e01b8152888316600482015292935016906370a0823190602401602060405180830381865afa158015611f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6f91906156ca565b611f799085615728565b9350508080611f879061570f565b915050611e7a565b5050919050565b600a546001600160a01b0316158015611faf5750601154155b611ffb5760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610ed4565b600a80546001600160a01b03808a166001600160a01b031992831617909255600b805489841690831617905560068054888416908316179055600780548784169083161790556010859055600c8054928516929091168217905560408051631dd70c0360e21b815290516000929163775c300c916004828101926020929190829003018187875af1158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b891906156ad565b90506001600160a01b0381166120fb5760405162461bcd60e51b81526020600482015260086024820152671e995c9bc81d1bdd60c21b6044820152606401610ed4565b600d80546001600160a01b0319166001600160a01b0392909216919091179055601155505050505050565b60006121338484846144b7565b949350505050565b600a546000906001600160a01b03163314806121615750600b546001600160a01b031633145b6121d35760405162461bcd60e51b815260206004820152603160248201527f536569674d616e616765723a206f6e6c7920544f4e206f722057544f4e20636160448201527f6e2063616c6c206f6e5472616e736665720000000000000000000000000000006064820152608401610ed4565b601f5460ff166121e7576121e56145fe565b505b5060019392505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa158015612247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226b91906156ca565b905060005b8181101561238c5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e691906156ad565b6001600160a01b038181166000908152600e60205260409081902054905163277166bf60e11b81528983166004820152602481018990529293501690634ee2cd7e90604401602060405180830381865afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c91906156ca565b6123769085615728565b93505080806123849061570f565b915050612270565b505092915050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e91906156ca565b905060005b8181101561251c5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015612465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248991906156ad565b6001600160a01b038082166000908152600e60209081526040808320548151634b88b8ad60e11b8152915195965090931693639711715a936004808201949183900301908290875af11580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250791906156ca565b505080806125149061570f565b915050612413565b50600d60009054906101000a90046001600160a01b03166001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612572573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259691906156ca565b91507fac3d68540f9902349c72a28dc187ad15b504d68182767a2b00a3db86880507ba826040516125c991815260200190565b60405180910390a15090565b6125de33611168565b6125fa5760405162461bcd60e51b8152600401610ed49061564d565b806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115f857600080fd5b61263e33611168565b61265a5760405162461bcd60e51b8152600401610ed49061564d565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b61268533611168565b6126a15760405162461bcd60e51b8152600401610ed49061564d565b61107b7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab68261150c565b6126d433611168565b6126f05760405162461bcd60e51b8152600401610ed49061564d565b60405163f2fde38b60e01b81526001600160a01b03828116600483015283169063f2fde38b90602401600060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b505050505050565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff16610ea9565b61279833611168565b6127b45760405162461bcd60e51b8152600401610ed49061564d565b61107b600082611313565b6127c833611168565b6127e45760405162461bcd60e51b8152600401610ed49061564d565b6111d260003361150c565b6127f833611168565b6128145760405162461bcd60e51b8152600401610ed49061564d565b6001600160a01b03811661286a5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610ed4565b6001600160a01b03811633036128c25760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610ed4565b6128cd600082611313565b61107b60003361150c565b336000818152600e60205260408120549091906001600160a01b03166129575760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b601f5460ff161561296a57600191505090565b60115443116129bb5760405162461bcd60e51b815260206004820152601b60248201527f6c617374207365696720626c6f636b206973206e6f74207061737400000000006044820152606401610ed4565b60006129c633611228565b9050601a54811015612a1a5760405162461bcd60e51b815260206004820152601d60248201527f6d696e696d756d416d6f756e7420697320696e73756666696369656e740000006044820152606401610ed4565b336000908152600e60209081526040808320548151630a9ee07f60e31b815291516001600160a01b03909116939284926354f703f892600480830193928290030181865afa158015612a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9491906156ca565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0f91906156ca565b9050612b196145fe565b50336000908152600f6020908152604080832043905580516318160ddd60e01b815290516001600160a01b038716926318160ddd92600480820193918290030181865afa158015612b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9291906156ca565b600d546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0491906156ca565b9050808210612c465760405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a2600197505050505050505090565b6000612c52838361573b565b90506000336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb891906156ad565b336000818152601560205260408120549293509160ff1690612cde908a88878588614d00565b8093508196505050886001600160a01b031663817e9d31612d6188888d6001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5c91906156ca565b614f1b565b6040518263ffffffff1660e01b8152600401612d7f91815260200190565b6020604051808303816000875af1158015612d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc29190615690565b508115612eab578015612e365760405163079cc67960e41b81526001600160a01b038481166004830152602482018490528a16906379cc679090604401600060405180830381600087803b158015612e1957600080fd5b505af1158015612e2d573d6000803e3d6000fd5b50505050612eab565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490528a16906340c10f19906044016020604051808303816000875af1158015612e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea99190615690565b505b6000896001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0f91906156ca565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8a91906156ca565b600b546007546040516340c10f1960e01b81526001600160a01b039182166004820152602481018a905292935016906340c10f19906044016020604051808303816000875af1158015612fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130059190615690565b5060405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a260408051438152602081018a9052908101889052606081018a9052608081018b905260a0810182905260c0810183905233907fc93b8f82f3855a72b1cd7998a29e27df8650ab3c2b172a741887d950dbbad40d9060e00160405180910390a260019d505050505050505050505050505090565b3360009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff166131325760405162461bcd60e51b815260206004820152602760248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f74206120636861604482015266363632b733b2b960c91b6064820152608401610ed4565b6001600160a01b038084166000908152600e60205260409020548491166131b25760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b6040516306394c9b60e01b81526001600160a01b0384811660048301528516906306394c9b90602401600060405180830381600087803b1580156131f557600080fd5b505af1158015613209573d6000803e3d6000fd5b506001979650505050505050565b6006546000906001600160a01b031633146132745760405162461bcd60e51b815260206004820152601060248201527f6e6f74206f6e6c795265676973747279000000000000000000000000000000006044820152606401610ed4565b6001600160a01b038281166000908152600e60205260409020541661116057600c5460408051631dd70c0360e21b815290516000926001600160a01b03169163775c300c916004808301926020929190829003018187875af11580156132de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330291906156ad565b6001600160a01b038481166000818152600f60209081526040808320439055600e82529182902080546001600160a01b03191694861694851790559051928352929350917f124cac1e701d08d642237ad795ddd275670e12f2cd956a26709721c68084c2b2910160405180910390a250506001919050565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166134045760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610ed4565b601f5460ff16156134575760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ed4565b43601255601f805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001611778565b905090565b6134a633611168565b6134c25760405162461bcd60e51b8152600401610ed49061564d565b61107b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc982611313565b6111d27ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc93361150c565b61351f33611168565b61353b5760405162461bcd60e51b8152600401610ed49061564d565b61107b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82611313565b61356e33611168565b61358a5760405162461bcd60e51b8152600401610ed49061564d565b6000811180156135a557506b033b2e3c9fd0803ce800000081105b6135f15760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b601b55565b600d54604051630981b24d60e41b8152600481018390526000916001600160a01b03169063981b24d090602401602060405180830381865afa158015613640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea991906156ca565b6001600160a01b03811660009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff16610ea9565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610ea9565b6136ed33611168565b6137095760405162461bcd60e51b8152600401610ed49061564d565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b61373433611168565b6137505760405162461bcd60e51b8152600401610ed49061564d565b61107b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c8261150c565b61378333611168565b61379f5760405162461bcd60e51b8152600401610ed49061564d565b600b60009054906101000a90046001600160a01b03166001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156137ef57600080fd5b505af1158015611506573d6000803e3d6000fd5b6001600160a01b038281166000908152600e60205260408082205490516370a0823160e01b81528484166004820152919216906370a0823190602401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b600d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156138a6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349891906156ca565b6138d333611168565b6138ef5760405162461bcd60e51b8152600401610ed49061564d565b61107b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b60008281526005602052604090206001015461393081614308565b61133883836143b4565b61394333611168565b61395f5760405162461bcd60e51b8152600401610ed49061564d565b60008111801561397a57506b033b2e3c9fd0803ce800000081105b6139c65760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b601d55565b6139d433611168565b6139f05760405162461bcd60e51b8152600401610ed49061564d565b601a55565b6139fe33611168565b613a1a5760405162461bcd60e51b8152600401610ed49061564d565b61107b816127ef565b6007546000906001600160a01b03163314613a805760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610ed4565b6001600160a01b038085166000908152600e6020526040902054859116613b005760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610ed4565b6001600160a01b038581166000908152600e6020526040908190205490516370a0823160e01b81528683166004820152859291909116906370a0823190602401602060405180830381865afa158015613b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8191906156ca565b1015613bf55760405162461bcd60e51b815260206004820152602c60248201527f536569674d616e616765723a20696e73756666696369616e742062616c616e6360448201527f6520746f20756e7374616b6500000000000000000000000000000000000000006064820152608401610ed4565b613bff8585614437565b15613ce4576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa158015613c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8491906156ca565b613c8e919061573b565b9050601a54811015613ce25760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610ed4565b505b6000613cf18686866144b7565b600d549091506001600160a01b03166379cc679087613d108488615728565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613d5657600080fd5b505af1158015613d6a573d6000803e3d6000fd5b505050506001600160a01b038681166000908152600e60205260409081902054905163079cc67960e41b81528783166004820152602481018790529116906379cc679090604401600060405180830381600087803b158015613dcb57600080fd5b505af1158015613ddf573d6000803e3d6000fd5b50506008546001600160a01b0316159150613e65905057600854604051637c287fd560e11b81526001600160a01b0388811660048301528781166024830152604482018790529091169063f850ffaa90606401600060405180830381600087803b158015613e4c57600080fd5b505af1158015613e60573d6000803e3d6000fd5b505050505b60408051858152602081018390527f650f673bb96a43afff4620ecc3f3e38e0cbfddebde9894e951ba2ceff7472f60910160405180910390a150600195945050505050565b613eb333611168565b613ecf5760405162461bcd60e51b8152600401610ed49061564d565b6b033b2e3c9fd0803ce8000000601d54601c54601b54613eef9190615728565b613ef99190615728565b1115613f475760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610ed4565b600880546001600160a01b039889166001600160a01b0319918216179091556009805497909816961695909517909555601b92909255601c55601d55601691909155601a55565b6001600160a01b038083166000908152600e60209081526040808320548151630a9ee07f60e31b8152915193941692849284926354f703f892600480830193928290030181865afa158015613fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400b91906156ca565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561404d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407191906156ca565b600d546040516370a0823160e01b81526001600160a01b038981166004830152929350600092909116906370a0823190602401602060405180830381865afa1580156140c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e591906156ca565b905060006140f4838386614f1b565b6040516370a0823160e01b81526001600160a01b03898116600483015291925060009161417891614172918916906370a0823190602401602060405180830381865afa158015614148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061416c91906156ca565b87614f2c565b83614f62565b6001600160a01b038a81166000908152600e6020526040908190205490516370a0823160e01b81528b8316600482015292935016906370a0823190602401602060405180830381865afa1580156141d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f791906156ca565b614201908261573b565b9998505050505050505050565b61421733611168565b6142335760405162461bcd60e51b8152600401610ed49061564d565b61107b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82613915565b60006001600160e01b03198216637965db0b60e01b1480610ea95750610ea982614f95565b611594828260405160240161429892919061579e565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052614fd1565b604051811515602482015261107b9060440160408051601f198184030181529190526020810180516001600160e01b03166332458eed60e01b179052614fd1565b61107b8133614fda565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166115945760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556143703390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16156115945760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000826001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015614477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061449b91906156ad565b6001600160a01b0316826001600160a01b031614905092915050565b6001600160a01b038084166000908152600e602090815260408083205481516318160ddd60e01b81529151939485949116926318160ddd92600480820193918290030181865afa15801561450f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061453391906156ca565b600d546040516370a0823160e01b81526001600160a01b038881166004830152929350600092909116906370a0823190602401602060405180830381865afa158015614583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a791906156ca565b905080821180156145c85750670de0b6b3a76400006145c6828461573b565b105b156145d85760009250505061130c565b6145f46145ee6145e8848461573b565b86614f62565b83614f2c565b9695505050505050565b6000601154431161460f5750600090565b600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468691906156ca565b600003614697575043601155600090565b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061471191906156ca565b9150600060105461472061504f565b61472a91906157c9565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a591906156ca565b600a54600b546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa1580156147f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061481591906156ca565b600a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061488c91906156ca565b614896919061573b565b6148a490633b9aca006157c9565b6148ae9190615728565b905060006149356145ee84600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561490c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061493091906156ca565b614f62565b9050600061494e614946838661573b565b601d54614f62565b90508061495b8388615728565b6149659190615728565b43601155600d5460408051630a9ee07f60e31b815290519297506001600160a01b039091169163817e9d31916149c5918a918a9186916354f703f89160048083019260209291908290030181865afa158015612d38573d6000803e3d6000fd5b6040518263ffffffff1660e01b81526004016149e391815260200190565b6020604051808303816000875af1158015614a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a269190615690565b50600d54604080516318160ddd60e01b815290517f41a79a497d1457df24c25ab99f22349ae9aef4468429f0a781216e8dcf80c628926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015614a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab491906156ca565b604080519182526020820186905281018890526060810187905260800160405180910390a16000614ae5838661573b565b600854909150600090819081906001600160a01b031615614be757614b0c84601b54614f62565b600b546008546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292955016906340c10f19906044016020604051808303816000875af1158015614b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b879190615690565b5060085460405163027aa37b60e01b8152600481018590526001600160a01b039091169063027aa37b90602401600060405180830381600087803b158015614bce57600080fd5b505af1158015614be2573d6000803e3d6000fd5b505050505b6009546001600160a01b031615614c8157614c0484601c54614f62565b600b546009546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292945016906340c10f19906044016020604051808303816000875af1158015614c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c7f9190615690565b505b601d5415614c9e5784905080601e54614c9a9190615728565b601e555b6040805189815260208101889052908101859052606081018490526080810182905233907f0264534168fa7304ade59fc89758924d2288c7dcfd242dd680b668c80449c2829060a00160405180910390a260019a505050505050505050505090565b6001600160a01b03861660009081526017602052604081205481904310801590614d4157506001600160a01b03881660009081526017602052604090205415155b15614d95576001600160a01b0388166000908152601860209081526040808320546014835281842055601982528083205460158352818420805460ff191660ff909216151591909117905560179091528120555b33600090815260146020526040902054614daf8688615728565b925080600003614dbf5750614f10565b84614de257614dce8682614f62565b9150614dda828461573b565b925050614f10565b86600003614df05750614f10565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908a16906370a0823190602401602060405180830381865afa158015614e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e5e91906156ca565b905080600003614e6f575050614f10565b6000614e7b828a614f2c565b9050614e90614e8a8983614f62565b84614f62565b935060006b033b2e3c9fd0803ce80000008214614ecb57614ec685614ec1846b033b2e3c9fd0803ce800000061573b565b614f2c565b614ecd565b845b90506b033b2e3c9fd0803ce80000008214614efb57614eec8183614f62565b614ef69086615728565b614efd565b845b9450614f098187615728565b9550505050505b965096945050505050565b6000612133614f2a8484614f62565b855b600081614f58614f48856b033b2e3c9fd0803ce80000006150a5565b614f536002866157e0565b615115565b61130c91906157e0565b60006b033b2e3c9fd0803ce8000000614f58614f7e85856150a5565b614f5360026b033b2e3c9fd0803ce80000006157e0565b60006301ffc9a760e01b6001600160e01b031983161480610ea95750506001600160e01b03191660009081526004602052604090205460ff1690565b61107b81615173565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166115945761500d81615194565b6150188360206151a6565b604051602001615029929190615802565b60408051601f198184030181529082905262461bcd60e51b8252610ed491600401615883565b601f5460009060ff161561506257600080fd5b600060115443615072919061573b565b9050601154601354101561508557919050565b601254601354615095919061573b565b61509f908261573b565b91505090565b60008115806150c9575082826150bb81836157c9565b92506150c790836157e0565b145b610ea95760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610ed4565b6000826151228382615728565b9150811015610ea95760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610ed4565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6060610ea96001600160a01b03831660145b606060006151b58360026157c9565b6151c0906002615728565b67ffffffffffffffff8111156151d8576151d8615896565b6040519080825280601f01601f191660200182016040528015615202576020820181803683370190505b509050600360fc1b8160008151811061521d5761521d6156e3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061524c5761524c6156e3565b60200101906001600160f81b031916908160001a90535060006152708460026157c9565b61527b906001615728565b90505b6001811115615300577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106152bc576152bc6156e3565b1a60f81b8282815181106152d2576152d26156e3565b60200101906001600160f81b031916908160001a90535060049490941c936152f9816158ac565b905061527e565b50831561130c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ed4565b60006020828403121561536157600080fd5b81356001600160e01b03198116811461130c57600080fd5b60006020828403121561538b57600080fd5b5035919050565b6001600160a01b038116811461107b57600080fd5b6000602082840312156153b957600080fd5b813561130c81615392565b600080604083850312156153d757600080fd5b8235915060208301356153e981615392565b809150509250929050565b60008060006040848603121561540957600080fd5b833561541481615392565b9250602084013567ffffffffffffffff8082111561543157600080fd5b818601915086601f83011261544557600080fd5b81358181111561545457600080fd5b8760208260051b850101111561546957600080fd5b6020830194508093505050509250925092565b60008060006060848603121561549157600080fd5b833561549c81615392565b925060208401356154ac81615392565b929592945050506040919091013590565b801515811461107b57600080fd5b6000806000606084860312156154e057600080fd5b83356154eb81615392565b9250602084013591506040840135615502816154bd565b809150509250925092565b600080600080600080600060e0888a03121561552857600080fd5b873561553381615392565b9650602088013561554381615392565b9550604088013561555381615392565b9450606088013561556381615392565b93506080880135925060a088013561557a81615392565b8092505060c0880135905092959891949750929550565b600080604083850312156155a457600080fd5b82356155af81615392565b946020939093013593505050565b600080604083850312156155d057600080fd5b82356155db81615392565b915060208301356153e981615392565b600080600080600080600060e0888a03121561560657600080fd5b873561561181615392565b9650602088013561562181615392565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b6000602082840312156156a257600080fd5b815161130c816154bd565b6000602082840312156156bf57600080fd5b815161130c81615392565b6000602082840312156156dc57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615721576157216156f9565b5060010190565b80820180821115610ea957610ea96156f9565b81810381811115610ea957610ea96156f9565b60005b83811015615769578181015183820152602001615751565b50506000910152565b6000815180845261578a81602086016020860161574e565b601f01601f19169290920160200192915050565b6040815260006157b16040830185615772565b90506001600160a01b03831660208301529392505050565b8082028115828204841417610ea957610ea96156f9565b6000826157fd57634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161583a81601785016020880161574e565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161587781602884016020880161574e565b01602801949350505050565b60208152600061130c6020830184615772565b634e487b7160e01b600052604160045260246000fd5b6000816158bb576158bb6156f9565b50600019019056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "SeigManager gives seigniorage to operator and WTON holders. For each commit by operator, operator (or user) will get seigniorage in propotion to the staked (or delegated) amount of WTON. [Tokens] - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?). - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract. For each commit by operator,  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /     (total supply of TON and WTON) * (num blocks * seigniorage per block).  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,     up to the increased amount in step (1).  3. set the layer2's balance of {committed} as the layer2's {tot} balance. For each stake or delegate with amount of {v} to a Layer2,  1. mint {v} {coinages[layer2]} tokens to the account  2. mint {v} {tot} tokens to the layer2 contract For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,  1. burn {v} {coinages[layer2]} tokens from the account  2. burn {v + ⍺} {tot} tokens from the layer2 contract,   where ⍺ = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "deployCoinage(address)": {
        "details": "deploy coinage token for the layer2."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "onDeposit(address,address,uint256)": {
        "details": "Callback for a new deposit"
      },
      "onTransfer(address,address,uint256)": {
        "details": "Callback for a token transfer"
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      },
      "unpause()": {
        "details": "Called by a pauser to unpause, returns to normal state."
      },
      "updateSeigniorage()": {
        "details": "Callback for a new commit"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11867,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11871,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11875,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11879,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 1801,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 24,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_roles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 18561,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_registry",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18563,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_depositManager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 18565,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_powerton",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 18567,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "dao",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 18569,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_ton",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 18571,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_wton",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 18573,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "factory",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 18576,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_tot",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(RefactorCoinageSnapshotI)13606"
      },
      {
        "astId": 18581,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_coinages",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_contract(RefactorCoinageSnapshotI)13606)"
      },
      {
        "astId": 18585,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_lastCommitBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18587,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_seigPerBlock",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 18589,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_lastSeigBlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 18591,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_pausedBlock",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 18593,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_unpausedBlock",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 18597,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_commissionRates",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18601,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "_isCommissionRateNegative",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18603,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "adjustCommissionDelay",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 18607,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "delayedCommissionBlock",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18611,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "delayedCommissionRate",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18615,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "delayedCommissionRateNegative",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18617,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "minimumAmount",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 18619,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "powerTONSeigRate",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 18621,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "daoSeigRate",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 18623,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "relativeSeigRate",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 18625,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "accRelativeSeig",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 18627,
        "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
        "label": "paused",
        "offset": 0,
        "slot": "31",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(RefactorCoinageSnapshotI)13606": {
        "encoding": "inplace",
        "label": "contract RefactorCoinageSnapshotI",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(RefactorCoinageSnapshotI)13606)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract RefactorCoinageSnapshotI)",
        "numberOfBytes": "32",
        "value": "t_contract(RefactorCoinageSnapshotI)13606"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/stake/managers/SeigManager.sol:SeigManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}