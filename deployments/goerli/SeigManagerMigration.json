{
  "address": "0xBe73E55C0af28dEfe5233d39A2517c5d75670624",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "coinage",
          "type": "address"
        }
      ],
      "name": "CoinageCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "Comitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupplyOfWTON",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "CommitLog1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "OnSnapshot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakedSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "powertonSeig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pseig",
          "type": "uint256"
        }
      ],
      "name": "SeigGiven",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinageBurnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totBurnAmount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTotFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCoinageFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTotFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextCoinageFactor",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSeigniorage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALID_COMMISSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VALID_COMMISSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accRelativeSeig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "additionalTotBurnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adjustCoinageBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjustCommissionDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adjustTotBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "coinages",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "commissionRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoSeigRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayedCommissionBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayedCommissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayedCommissionRateNegative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "deployCoinage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "getOperatorAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ton_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wton_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seigPerBlock_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastSeigBlock_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isChallenger",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "isCommissionRateNegative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "lastCommitBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSeigBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "powerTONSeigRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "powerton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relativeSeigRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceWTONMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeChallenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "adjustDelay_",
          "type": "uint256"
        }
      ],
      "name": "setAdjustDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "name": "setCoinageFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isCommissionRateNegative_",
          "type": "bool"
        }
      ],
      "name": "setCommissionRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoSeigRate_",
          "type": "uint256"
        }
      ],
      "name": "setDaoSeigRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "powerton_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "powerTONSeigRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoSeigRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "relativeSeigRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adjustDelay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount_",
          "type": "uint256"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumAmount_",
          "type": "uint256"
        }
      ],
      "name": "setMinimumAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "powerton_",
          "type": "address"
        }
      ],
      "name": "setPowerTON",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "powerTONSeigRate_",
          "type": "uint256"
        }
      ],
      "name": "setPowerTONSeigRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pseigRate_",
          "type": "uint256"
        }
      ],
      "name": "setPseigRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        }
      ],
      "name": "slash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "stakeOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeOfTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "stakeOfTotalAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSeigManager",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "coinages_",
          "type": "address[]"
        }
      ],
      "name": "transferCoinageOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "uncomittedStakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpausedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSeigniorage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "layer2",
          "type": "address"
        }
      ],
      "name": "updateSeigniorageLayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfecc025163ae70b90c80305a6ec9ae33a048f2136ae3e8ea86130128a658c495",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0xBe73E55C0af28dEfe5233d39A2517c5d75670624",
    "transactionIndex": 10,
    "gasUsed": "4989623",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x27e9dcb48e4364e4d28c1f7ce899884040ae8ccd32065c274efd4a62362dc7c9",
    "transactionHash": "0xfecc025163ae70b90c80305a6ec9ae33a048f2136ae3e8ea86130128a658c495",
    "logs": [],
    "blockNumber": 9816451,
    "cumulativeGasUsed": "6071998",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c033f809033b6c2ad8e394a8f26196e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinage\",\"type\":\"address\"}],\"name\":\"CoinageCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"Comitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupplyOfWTON\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotalSupply\",\"type\":\"uint256\"}],\"name\":\"CommitLog1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"OnSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powertonSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pseig\",\"type\":\"uint256\"}],\"name\":\"SeigGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinageBurnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totBurnAmount\",\"type\":\"uint256\"}],\"name\":\"UnstakeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCoinageFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextCoinageFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedSeigniorage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRelativeSeig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"additionalTotBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adjustCoinageBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustCommissionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adjustTotBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"coinages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"commissionRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayedCommissionRateNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"deployCoinage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"getOperatorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seigPerBlock_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastSeigBlock_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isChallenger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"isCommissionRateNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"lastCommitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSeigBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerTONSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relativeSeigRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWTONMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeChallenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustDelay_\",\"type\":\"uint256\"}],\"name\":\"setAdjustDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"name\":\"setCoinageFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCommissionRateNegative_\",\"type\":\"bool\"}],\"name\":\"setCommissionRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoSeigRate_\",\"type\":\"uint256\"}],\"name\":\"setDaoSeigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerton_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"powerTONSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeSeigRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount_\",\"type\":\"uint256\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount_\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerton_\",\"type\":\"address\"}],\"name\":\"setPowerTON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"powerTONSeigRate_\",\"type\":\"uint256\"}],\"name\":\"setPowerTONSeigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pseigRate_\",\"type\":\"uint256\"}],\"name\":\"setPseigRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeOfTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"stakeOfTotalAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSeigManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"coinages_\",\"type\":\"address[]\"}],\"name\":\"transferCoinageOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"uncomittedStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSeigniorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"updateSeigniorageLayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"SeigManager gives seigniorage to operator and WTON holders. For each commit by operator, operator (or user) will get seigniorage in propotion to the staked (or delegated) amount of WTON. [Tokens] - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?). - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract. For each commit by operator,  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /     (total supply of TON and WTON) * (num blocks * seigniorage per block).  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,     up to the increased amount in step (1).  3. set the layer2's balance of {committed} as the layer2's {tot} balance. For each stake or delegate with amount of {v} to a Layer2,  1. mint {v} {coinages[layer2]} tokens to the account  2. mint {v} {tot} tokens to the layer2 contract For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,  1. burn {v} {coinages[layer2]} tokens from the account  2. burn {v + \\u237a} {tot} tokens from the layer2 contract,   where \\u237a = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"deployCoinage(address)\":{\"details\":\"deploy coinage token for the layer2.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"onDeposit(address,address,uint256)\":{\"details\":\"Callback for a new deposit\"},\"onTransfer(address,address,uint256)\":{\"details\":\"Callback for a token transfer\"},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}},\"unpause()\":{\"details\":\"Called by a pauser to unpause, returns to normal state.\"},\"updateSeigniorage()\":{\"details\":\"Callback for a new commit\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stake/managers/SeigManagerMigration.sol\":\"SeigManagerMigration\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/AuthControlSeigManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AuthRoleSeigManager.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract AuthControlSeigManager is AuthRoleSeigManager, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"AuthControl: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"AuthControl: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, msg.sender), \\\"AuthControl: Caller is not an operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyChallenger() {\\n        require(hasRole(CHALLENGER_ROLE, msg.sender), \\\"AuthControl: Caller is not a challenger\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSE_ROLE, msg.sender), \\\"AuthControl: Caller is not a pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinterOrAdmin() {\\n        console.log('onlyMinterOrAdmin msg.sender ', msg.sender);\\n        console.logBool(hasRole(MINTER_ROLE, msg.sender));\\n\\n        require(isAdmin(msg.sender) || hasRole(MINTER_ROLE, msg.sender), \\\"not onlyMinterOrAdmin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function addMinter(address account) public virtual onlyOwner {\\n        grantRole(MINTER_ROLE, account);\\n    }\\n\\n    function addOperator(address account) public virtual onlyOwner {\\n        grantRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function addChallenger(address account) public virtual onlyMinterOrAdmin {\\n        grantRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function removeMinter(address account) public virtual onlyOwner {\\n        renounceRole(MINTER_ROLE, account);\\n    }\\n\\n    function removeChallenger(address account) public virtual onlyOwner {\\n        renounceRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    function removeOperator(address account) public virtual onlyOwner {\\n        renounceRole(OPERATOR_ROLE, account);\\n    }\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function renounceMinter() public {\\n        renounceRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function renounceOperator() public {\\n        renounceRole(OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    function renounceChallenger() public {\\n        renounceRole(CHALLENGER_ROLE, msg.sender);\\n    }\\n\\n    function revokeMinter(address account) public onlyOwner {\\n        revokeRole(MINTER_ROLE, account);\\n    }\\n\\n    function revokeOperator(address account) public onlyOwner {\\n        revokeRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function revokeChallenger(address account) public onlyOwner {\\n        revokeRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function isMinter(address account) public view virtual returns (bool) {\\n        return hasRole(MINTER_ROLE, account);\\n    }\\n\\n    function isOperator(address account) public view virtual returns (bool) {\\n        return hasRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function isChallenger(address account) public view virtual returns (bool) {\\n        return hasRole(CHALLENGER_ROLE, account);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb34edfd4e9e7f507a74f6a7cc2db6f5c637ab46726662b8a2914faef53f9a350\",\"license\":\"MIT\"},\"contracts/common/AuthRoleSeigManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AuthRoleSeigManager {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\n    bytes32 public constant CHALLENGER_ROLE = keccak256(\\\"CHALLENGER\\\");\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE\\\");\\n}\\n\",\"keccak256\":\"0x4ef5ed953856121614c2ea0ff527a8ffcebba5c70309fcd80e4a7d9c54ab3f49\",\"license\":\"MIT\"},\"contracts/dao/interfaces/CoinageFactoryI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface CoinageFactoryI {\\n  function deploy() external returns (address);\\n}\\n\",\"keccak256\":\"0x66ce5e84f4bf072616568e4683d451123a746e2b73fa21cb7acc1c1c7b27fd15\",\"license\":\"MIT\"},\"contracts/dao/interfaces/IWTON.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWTON {\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount) external returns (bool);\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount) external returns (bool);\\n    function renounceTonMinter() external;\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function renounceMinter() external ;\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n}\",\"keccak256\":\"0x6ed6404309dad833fb32fb39445f08ca7fa321b5541a6279d1ce36392d1b122e\",\"license\":\"MIT\"},\"contracts/dao/interfaces/Layer2I.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface Layer2I {\\n  function operator() external view returns (address);\\n  function isLayer2() external view returns (bool);\\n  function currentFork() external view returns (uint);\\n  function lastEpoch(uint forkNumber) external view returns (uint);\\n  function changeOperator(address _operator) external;\\n}\\n\",\"keccak256\":\"0x76ae3e18aba63a43d292d06f65853817a344f4725e4026784a7445ee9cd13a91\",\"license\":\"MIT\"},\"contracts/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract DSMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n    return x <= y ? x : y;\\n  }\\n  function max(uint x, uint y) internal pure returns (uint z) {\\n    return x >= y ? x : y;\\n  }\\n  function imin(int x, int y) internal pure returns (int z) {\\n    return x <= y ? x : y;\\n  }\\n  function imax(int x, int y) internal pure returns (int z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  uint constant WAD_ = 10 ** 18;\\n  uint constant RAY_ = 10 ** 27;\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), WAD_ / 2) / WAD_;\\n  }\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), RAY_ / 2) / RAY_;\\n  }\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, WAD_), y / 2) / y;\\n  }\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, RAY_), y / 2) / y;\\n  }\\n\\n  function wmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / WAD_;\\n  }\\n  function rmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / RAY_;\\n  }\\n  function wdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, WAD_) / y;\\n  }\\n  function rdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, RAY_) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //  x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //  floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function wpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : WAD_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = wmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = wmul(z, x);\\n      }\\n    }\\n  }\\n\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : RAY_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x61ed70add2b6579a40cfea37088db547f1a411b039853d22aa6dc363c7b6ee60\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"contracts/stake/interfaces/RefactorCoinageSnapshotI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface RefactorCoinageSnapshotI {\\n  function factor() external view returns (uint256);\\n  function setFactor(uint256 factor) external returns (bool);\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function mint(address account, uint256 amount) external returns (bool);\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function addMinter(address account) external;\\n  function renounceMinter() external;\\n  function transferOwnership(address newOwner) external;\\n  function snapshot() external returns (uint256 id);\\n  function totalSupplyAt(uint256 snapshotId) external view returns (uint256 amount);\\n  function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x04ed1689825225618106a62839f896e8f775ba9900684b51424544ed9608ac17\",\"license\":\"MIT\"},\"contracts/stake/interfaces/SeigManagerI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface SeigManagerI {\\n  function registry() external view returns (address);\\n  function depositManager() external view returns (address);\\n  function ton() external view returns (address);\\n  function wton() external view returns (address);\\n  function powerton() external view returns (address);\\n  function tot() external view returns (address);\\n  function coinages(address layer2) external view returns (address);\\n  function commissionRates(address layer2) external view returns (uint256);\\n\\n  function lastCommitBlock(address layer2) external view returns (uint256);\\n  function seigPerBlock() external view returns (uint256);\\n  function lastSeigBlock() external view returns (uint256);\\n  function pausedBlock() external view returns (uint256);\\n  function unpausedBlock() external view returns (uint256);\\n  function DEFAULT_FACTOR() external view returns (uint256);\\n\\n  function deployCoinage(address layer2) external returns (bool);\\n  function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n  function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\\n  function stakeOf(address layer2, address account) external view returns (uint256);\\n  function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n  function updateSeigniorage() external returns (bool);\\n  function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n  function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n\\n}\\n\",\"keccak256\":\"0xf5ecb45a9f6521b045a8f0688448d77b6d0656f90e54f5e87e5a8532dd1d93ea\",\"license\":\"MIT\"},\"contracts/stake/managers/SeigManagerMigration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { DSMath } from \\\"../../libraries/DSMath.sol\\\";\\nimport { RefactorCoinageSnapshotI } from \\\"../interfaces/RefactorCoinageSnapshotI.sol\\\";\\nimport { CoinageFactoryI } from \\\"../../dao/interfaces/CoinageFactoryI.sol\\\";\\nimport { IWTON } from \\\"../../dao/interfaces/IWTON.sol\\\";\\nimport { Layer2I } from \\\"../../dao/interfaces/Layer2I.sol\\\";\\nimport { SeigManagerI } from \\\"../interfaces/SeigManagerI.sol\\\";\\n\\nimport \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AuthControlSeigManager } from \\\"../../common/AuthControlSeigManager.sol\\\";\\nimport { SeigManagerStorage } from \\\"./SeigManagerStorage.sol\\\";\\n\\ninterface MinterRoleRenounceTarget {\\n  function renounceMinter() external;\\n}\\n\\ninterface PauserRoleRenounceTarget {\\n  function renouncePauser() external;\\n}\\n\\ninterface OwnableTarget {\\n  function renounceOwnership() external;\\n  function transferOwnership(address newOwner) external;\\n}\\n\\ninterface IILayer2Registry {\\n  function layer2s(address layer2) external view returns (bool);\\n  function numLayer2s() external view  returns (uint256);\\n  function layer2ByIndex(uint256 index) external view returns (address);\\n}\\n\\ninterface IPowerTON {\\n  function updateSeigniorage(uint256 amount) external;\\n}\\n\\ninterface ITON {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IRefactorCoinageSnapshot {\\n  function snapshot() external returns (uint256 id);\\n}\\n\\ninterface ICandidate {\\n  function updateSeigniorage() external returns (bool);\\n}\\n/**\\n * @dev SeigManager gives seigniorage to operator and WTON holders.\\n * For each commit by operator, operator (or user) will get seigniorage\\n * in propotion to the staked (or delegated) amount of WTON.\\n *\\n * [Tokens]\\n * - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?).\\n * - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract.\\n *\\n * For each commit by operator,\\n *  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /\\n *     (total supply of TON and WTON) * (num blocks * seigniorage per block).\\n *  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,\\n *     up to the increased amount in step (1).\\n *  3. set the layer2's balance of {committed} as the layer2's {tot} balance.\\n *\\n * For each stake or delegate with amount of {v} to a Layer2,\\n *  1. mint {v} {coinages[layer2]} tokens to the account\\n *  2. mint {v} {tot} tokens to the layer2 contract\\n *\\n * For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,\\n *  1. burn {v} {coinages[layer2]} tokens from the account\\n *  2. burn {v + \\u237a} {tot} tokens from the layer2 contract,\\n *   where \\u237a = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account\\n *     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2\\n *     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply\\n *     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage\\n *\\n */\\ncontract SeigManagerMigration is ProxyStorage, AuthControlSeigManager, SeigManagerStorage, SeigManagerI, DSMath {\\n\\n  //////////////////////////////\\n  // Modifiers\\n  //////////////////////////////\\n\\n  modifier onlyRegistry() {\\n    require(msg.sender == _registry, \\\"not onlyRegistry\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegistryOrOperator(address layer2) {\\n    require(msg.sender == _registry || msg.sender == Layer2I(layer2).operator(), \\\"not onlyRegistryOrOperator\\\");\\n    _;\\n  }\\n\\n  modifier onlyDepositManager() {\\n    require(msg.sender == _depositManager, \\\"not onlyDepositManager\\\");\\n    _;\\n  }\\n\\n  modifier onlyLayer2(address layer2) {\\n    require(IILayer2Registry(_registry).layer2s(layer2), \\\"not onlyLayer2\\\");\\n    _;\\n  }\\n\\n  modifier checkCoinage(address layer2) {\\n    require(address(_coinages[layer2]) != address(0), \\\"SeigManager: coinage has not been deployed yet\\\");\\n    _;\\n  }\\n\\n  modifier whenNotPaused() {\\n      require(!paused, \\\"Pausable: paused\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n      require(paused, \\\"Pausable: not paused\\\");\\n      _;\\n  }\\n\\n\\n  //////////////////////////////\\n  // Events\\n  //////////////////////////////\\n\\n  event CoinageCreated(address indexed layer2, address coinage);\\n  event SeigGiven(address indexed layer2, uint256 totalSeig, uint256 stakedSeig, uint256 unstakedSeig, uint256 powertonSeig, uint256 pseig);\\n  event Comitted(address indexed layer2);\\n  event CommissionRateSet(address indexed layer2, uint256 previousRate, uint256 newRate);\\n  event Paused(address account);\\n  event Unpaused(address account);\\n\\n  // DEV ONLY\\n  event CommitLog1(uint256 totalStakedAmount, uint256 totalSupplyOfWTON, uint256 prevTotalSupply, uint256 nextTotalSupply);\\n\\n  // DEV ONLY\\n  event UnstakeLog(uint coinageBurnAmount, uint totBurnAmount);\\n\\n  event UpdatedSeigniorage(address indexed layer2, uint256 blockNumber, uint256 prevTotal, uint256 nextTotal, uint256 oldTotFactor, uint256 oldCoinageFactor, uint256 nextTotFactor, uint256 nextCoinageFactor);\\n  event OnSnapshot(uint256 snapshotId);\\n\\n  //////////////////////////////\\n  // Constuctor\\n  //////////////////////////////\\n\\n  function initialize (\\n    address ton_,\\n    address wton_,\\n    address registry_,\\n    address depositManager_,\\n    uint256 seigPerBlock_,\\n    address factory_,\\n    uint256 lastSeigBlock_\\n  ) external {\\n    require(_ton == address(0) && _lastSeigBlock == 0, \\\"already initialized\\\");\\n\\n    _ton = ton_;\\n    _wton = wton_;\\n    _registry = registry_;\\n    _depositManager = depositManager_;\\n    _seigPerBlock = seigPerBlock_;\\n\\n    factory = factory_;\\n    address c = CoinageFactoryI(factory).deploy();\\n    require(c != address(0), \\\"zero tot\\\");\\n    _tot = RefactorCoinageSnapshotI(c);\\n\\n    _lastSeigBlock = lastSeigBlock_;\\n  }\\n\\n  //////////////////////////////\\n  // Pausable\\n  //////////////////////////////\\n\\n  function pause() public onlyPauser whenNotPaused {\\n    _pausedBlock = block.number;\\n    paused = true;\\n    emit Paused(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Called by a pauser to unpause, returns to normal state.\\n   */\\n  function unpause() public onlyPauser whenPaused {\\n    _unpausedBlock = block.number;\\n    paused = false;\\n    emit Unpaused(msg.sender);\\n  }\\n\\n\\n  //////////////////////////////\\n  // onlyOwner\\n  //////////////////////////////\\n\\n  function setData(\\n      address powerton_,\\n      address daoAddress,\\n      uint256 powerTONSeigRate_,\\n      uint256 daoSeigRate_,\\n      uint256 relativeSeigRate_,\\n      uint256 adjustDelay_,\\n      uint256 minimumAmount_\\n  ) external onlyOwner {\\n    require(\\n      powerTONSeigRate + daoSeigRate + relativeSeigRate <= RAY, \\\"exceeded seigniorage rate\\\"\\n    );\\n    _powerton = powerton_;\\n    dao = daoAddress;\\n    powerTONSeigRate = powerTONSeigRate_;\\n    daoSeigRate = daoSeigRate_;\\n    relativeSeigRate = relativeSeigRate_;\\n    adjustCommissionDelay = adjustDelay_;\\n    minimumAmount = minimumAmount_;\\n  }\\n\\n  function setPowerTON(address powerton_) external onlyOwner {\\n    _powerton = powerton_;\\n  }\\n\\n  function setDao(address daoAddress) external onlyOwner {\\n    dao = daoAddress;\\n  }\\n\\n  function setPowerTONSeigRate(uint256 powerTONSeigRate_) external onlyOwner {\\n    require(powerTONSeigRate_ > 0 && powerTONSeigRate_ < RAY, \\\"exceeded seigniorage rate\\\");\\n    powerTONSeigRate = powerTONSeigRate_;\\n  }\\n\\n  function setDaoSeigRate(uint256 daoSeigRate_) external onlyOwner {\\n    require(daoSeigRate_ > 0 && daoSeigRate_ < RAY, \\\"exceeded seigniorage rate\\\");\\n    daoSeigRate = daoSeigRate_;\\n  }\\n\\n  function setPseigRate(uint256 pseigRate_) external onlyOwner {\\n    require(pseigRate_ > 0 && pseigRate_ < RAY, \\\"exceeded seigniorage rate\\\");\\n    relativeSeigRate = pseigRate_;\\n  }\\n\\n  function setCoinageFactory(address factory_) external onlyOwner {\\n    factory = factory_;\\n  }\\n\\n  function transferCoinageOwnership(address newSeigManager, address[] calldata coinages_) external onlyOwner {\\n    for (uint256 i = 0; i < coinages_.length; i++) {\\n      RefactorCoinageSnapshotI c = RefactorCoinageSnapshotI(coinages_[i]);\\n      c.addMinter(newSeigManager);\\n      c.renounceMinter();\\n      c.transferOwnership(newSeigManager);\\n    }\\n  }\\n\\n  function renounceWTONMinter() external onlyOwner {\\n    IWTON(_wton).renounceMinter();\\n  }\\n\\n  function setAdjustDelay(uint256 adjustDelay_) external onlyOwner {\\n    adjustCommissionDelay = adjustDelay_;\\n  }\\n\\n  function setMinimumAmount(uint256 minimumAmount_) external onlyOwner {\\n    minimumAmount = minimumAmount_;\\n  }\\n\\n  function adjustTotBalance(address layer, uint256 amount) external onlyOwner {\\n    _tot.mint(layer, amount);\\n  }\\n\\n  function adjustCoinageBalance(address layer, address account, uint256 amount) external onlyOwner {\\n    _coinages[layer].mint(account, amount);\\n  }\\n\\n  //////////////////////////////\\n  // onlyRegistry\\n  //////////////////////////////\\n\\n  /**\\n   * @dev deploy coinage token for the layer2.\\n   */\\n  function deployCoinage(address layer2) external onlyRegistry returns (bool) {\\n    // create new coinage token for the layer2 contract\\n    if (address(_coinages[layer2]) == address(0)) {\\n      address c = CoinageFactoryI(factory).deploy();\\n      _lastCommitBlock[layer2] = block.number;\\n      // addChallenger(layer2);\\n      _coinages[layer2] = RefactorCoinageSnapshotI(c);\\n      emit CoinageCreated(layer2, c);\\n    }\\n\\n    return true;\\n  }\\n\\n  function setCommissionRate(\\n    address layer2,\\n    uint256 commissionRate,\\n    bool isCommissionRateNegative_\\n  )\\n    external\\n    onlyRegistryOrOperator(layer2)\\n    returns (bool)\\n  {\\n    // check commission range\\n    require(\\n      (commissionRate == 0) ||\\n      (MIN_VALID_COMMISSION <= commissionRate && commissionRate <= MAX_VALID_COMMISSION),\\n      \\\"SeigManager: commission rate must be 0 or between 1 RAY and 0.01 RAY\\\"\\n    );\\n\\n    uint256 previous = _commissionRates[layer2];\\n    if (adjustCommissionDelay == 0) {\\n      _commissionRates[layer2] = commissionRate;\\n      _isCommissionRateNegative[layer2] = isCommissionRateNegative_;\\n    } else {\\n      delayedCommissionBlock[layer2] = block.number + adjustCommissionDelay;\\n      delayedCommissionRate[layer2] = commissionRate;\\n      delayedCommissionRateNegative[layer2] = isCommissionRateNegative_;\\n    }\\n\\n    emit CommissionRateSet(layer2, previous, commissionRate);\\n\\n    return true;\\n  }\\n\\n  // No implementation in registry.\\n  // function addChallenger(address account) public onlyRegistry {\\n  //   grantRole(CHALLENGER_ROLE, account);\\n  // }\\n\\n  // No implementation in layer2 (candidate).\\n  function slash(address layer2, address challenger) external onlyChallenger checkCoinage(layer2) returns (bool) {\\n    Layer2I(layer2).changeOperator(challenger);\\n\\n    return true;\\n  }\\n\\n  //////////////////////////////\\n  // onlyDepositManager\\n  //////////////////////////////\\n\\n  /**\\n   * @dev Callback for a new deposit\\n   */\\n  function onDeposit(address layer2, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(layer2)\\n    returns (bool)\\n  {\\n    if (_isOperator(layer2, account)) {\\n      uint256 newAmount = _coinages[layer2].balanceOf(account) + amount;\\n      require(newAmount >= minimumAmount, \\\"minimum amount is required\\\");\\n    }\\n    _tot.mint(layer2, amount);\\n    _coinages[layer2].mint(account, amount);\\n\\n    return true;\\n  }\\n\\n  function onWithdraw(address layer2, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(layer2)\\n    returns (bool)\\n  {\\n    require(_coinages[layer2].balanceOf(account) >= amount, \\\"SeigManager: insufficiant balance to unstake\\\");\\n\\n    if (_isOperator(layer2, account)) {\\n      uint256 newAmount = _coinages[layer2].balanceOf(account) - amount;\\n      require(newAmount >= minimumAmount, \\\"minimum amount is required\\\");\\n    }\\n\\n    // burn {v + \\u237a} {tot} tokens to the layer2 contract,\\n    uint256 totAmount = _additionalTotBurnAmount(layer2, account, amount);\\n    _tot.burnFrom(layer2, amount+totAmount);\\n\\n    // burn {v} {coinages[layer2]} tokens to the account\\n    _coinages[layer2].burnFrom(account, amount);\\n\\n    emit UnstakeLog(amount, totAmount);\\n\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // checkCoinage\\n  //////////////////////////////\\n\\n  /**\\n   * @dev Callback for a new commit\\n   */\\n  function updateSeigniorage()\\n    public\\n    checkCoinage(msg.sender)\\n    returns (bool)\\n  {\\n    // short circuit if paused\\n    if (paused) {\\n      return true;\\n    }\\n    require(block.number > _lastSeigBlock, \\\"last seig block is not past\\\");\\n\\n    uint256 operatorAmount = getOperatorAmount(msg.sender);\\n    require(operatorAmount >= minimumAmount, \\\"minimumAmount is insufficient\\\");\\n\\n    RefactorCoinageSnapshotI coinage = _coinages[msg.sender];\\n\\n    uint256 oldCoinageFactor = coinage.factor();\\n    uint256 oldTotFactor = _tot.factor();\\n\\n    _increaseTot();\\n\\n    _lastCommitBlock[msg.sender] = block.number;\\n\\n    // 2. increase total supply of {coinages[layer2]}\\n    // RefactorCoinageSnapshotI coinage = _coinages[msg.sender];\\n\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(msg.sender);\\n\\n    // short circuit if there is no seigs for the layer2\\n    if (prevTotalSupply >= nextTotalSupply) {\\n      emit Comitted(msg.sender);\\n      return true;\\n    }\\n\\n    uint256 seigs = nextTotalSupply - prevTotalSupply;\\n    address operator = Layer2I(msg.sender).operator();\\n    uint256 operatorSeigs;\\n\\n    // calculate commission amount\\n    bool isCommissionRateNegative_ = _isCommissionRateNegative[msg.sender];\\n\\n    (nextTotalSupply, operatorSeigs) = _calcSeigsDistribution(\\n      msg.sender,\\n      coinage,\\n      prevTotalSupply,\\n      seigs,\\n      isCommissionRateNegative_,\\n      operator\\n    );\\n\\n    // gives seigniorages to the layer2 as coinage\\n    coinage.setFactor(\\n      _calcNewFactor(\\n        prevTotalSupply,\\n        nextTotalSupply,\\n        coinage.factor()\\n      )\\n    );\\n\\n    // give commission to operator or delegators\\n    if (operatorSeigs != 0) {\\n      if (isCommissionRateNegative_) {\\n        // TODO: adjust arithmetic error\\n        // burn by \\ud835\\udf38\\n        coinage.burnFrom(operator, operatorSeigs);\\n      } else {\\n        coinage.mint(operator, operatorSeigs);\\n      }\\n    }\\n\\n    uint256 newCoinageFactor = coinage.factor();\\n    uint256 newTotFactor = _tot.factor();\\n\\n    IWTON(_wton).mint(address(_depositManager), seigs);\\n\\n    emit Comitted(msg.sender);\\n    emit UpdatedSeigniorage(msg.sender, block.number, prevTotalSupply, nextTotalSupply, oldTotFactor, oldCoinageFactor, newTotFactor, newCoinageFactor);\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // External functions\\n  //////////////////////////////\\n\\n  function getOperatorAmount(address layer2) public view returns (uint256) {\\n    address operator = Layer2I(msg.sender).operator();\\n    return _coinages[layer2].balanceOf(operator);\\n  }\\n\\n  /**\\n   * @dev Callback for a token transfer\\n   */\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool) {\\n    require(msg.sender == address(_ton) || msg.sender == address(_wton),\\n      \\\"SeigManager: only TON or WTON can call onTransfer\\\");\\n\\n    if (!paused) {\\n      _increaseTot();\\n    }\\n\\n    return true;\\n  }\\n\\n\\n  function additionalTotBurnAmount(address layer2, address account, uint256 amount)\\n    external\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    return _additionalTotBurnAmount(layer2, account, amount);\\n  }\\n\\n\\n  function uncomittedStakeOf(address layer2, address account) external view returns (uint256) {\\n    RefactorCoinageSnapshotI coinage = RefactorCoinageSnapshotI(_coinages[layer2]);\\n\\n    uint256 prevFactor = coinage.factor();\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(layer2);\\n    uint256 newFactor = _calcNewFactor(prevTotalSupply, nextTotalSupply, prevFactor);\\n\\n    uint256 uncomittedBalance = rmul(\\n      rdiv(coinage.balanceOf(account), prevFactor),\\n      newFactor\\n    );\\n\\n    return (uncomittedBalance - _coinages[layer2].balanceOf(account));\\n  }\\n\\n  function stakeOf(address layer2, address account) public view returns (uint256) {\\n    return _coinages[layer2].balanceOf(account);\\n  }\\n\\n  function stakeOf(address account) external view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    // amount = 0;\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].balanceOf(account);\\n    }\\n  }\\n\\n  function stakeOfAt(address account, uint256 snapshotId) external view returns (uint256 amount) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    // amount = 0;\\n    for (uint256 i = 0 ; i < num; i++){\\n      address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n      amount += _coinages[layer2].balanceOfAt(account, snapshotId);\\n    }\\n  }\\n\\n  function stakeOfTotal() external view returns (uint256 amount) {\\n    amount = _tot.totalSupply();\\n  }\\n\\n  function stakeOfTotalAt(uint256 snapshotId) external view returns (uint256 amount) {\\n    amount = _tot.totalSupplyAt(snapshotId);\\n  }\\n\\n  function onSnapshot() external returns (uint256 snapshotId) {\\n    uint256 num = IILayer2Registry(_registry).numLayer2s();\\n    for (uint256 i = 0 ; i < num; i++){\\n        address layer2 = IILayer2Registry(_registry).layer2ByIndex(i);\\n        IRefactorCoinageSnapshot(address(_coinages[layer2])).snapshot();\\n    }\\n    snapshotId = IRefactorCoinageSnapshot(address(_tot)).snapshot();\\n    emit OnSnapshot(snapshotId);\\n  }\\n\\n  function updateSeigniorageLayer(address layer2) external returns (bool){\\n    require(ICandidate(layer2).updateSeigniorage(), \\\"fail updateSeigniorage\\\");\\n    return true;\\n  }\\n\\n  //////////////////////////////\\n  // Public functions\\n  //////////////////////////////\\n\\n\\n  //////////////////////////////\\n  // Internal functions\\n  //////////////////////////////\\n\\n  // return \\u237a, where \\u237a = (tot.balanceOf(layer2) - coinages[layer2].totalSupply()) * (amount / coinages[layer2].totalSupply())\\n  function _additionalTotBurnAmount(address layer2, address account, uint256 amount)\\n    internal\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    uint256 coinageTotalSupply = _coinages[layer2].totalSupply();\\n    uint256 totBalalnce = _tot.balanceOf(layer2);\\n\\n    // NOTE: arithamtic operations (mul and div) make some errors, so we gonna adjust them under 1e-9 WTON.\\n    //       note that coinageTotalSupply and totBalalnce are RAY values.\\n    if (coinageTotalSupply > totBalalnce && coinageTotalSupply - totBalalnce < WAD_) {\\n      return 0;\\n    }\\n\\n    return rdiv(\\n      rmul(\\n        totBalalnce - coinageTotalSupply,\\n        amount\\n      ),\\n      coinageTotalSupply\\n    );\\n  }\\n\\n\\n  function _calcSeigsDistribution(\\n    address layer2,\\n    RefactorCoinageSnapshotI coinage,\\n    uint256 prevTotalSupply,\\n    uint256 seigs,\\n    bool isCommissionRateNegative_,\\n    address operator\\n  ) internal returns (\\n    uint256 nextTotalSupply,\\n    uint256 operatorSeigs\\n  ) {\\n    if (block.number >= delayedCommissionBlock[layer2] && delayedCommissionBlock[layer2] != 0) {\\n      _commissionRates[layer2] = delayedCommissionRate[layer2];\\n      _isCommissionRateNegative[layer2] = delayedCommissionRateNegative[layer2];\\n      delayedCommissionBlock[layer2] = 0;\\n    }\\n\\n    uint256 commissionRate = _commissionRates[msg.sender];\\n\\n    nextTotalSupply = prevTotalSupply + seigs;\\n\\n    // short circuit if there is no commission rate\\n    if (commissionRate == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // if commission rate is possitive\\n    if (!isCommissionRateNegative_) {\\n      operatorSeigs = rmul(seigs, commissionRate); // additional seig for operator\\n      nextTotalSupply = nextTotalSupply - operatorSeigs;\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // short circuit if there is no previous total deposit (meanning, there is no deposit)\\n    if (prevTotalSupply == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // See negative commission distribution formular here: TBD\\n    uint256 operatorBalance = coinage.balanceOf(operator);\\n\\n    // short circuit if there is no operator deposit\\n    if (operatorBalance == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    uint256 operatorRate = rdiv(operatorBalance, prevTotalSupply);\\n\\n    // \\u0251: insufficient seig for operator\\n    operatorSeigs = rmul(\\n      rmul(seigs, operatorRate), // seigs for operator\\n      commissionRate\\n    );\\n\\n    // \\u03b2:\\n    uint256 delegatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : rdiv(operatorSeigs, RAY - operatorRate);\\n\\n    // \\ud835\\udf38:\\n    operatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : operatorSeigs + rmul(delegatorSeigs, operatorRate);\\n\\n    nextTotalSupply = nextTotalSupply + delegatorSeigs;\\n\\n    return (nextTotalSupply, operatorSeigs);\\n  }\\n\\n  function _calcNewFactor(uint256 source, uint256 target, uint256 oldFactor) internal pure returns (uint256) {\\n    return rdiv(rmul(target, oldFactor), source);\\n  }\\n\\n\\n  function _calcNumSeigBlocks() internal view returns (uint256) {\\n    require(!paused);\\n\\n    uint256 span = block.number - _lastSeigBlock;\\n    if (_unpausedBlock < _lastSeigBlock) {\\n      return span;\\n    }\\n\\n    return span - (_unpausedBlock - _pausedBlock);\\n  }\\n\\n  function _isOperator(address layer2, address operator) internal view returns (bool) {\\n    return operator == Layer2I(layer2).operator();\\n  }\\n\\n\\n  function _increaseTot() internal returns (bool) {\\n    // short circuit if already seigniorage is given.\\n    if (block.number <= _lastSeigBlock) {\\n      return false;\\n    }\\n\\n    if (RefactorCoinageSnapshotI(_tot).totalSupply() == 0) {\\n      _lastSeigBlock = block.number;\\n      return false;\\n    }\\n\\n    uint256 prevTotalSupply;\\n    uint256 nextTotalSupply;\\n\\n    // 1. increase total supply of {tot} by maximum seigniorages * staked rate\\n    //    staked rate = total staked amount / total supply of (W)TON\\n\\n    prevTotalSupply = _tot.totalSupply();\\n\\n    // maximum seigniorages\\n    uint256 maxSeig = _calcNumSeigBlocks() * _seigPerBlock;\\n\\n    // total supply of (W)TON\\n    uint256 tos = ((ITON(_ton).totalSupply() - ITON(_ton).balanceOf(_wton)) * (10 ** 9)) + (_tot.totalSupply());  // consider additional TOT balance as total supply\\n\\n    // maximum seigniorages * staked rate\\n    uint256 stakedSeig = rdiv(\\n      rmul(\\n        maxSeig,\\n        // total staked amount\\n        _tot.totalSupply()\\n      ),\\n      tos\\n    );\\n\\n    // pseig\\n    uint256 totalPseig = rmul(maxSeig - stakedSeig, relativeSeigRate);\\n\\n    nextTotalSupply = prevTotalSupply + stakedSeig + totalPseig;\\n    _lastSeigBlock = block.number;\\n\\n    _tot.setFactor(_calcNewFactor(prevTotalSupply, nextTotalSupply, _tot.factor()));\\n\\n    // TODO: reduce computation\\n    // DEV ONLY\\n    emit CommitLog1(\\n      _tot.totalSupply(),\\n      tos,\\n      prevTotalSupply,\\n      nextTotalSupply\\n    );\\n\\n    uint256 unstakedSeig = maxSeig - stakedSeig;\\n    uint256 powertonSeig;\\n    uint256 daoSeig;\\n    uint256 relativeSeig;\\n\\n    if (address(_powerton) != address(0)) {\\n      powertonSeig = rmul(unstakedSeig, powerTONSeigRate);\\n      IWTON(_wton).mint(address(_powerton), powertonSeig);\\n      IPowerTON(_powerton).updateSeigniorage(powertonSeig);\\n    }\\n\\n    if (dao != address(0)) {\\n      daoSeig = rmul(unstakedSeig, daoSeigRate);\\n      IWTON(_wton).mint(address(dao), daoSeig);\\n    }\\n\\n    if (relativeSeigRate != 0) {\\n      relativeSeig = totalPseig;\\n      accRelativeSeig = accRelativeSeig + relativeSeig;\\n    }\\n\\n    emit SeigGiven(msg.sender, maxSeig, stakedSeig, unstakedSeig, powertonSeig, relativeSeig);\\n\\n    return true;\\n  }\\n\\n\\n  //////////////////////////////\\n  // Storage getters\\n  //////////////////////////////\\n\\n  // solium-disable\\n  function registry() external view returns (address) { return address(_registry); }\\n  function depositManager() external view returns (address) { return address(_depositManager); }\\n  function ton() external view returns (address) { return address(_ton); }\\n  function wton() external view returns (address) { return address(_wton); }\\n  function powerton() external view returns (address) { return address(_powerton); }\\n  function tot() external view returns (address) { return address(_tot); }\\n  function coinages(address layer2) external view returns (address) { return address(_coinages[layer2]); }\\n  function commissionRates(address layer2) external view returns (uint256) { return _commissionRates[layer2]; }\\n  function isCommissionRateNegative(address layer2) external view returns (bool) { return _isCommissionRateNegative[layer2]; }\\n\\n  function lastCommitBlock(address layer2) external view returns (uint256) { return _lastCommitBlock[layer2]; }\\n  function seigPerBlock() external view returns (uint256) { return _seigPerBlock; }\\n  function lastSeigBlock() external view returns (uint256) { return _lastSeigBlock; }\\n  function pausedBlock() external view returns (uint256) { return _pausedBlock; }\\n  function unpausedBlock() external view returns (uint256) { return _unpausedBlock; }\\n\\n  function DEFAULT_FACTOR() external pure returns (uint256) { return _DEFAULT_FACTOR; }\\n  // solium-enable\\n\\n\\n  //====\\n  function renounceMinter(address target) public onlyOwner {\\n    MinterRoleRenounceTarget(target).renounceMinter();\\n  }\\n\\n  function renouncePauser(address target) public onlyOwner {\\n    PauserRoleRenounceTarget(target).renouncePauser();\\n  }\\n\\n  function renounceOwnership(address target) public onlyOwner {\\n    OwnableTarget(target).renounceOwnership();\\n  }\\n\\n  function transferOwnership(address target, address newOwner) public onlyOwner {\\n    OwnableTarget(target).transferOwnership(newOwner);\\n  }\\n\\n  //=====\\n\\n}\\n\",\"keccak256\":\"0x18d7a64e93357c884b6383319882d71a0503588258802920b0c4b61ef7fc82c2\",\"license\":\"MIT\"},\"contracts/stake/managers/SeigManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { RefactorCoinageSnapshotI } from \\\"../interfaces/RefactorCoinageSnapshotI.sol\\\";\\n\\n/// @title\\n/// @notice\\ncontract SeigManagerStorage   {\\n\\n    //////////////////////////////\\n    // Constants\\n    //////////////////////////////\\n\\n    uint256 constant public RAY = 10 ** 27; // 1 RAY\\n    uint256 constant internal _DEFAULT_FACTOR = RAY;\\n\\n    uint256 constant public MAX_VALID_COMMISSION = RAY; // 1 RAY\\n    uint256 constant public MIN_VALID_COMMISSION = 10 ** 25; // 0.01 RAY\\n\\n    //////////////////////////////\\n    // Common contracts\\n    //////////////////////////////\\n\\n    address internal _registry;\\n    address internal _depositManager;\\n    address internal _powerton;\\n    address public dao;\\n\\n    //////////////////////////////\\n    // Token-related\\n    //////////////////////////////\\n\\n    // TON token contract\\n    address internal _ton;\\n\\n    // WTON token contract\\n    address internal _wton; // TODO: use mintable erc20!\\n\\n    // contract factory\\n    address public factory;\\n\\n    // track total deposits of each layer2.\\n    RefactorCoinageSnapshotI internal _tot;\\n\\n    // coinage token for each layer2.\\n    mapping (address => RefactorCoinageSnapshotI) internal _coinages;\\n\\n    // last commit block number for each layer2.\\n    mapping (address => uint256) internal _lastCommitBlock;\\n\\n    // total seigniorage per block\\n    uint256 internal _seigPerBlock;\\n\\n    // the block number when seigniorages are given\\n    uint256 internal _lastSeigBlock;\\n\\n    // block number when paused or unpaused\\n    uint256 internal _pausedBlock;\\n    uint256 internal _unpausedBlock;\\n\\n    // commission rates in RAY\\n    mapping (address => uint256) internal _commissionRates;\\n\\n    // whether commission is negative or not (default=possitive)\\n    mapping (address => bool) internal _isCommissionRateNegative;\\n\\n    // setting commissionrate delay\\n    uint256 public adjustCommissionDelay;\\n    mapping (address => uint256) public delayedCommissionBlock;\\n    mapping (address => uint256) public delayedCommissionRate;\\n    mapping (address => bool) public delayedCommissionRateNegative;\\n\\n    // minimum deposit amount\\n    uint256 public minimumAmount;\\n\\n    uint256 public powerTONSeigRate;\\n    uint256 public daoSeigRate;\\n    uint256 public relativeSeigRate;\\n\\n    uint256 public accRelativeSeig;\\n\\n    bool public paused;\\n}\\n\",\"keccak256\":\"0xb1ee6257c839c8d74ac49c8b7a3e91407034316cd037571ab75d431701106cad\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061595280620000216000396000f3fe608060405234801561001057600080fd5b50600436106106885760003560e01c80636d4354211161035b578063ac893219116101c8578063d547741f11610104578063f35c89e8116100ad578063f850ffaa11610087578063f850ffaa14610e8e578063f8951f4614610ea1578063fa9789c814610eb4578063fad8b32a14610ec757600080fd5b8063f35c89e814610e56578063f5b541a614610e5e578063f822934814610e8557600080fd5b8063e4034832116100de578063e403483214610e1d578063eeb4a9c814610e30578063f2fde38b14610e4357600080fd5b8063d547741f14610de1578063df7fbef014610df4578063e2fe8fd114610dfd57600080fd5b8063c59f104611610171578063ce4cb8761161014b578063ce4cb87614610d8c578063ce6c035514610d9f578063cfbd488514610da7578063d539139314610dba57600080fd5b8063c59f104614610d32578063cbfebe6214610d5b578063cc48b94714610d7b57600080fd5b8063b911135f116101a2578063b911135f14610ced578063bb0c829814610d16578063c45a015514610d1f57600080fd5b8063ac89321914610cbf578063ac8a584a14610cd2578063ae3458f814610ce557600080fd5b80638f32d59b11610297578063a0474ef511610240578063a415d8dc1161021a578063a415d8dc14610c64578063a7dcc85014610c77578063aa271e1a14610c89578063ac753a7a14610c9c57600080fd5b8063a0474ef514610c38578063a16d6aa714610c4b578063a217fddf14610c5c57600080fd5b806398650275116102715780639865027514610c0a5780639870d7fe14610c125780639c877e4714610c2557600080fd5b80638f32d59b14610b8757806391d1485414610bbe578063983b2d5614610bf757600080fd5b80637aeccce911610304578063833a774f116102de578063833a774f14610b495780638456cb5914610b5c5780638bf91dc414610b645780638d62d94914610b7657600080fd5b80637aeccce914610afc5780637b056c1b14610b0f5780637b10399914610b3857600080fd5b8063715018a611610335578063715018a614610ad957806375829def14610ae1578063764a785614610af457600080fd5b80636d43542114610aa05780636d70f7ae14610ab35780637048027514610ac657600080fd5b80634162169f116104f9578063552033c4116104355780635f112c68116103de57806363a8fd89116103b857806363a8fd8914610a5c5780636637b88214610a695780636c578c1d14610a7c5780636c7ac9d814610a8f57600080fd5b80635f112c6814610a385780635f40a34914610a4b5780636304a62414610a5357600080fd5b80635998a8d71161040f5780635998a8d7146109f65780635a16a416146109ff5780635c975abb14610a2b57600080fd5b8063552033c41461086b578063558c5dda146109db57806358d00cd6146109ee57600080fd5b806348c8577e116104a25780634c75ab9c1161047c5780634c75ab9c1461095557806350d2a27614610968578063530adbb414610991578063550d01a3146109b857600080fd5b806348c8577e146109035780634a393149146109165780634c063c191461092957600080fd5b80634224ed66116104d35780634224ed66146108ca57806342623360146108dd57806346a99fe7146108f057600080fd5b80634162169f1461089157806341813020146108a457806341eb24bb146108b757600080fd5b80632f17250a116105c8578063389ed267116105715780633e832e1d1161054b5780633e832e1d1461083e5780633f4ba83a146108635780634123196f1461086b578063412c6d501461087e57600080fd5b8063389ed267146107f157806338bf3cfa146108185780633c4911731461082b57600080fd5b806332053c99116105a257806332053c99146107c357806332847953146107cb57806336568abe146107de57600080fd5b80632f17250a1461078a5780632f2ff15d1461079d5780633092afd5146107b057600080fd5b8063248a9ca31161063557806325e90db41161060f57806325e90db41461075457806328050c2f1461075c5780632ab6f8db1461076f5780632d1bdec81461077757600080fd5b8063248a9ca31461071557806324d7806c1461073857806325374a9a1461074b57600080fd5b80631785f53c116106665780631785f53c146106dd5780631cc47890146106f05780631e1f0b601461070257600080fd5b806301ffc9a71461068d57806303e1cc27146106b55780630ceb6780146106ca575b600080fd5b6106a061069b3660046153d1565b610eda565b60405190151581526020015b60405180910390f35b6106c86106c33660046153fb565b610eeb565b005b6106c86106d8366004615429565b610f85565b6106c86106eb366004615429565b6110ba565b6013545b6040519081526020016106ac565b6106a0610710366004615429565b6110ea565b6106f46107233660046153fb565b60009081526005602052604090206001015490565b6106a0610746366004615429565b6111a4565b6106f4601d5481565b6106c86111e4565b6106c861076a366004615446565b611210565b6106c86112b1565b6106c86107853660046153fb565b6112db565b6106f4610798366004615429565b611305565b6106c86107ab366004615472565b6113f0565b6106c86107be366004615429565b611415565b6012546106f4565b6106c86107d93660046154a2565b611464565b6106c86107ec366004615472565b6115e4565b6106f47ffcb9fcbfa83b897fb2d5cf4b58962164105c1e71489a37ef3ae0db3fdce576f681565b6106c8610826366004615429565b611670565b6106c8610839366004615429565b6116eb565b6008546001600160a01b03165b6040516001600160a01b0390911681526020016106ac565b6106c861173a565b6106f46b033b2e3c9fd0803ce800000081565b6106a061088c36600461552a565b61185a565b60095461084b906001600160a01b031681565b6106c86108b2366004615429565b611b30565b6106c86108c5366004615429565b611b77565b6106a06108d8366004615579565b611bd7565b6106f46108eb366004615429565b611e53565b6106c86108fe3660046155bb565b611fee565b6106f461091136600461552a565b61217e565b6106a061092436600461552a565b612193565b61084b610937366004615429565b6001600160a01b039081166000908152600e60205260409020541690565b6106f4610963366004615446565b612249565b61084b6109763660046153d1565b6003602052600090815260409020546001600160a01b031681565b6106f47fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab681565b6106a06109c6366004615429565b60026020526000908152604090205460ff1681565b6106c86109e936600461552a565b6123ec565b6106f4612497565b6106f4601c5481565b6106a0610a0d366004615429565b6001600160a01b031660009081526015602052604090205460ff1690565b601f546106a09060ff1681565b6106c8610a46366004615429565b6126d8565b6010546106f4565b6106f4601b5481565b6000546106a09060ff1681565b6106c8610a77366004615429565b612738565b6106c8610a8a366004615429565b61277f565b6007546001600160a01b031661084b565b6106c8610aae36600461563f565b6127ce565b6106a0610ac1366004615429565b612852565b6106c8610ad4366004615429565b612892565b6106c86128c2565b6106c8610aef366004615429565b6128f2565b6106a06129db565b6106a0610b0a36600461563f565b6131a7565b6106f4610b1d366004615429565b6001600160a01b031660009081526014602052604090205490565b6006546001600160a01b031661084b565b6106a0610b57366004615429565b61331a565b6106c861347d565b6b033b2e3c9fd0803ce80000006106f4565b600b546001600160a01b031661084b565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166106a0565b6106a0610bcc366004615472565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6106c8610c05366004615429565b6135a0565b6106c86135ef565b6106c8610c20366004615429565b613619565b6106c8610c333660046153fb565b613668565b6106f4610c463660046153fb565b6136f9565b600d546001600160a01b031661084b565b6106f4600081565b6106a0610c72366004615429565b613767565b6106f46a084595161401484a00000081565b6106a0610c97366004615429565b6137a7565b6106a0610caa366004615429565b60196020526000908152604090205460ff1681565b6106c8610ccd366004615429565b6137e7565b6106c8610ce0366004615429565b61382e565b6106c861387d565b61084b610cfb3660046153fb565b6001602052600090815260409020546001600160a01b031681565b6106f4601a5481565b600c5461084b906001600160a01b031681565b6106f4610d40366004615429565b6001600160a01b03166000908152600f602052604090205490565b6106f4610d69366004615429565b60176020526000908152604090205481565b600a546001600160a01b031661084b565b6106f4610d9a36600461563f565b613906565b6106f461395f565b6106c8610db5366004615429565b6139cd565b6106f47ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6106c8610def366004615472565b613a18565b6106f460165481565b6106f4610e0b366004615429565b60186020526000908152604090205481565b6106c8610e2b3660046153fb565b613a3d565b6106c8610e3e3660046153fb565b613ace565b6106c8610e51366004615429565b613af8565b6011546106f4565b6106f47f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b6106f4601e5481565b6106a0610e9c36600461552a565b613b26565b6106c8610eaf36600461566d565b613f2c565b6106f4610ec236600461563f565b614010565b6106c8610ed5366004615429565b614290565b6000610ee5826142df565b92915050565b610ef4336111a4565b610f195760405162461bcd60e51b8152600401610f10906156cf565b60405180910390fd5b600081118015610f3457506b033b2e3c9fd0803ce800000081105b610f805760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b601c55565b610fc46040518060400160405280601d81526020017f6f6e6c794d696e7465724f7241646d696e206d73672e73656e6465722000000081525033614304565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d068546020526040902054610fff9060ff16614349565b611008336111a4565b8061104157503360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604090205460ff165b61108d5760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f6e6c794d696e7465724f7241646d696e00000000000000000000006044820152606401610f10565b6110b77fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab6826113f0565b50565b6110c3336111a4565b6110df5760405162461bcd60e51b8152600401610f10906156cf565b6110b76000826115e4565b6000816001600160a01b031663764a78566040518163ffffffff1660e01b81526004016020604051808303816000875af115801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190615712565b61119c5760405162461bcd60e51b815260206004820152601660248201527f6661696c20757064617465536569676e696f72616765000000000000000000006044820152606401610f10565b506001919050565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610ee5565b61120e7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab6336115e4565b565b611219336111a4565b6112355760405162461bcd60e51b8152600401610f10906156cf565b600d546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f19906044016020604051808303816000875af1158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ac9190615712565b505050565b61120e7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c336115e4565b6112e4336111a4565b6113005760405162461bcd60e51b8152600401610f10906156cf565b601655565b600080336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a919061572f565b6001600160a01b038481166000908152600e6020526040908190205490516370a0823160e01b8152838316600482015292935016906370a0823190602401602060405180830381865afa1580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e9919061574c565b9392505050565b60008281526005602052604090206001015461140b8161438a565b6112ac8383614394565b61141e336111a4565b61143a5760405162461bcd60e51b8152600401610f10906156cf565b6110b77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9826115e4565b61146d336111a4565b6114895760405162461bcd60e51b8152600401610f10906156cf565b60005b818110156115de5760008383838181106114a8576114a8615765565b90506020020160208101906114bd9190615429565b604051634c1d96ab60e11b81526001600160a01b0387811660048301529192509082169063983b2d5690602401600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b50505050806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0388811660048301528416925063f2fde38b9150602401600060405180830381600087803b1580156115b257600080fd5b505af11580156115c6573d6000803e3d6000fd5b505050505080806115d690615791565b91505061148c565b50505050565b6001600160a01b03811633146116625760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610f10565b61166c8282614436565b5050565b611679336111a4565b6116955760405162461bcd60e51b8152600401610f10906156cf565b806001600160a01b031663715018a66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116d057600080fd5b505af11580156116e4573d6000803e3d6000fd5b5050505050565b6116f4336111a4565b6117105760405162461bcd60e51b8152600401610f10906156cf565b6110b77fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab682613a18565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166117c45760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610f10565b601f5460ff166118165760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610f10565b43601355601f805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b6007546000906001600160a01b031633146118b75760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610f10565b6001600160a01b038085166000908152600e60205260409020548591166119375760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b61194185856144b9565b15611a26576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa1580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c6919061574c565b6119d091906157aa565b9050601a54811015611a245760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610f10565b505b600d546040516340c10f1960e01b81526001600160a01b03878116600483015260248201869052909116906340c10f19906044016020604051808303816000875af1158015611a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d9190615712565b506001600160a01b038581166000908152600e6020526040908190205490516340c10f1960e01b81528683166004820152602481018690529116906340c10f19906044016020604051808303816000875af1158015611b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b249190615712565b50600195945050505050565b611b39336111a4565b611b555760405162461bcd60e51b8152600401610f10906156cf565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b611b80336111a4565b611b9c5760405162461bcd60e51b8152600401610f10906156cf565b806001600160a01b0316636ef8d66d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116d057600080fd5b60065460009084906001600160a01b0316331480611c675750806001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c52919061572f565b6001600160a01b0316336001600160a01b0316145b611cb35760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f6e6c7952656769737472794f724f70657261746f720000000000006044820152606401610f10565b831580611ce25750836a084595161401484a00000011158015611ce257506b033b2e3c9fd0803ce80000008411155b611d625760405162461bcd60e51b8152602060048201526044602482018190527f536569674d616e616765723a20636f6d6d697373696f6e2072617465206d7573908201527f742062652030206f72206265747765656e20312052415920616e6420302e30316064820152632052415960e01b608482015260a401610f10565b6001600160a01b038516600090815260146020526040812054601654909103611dbb576001600160a01b038616600090815260146020908152604080832088905560159091529020805460ff1916851515179055611e03565b601654611dc890436157aa565b6001600160a01b038716600090815260176020908152604080832093909355601881528282208890556019905220805460ff19168515151790555b60408051828152602081018790526001600160a01b038816917f11841078e38c91feada06e1f8ded3697ab2dadc2583c52b14109b82ccd4f77d7910160405180910390a250600195945050505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd919061574c565b905060005b81811015611fe75760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015611f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f48919061572f565b6001600160a01b038181166000908152600e6020526040908190205490516370a0823160e01b8152888316600482015292935016906370a0823190602401602060405180830381865afa158015611fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc7919061574c565b611fd190856157aa565b9350508080611fdf90615791565b915050611ed2565b5050919050565b600a546001600160a01b03161580156120075750601154155b6120535760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610f10565b600a80546001600160a01b03808a166001600160a01b031992831617909255600b805489841690831617905560068054888416908316179055600780548784169083161790556010859055600c8054928516929091168217905560408051631dd70c0360e21b815290516000929163775c300c916004828101926020929190829003018187875af11580156120ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612110919061572f565b90506001600160a01b0381166121535760405162461bcd60e51b81526020600482015260086024820152671e995c9bc81d1bdd60c21b6044820152606401610f10565b600d80546001600160a01b0319166001600160a01b0392909216919091179055601155505050505050565b600061218b848484614539565b949350505050565b600a546000906001600160a01b03163314806121b95750600b546001600160a01b031633145b61222b5760405162461bcd60e51b815260206004820152603160248201527f536569674d616e616765723a206f6e6c7920544f4e206f722057544f4e20636160448201527f6e2063616c6c206f6e5472616e736665720000000000000000000000000000006064820152608401610f10565b601f5460ff1661223f5761223d614680565b505b5060019392505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa15801561229f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c3919061574c565b905060005b818110156123e45760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa15801561231a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233e919061572f565b6001600160a01b038181166000908152600e60205260409081902054905163277166bf60e11b81528983166004820152602481018990529293501690634ee2cd7e90604401602060405180830381865afa1580156123a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c4919061574c565b6123ce90856157aa565b93505080806123dc90615791565b9150506122c8565b505092915050565b6123f5336111a4565b6124115760405162461bcd60e51b8152600401610f10906156cf565b6001600160a01b038381166000908152600e6020526040908190205490516340c10f1960e01b81528483166004820152602481018490529116906340c10f19906044016020604051808303816000875af1158015612473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190615712565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612511919061574c565b905060005b8181101561261f5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015612568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258c919061572f565b6001600160a01b038082166000908152600e60209081526040808320548151634b88b8ad60e11b8152915195965090931693639711715a936004808201949183900301908290875af11580156125e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260a919061574c565b5050808061261790615791565b915050612516565b50600d60009054906101000a90046001600160a01b03166001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612675573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612699919061574c565b91507fac3d68540f9902349c72a28dc187ad15b504d68182767a2b00a3db86880507ba826040516126cc91815260200190565b60405180910390a15090565b6126e1336111a4565b6126fd5760405162461bcd60e51b8152600401610f10906156cf565b806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116d057600080fd5b612741336111a4565b61275d5760405162461bcd60e51b8152600401610f10906156cf565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b612788336111a4565b6127a45760405162461bcd60e51b8152600401610f10906156cf565b6110b77fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab6826115e4565b6127d7336111a4565b6127f35760405162461bcd60e51b8152600401610f10906156cf565b60405163f2fde38b60e01b81526001600160a01b03828116600483015283169063f2fde38b90602401600060405180830381600087803b15801561283657600080fd5b505af115801561284a573d6000803e3d6000fd5b505050505050565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff16610ee5565b61289b336111a4565b6128b75760405162461bcd60e51b8152600401610f10906156cf565b6110b76000826113f0565b6128cb336111a4565b6128e75760405162461bcd60e51b8152600401610f10906156cf565b61120e6000336115e4565b6128fb336111a4565b6129175760405162461bcd60e51b8152600401610f10906156cf565b6001600160a01b03811661296d5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610f10565b6001600160a01b03811633036129c55760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610f10565b6129d06000826113f0565b6110b76000336115e4565b336000818152600e60205260408120549091906001600160a01b0316612a5a5760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b601f5460ff1615612a6d57600191505090565b6011544311612abe5760405162461bcd60e51b815260206004820152601b60248201527f6c617374207365696720626c6f636b206973206e6f74207061737400000000006044820152606401610f10565b6000612ac933611305565b9050601a54811015612b1d5760405162461bcd60e51b815260206004820152601d60248201527f6d696e696d756d416d6f756e7420697320696e73756666696369656e740000006044820152606401610f10565b336000908152600e60209081526040808320548151630a9ee07f60e31b815291516001600160a01b03909116939284926354f703f892600480830193928290030181865afa158015612b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b97919061574c565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c12919061574c565b9050612c1c614680565b50336000908152600f6020908152604080832043905580516318160ddd60e01b815290516001600160a01b038716926318160ddd92600480820193918290030181865afa158015612c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c95919061574c565b600d546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d07919061574c565b9050808210612d495760405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a2600197505050505050505090565b6000612d5583836157bd565b90506000336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbb919061572f565b336000818152601560205260408120549293509160ff1690612de1908a88878588614d82565b8093508196505050886001600160a01b031663817e9d31612e6488888d6001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5f919061574c565b614f9d565b6040518263ffffffff1660e01b8152600401612e8291815260200190565b6020604051808303816000875af1158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190615712565b508115612fae578015612f395760405163079cc67960e41b81526001600160a01b038481166004830152602482018490528a16906379cc679090604401600060405180830381600087803b158015612f1c57600080fd5b505af1158015612f30573d6000803e3d6000fd5b50505050612fae565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490528a16906340c10f19906044016020604051808303816000875af1158015612f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fac9190615712565b505b6000896001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613012919061574c565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308d919061574c565b600b546007546040516340c10f1960e01b81526001600160a01b039182166004820152602481018a905292935016906340c10f19906044016020604051808303816000875af11580156130e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131089190615712565b5060405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a260408051438152602081018a9052908101889052606081018a9052608081018b905260a0810182905260c0810183905233907fc93b8f82f3855a72b1cd7998a29e27df8650ab3c2b172a741887d950dbbad40d9060e00160405180910390a260019d505050505050505050505050505090565b3360009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff166132355760405162461bcd60e51b815260206004820152602760248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f74206120636861604482015266363632b733b2b960c91b6064820152608401610f10565b6001600160a01b038084166000908152600e60205260409020548491166132b55760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b6040516306394c9b60e01b81526001600160a01b0384811660048301528516906306394c9b90602401600060405180830381600087803b1580156132f857600080fd5b505af115801561330c573d6000803e3d6000fd5b506001979650505050505050565b6006546000906001600160a01b031633146133775760405162461bcd60e51b815260206004820152601060248201527f6e6f74206f6e6c795265676973747279000000000000000000000000000000006044820152606401610f10565b6001600160a01b038281166000908152600e60205260409020541661119c57600c5460408051631dd70c0360e21b815290516000926001600160a01b03169163775c300c916004808301926020929190829003018187875af11580156133e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613405919061572f565b6001600160a01b038481166000818152600f60209081526040808320439055600e82529182902080546001600160a01b03191694861694851790559051928352929350917f124cac1e701d08d642237ad795ddd275670e12f2cd956a26709721c68084c2b2910160405180910390a250506001919050565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166135075760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610f10565b601f5460ff161561355a5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610f10565b43601255601f805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001611850565b905090565b6135a9336111a4565b6135c55760405162461bcd60e51b8152600401610f10906156cf565b6110b77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9826113f0565b61120e7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9336115e4565b613622336111a4565b61363e5760405162461bcd60e51b8152600401610f10906156cf565b6110b77f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826113f0565b613671336111a4565b61368d5760405162461bcd60e51b8152600401610f10906156cf565b6000811180156136a857506b033b2e3c9fd0803ce800000081105b6136f45760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b601b55565b600d54604051630981b24d60e41b8152600481018390526000916001600160a01b03169063981b24d090602401602060405180830381865afa158015613743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee5919061574c565b6001600160a01b03811660009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff16610ee5565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610ee5565b6137f0336111a4565b61380c5760405162461bcd60e51b8152600401610f10906156cf565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b613837336111a4565b6138535760405162461bcd60e51b8152600401610f10906156cf565b6110b77f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826115e4565b613886336111a4565b6138a25760405162461bcd60e51b8152600401610f10906156cf565b600b60009054906101000a90046001600160a01b03166001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156138f257600080fd5b505af11580156115de573d6000803e3d6000fd5b6001600160a01b038281166000908152600e60205260408082205490516370a0823160e01b81528484166004820152919216906370a0823190602401602060405180830381865afa1580156113c5573d6000803e3d6000fd5b600d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156139a9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359b919061574c565b6139d6336111a4565b6139f25760405162461bcd60e51b8152600401610f10906156cf565b6110b77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b600082815260056020526040902060010154613a338161438a565b6112ac8383614436565b613a46336111a4565b613a625760405162461bcd60e51b8152600401610f10906156cf565b600081118015613a7d57506b033b2e3c9fd0803ce800000081105b613ac95760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b601d55565b613ad7336111a4565b613af35760405162461bcd60e51b8152600401610f10906156cf565b601a55565b613b01336111a4565b613b1d5760405162461bcd60e51b8152600401610f10906156cf565b6110b7816128f2565b6007546000906001600160a01b03163314613b835760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610f10565b6001600160a01b038085166000908152600e6020526040902054859116613c035760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b6001600160a01b038581166000908152600e6020526040908190205490516370a0823160e01b81528683166004820152859291909116906370a0823190602401602060405180830381865afa158015613c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c84919061574c565b1015613cf85760405162461bcd60e51b815260206004820152602c60248201527f536569674d616e616765723a20696e73756666696369616e742062616c616e6360448201527f6520746f20756e7374616b6500000000000000000000000000000000000000006064820152608401610f10565b613d0285856144b9565b15613de7576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa158015613d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d87919061574c565b613d9191906157bd565b9050601a54811015613de55760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610f10565b505b6000613df4868686614539565b600d549091506001600160a01b03166379cc679087613e1384886157aa565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613e5957600080fd5b505af1158015613e6d573d6000803e3d6000fd5b505050506001600160a01b038681166000908152600e60205260409081902054905163079cc67960e41b81528783166004820152602481018790529116906379cc679090604401600060405180830381600087803b158015613ece57600080fd5b505af1158015613ee2573d6000803e3d6000fd5b505060408051878152602081018590527f650f673bb96a43afff4620ecc3f3e38e0cbfddebde9894e951ba2ceff7472f60935001905060405180910390a150600195945050505050565b613f35336111a4565b613f515760405162461bcd60e51b8152600401610f10906156cf565b6b033b2e3c9fd0803ce8000000601d54601c54601b54613f7191906157aa565b613f7b91906157aa565b1115613fc95760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b600880546001600160a01b039889166001600160a01b0319918216179091556009805497909816961695909517909555601b92909255601c55601d55601691909155601a55565b6001600160a01b038083166000908152600e60209081526040808320548151630a9ee07f60e31b8152915193941692849284926354f703f892600480830193928290030181865afa158015614069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408d919061574c565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f3919061574c565b600d546040516370a0823160e01b81526001600160a01b038981166004830152929350600092909116906370a0823190602401602060405180830381865afa158015614143573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614167919061574c565b90506000614176838386614f9d565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000916141fa916141f4918916906370a0823190602401602060405180830381865afa1580156141ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ee919061574c565b87614fae565b83614fe4565b6001600160a01b038a81166000908152600e6020526040908190205490516370a0823160e01b81528b8316600482015292935016906370a0823190602401602060405180830381865afa158015614255573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614279919061574c565b61428390826157bd565b9998505050505050505050565b614299336111a4565b6142b55760405162461bcd60e51b8152600401610f10906156cf565b6110b77f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82613a18565b60006001600160e01b03198216637965db0b60e01b1480610ee55750610ee582615017565b61166c828260405160240161431a929190615820565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052615053565b60405181151560248201526110b79060440160408051601f198184030181529190526020810180516001600160e01b03166332458eed60e01b179052615053565b6110b7813361505c565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1661166c5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556143f23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff161561166c5760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000826001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451d919061572f565b6001600160a01b0316826001600160a01b031614905092915050565b6001600160a01b038084166000908152600e602090815260408083205481516318160ddd60e01b81529151939485949116926318160ddd92600480820193918290030181865afa158015614591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b5919061574c565b600d546040516370a0823160e01b81526001600160a01b038881166004830152929350600092909116906370a0823190602401602060405180830381865afa158015614605573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614629919061574c565b9050808211801561464a5750670de0b6b3a764000061464882846157bd565b105b1561465a576000925050506113e9565b61467661467061466a84846157bd565b86614fe4565b83614fae565b9695505050505050565b600060115443116146915750600090565b600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614708919061574c565b600003614719575043601155600090565b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561476f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614793919061574c565b915060006010546147a26150d1565b6147ac919061584b565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614803573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614827919061574c565b600a54600b546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015614873573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614897919061574c565b600a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061490e919061574c565b61491891906157bd565b61492690633b9aca0061584b565b61493091906157aa565b905060006149b761467084600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561498e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149b2919061574c565b614fe4565b905060006149d06149c883866157bd565b601d54614fe4565b9050806149dd83886157aa565b6149e791906157aa565b43601155600d5460408051630a9ee07f60e31b815290519297506001600160a01b039091169163817e9d3191614a47918a918a9186916354f703f89160048083019260209291908290030181865afa158015612e3b573d6000803e3d6000fd5b6040518263ffffffff1660e01b8152600401614a6591815260200190565b6020604051808303816000875af1158015614a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aa89190615712565b50600d54604080516318160ddd60e01b815290517f41a79a497d1457df24c25ab99f22349ae9aef4468429f0a781216e8dcf80c628926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015614b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b36919061574c565b604080519182526020820186905281018890526060810187905260800160405180910390a16000614b6783866157bd565b600854909150600090819081906001600160a01b031615614c6957614b8e84601b54614fe4565b600b546008546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292955016906340c10f19906044016020604051808303816000875af1158015614be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c099190615712565b5060085460405163027aa37b60e01b8152600481018590526001600160a01b039091169063027aa37b90602401600060405180830381600087803b158015614c5057600080fd5b505af1158015614c64573d6000803e3d6000fd5b505050505b6009546001600160a01b031615614d0357614c8684601c54614fe4565b600b546009546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292945016906340c10f19906044016020604051808303816000875af1158015614cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d019190615712565b505b601d5415614d205784905080601e54614d1c91906157aa565b601e555b6040805189815260208101889052908101859052606081018490526080810182905233907f0264534168fa7304ade59fc89758924d2288c7dcfd242dd680b668c80449c2829060a00160405180910390a260019a505050505050505050505090565b6001600160a01b03861660009081526017602052604081205481904310801590614dc357506001600160a01b03881660009081526017602052604090205415155b15614e17576001600160a01b0388166000908152601860209081526040808320546014835281842055601982528083205460158352818420805460ff191660ff909216151591909117905560179091528120555b33600090815260146020526040902054614e3186886157aa565b925080600003614e415750614f92565b84614e6457614e508682614fe4565b9150614e5c82846157bd565b925050614f92565b86600003614e725750614f92565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908a16906370a0823190602401602060405180830381865afa158015614ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ee0919061574c565b905080600003614ef1575050614f92565b6000614efd828a614fae565b9050614f12614f0c8983614fe4565b84614fe4565b935060006b033b2e3c9fd0803ce80000008214614f4d57614f4885614f43846b033b2e3c9fd0803ce80000006157bd565b614fae565b614f4f565b845b90506b033b2e3c9fd0803ce80000008214614f7d57614f6e8183614fe4565b614f7890866157aa565b614f7f565b845b9450614f8b81876157aa565b9550505050505b965096945050505050565b600061218b614fac8484614fe4565b855b600081614fda614fca856b033b2e3c9fd0803ce8000000615127565b614fd5600286615862565b615197565b6113e99190615862565b60006b033b2e3c9fd0803ce8000000614fda6150008585615127565b614fd560026b033b2e3c9fd0803ce8000000615862565b60006301ffc9a760e01b6001600160e01b031983161480610ee55750506001600160e01b03191660009081526004602052604090205460ff1690565b6110b7816151f5565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1661166c5761508f81615216565b61509a836020615228565b6040516020016150ab929190615884565b60408051601f198184030181529082905262461bcd60e51b8252610f1091600401615905565b601f5460009060ff16156150e457600080fd5b6000601154436150f491906157bd565b9050601154601354101561510757919050565b60125460135461511791906157bd565b61512190826157bd565b91505090565b600081158061514b5750828261513d818361584b565b92506151499083615862565b145b610ee55760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610f10565b6000826151a483826157aa565b9150811015610ee55760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610f10565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6060610ee56001600160a01b03831660145b6060600061523783600261584b565b6152429060026157aa565b67ffffffffffffffff81111561525a5761525a615918565b6040519080825280601f01601f191660200182016040528015615284576020820181803683370190505b509050600360fc1b8160008151811061529f5761529f615765565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106152ce576152ce615765565b60200101906001600160f81b031916908160001a90535060006152f284600261584b565b6152fd9060016157aa565b90505b6001811115615382577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061533e5761533e615765565b1a60f81b82828151811061535457615354615765565b60200101906001600160f81b031916908160001a90535060049490941c9361537b8161592e565b9050615300565b5083156113e95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610f10565b6000602082840312156153e357600080fd5b81356001600160e01b0319811681146113e957600080fd5b60006020828403121561540d57600080fd5b5035919050565b6001600160a01b03811681146110b757600080fd5b60006020828403121561543b57600080fd5b81356113e981615414565b6000806040838503121561545957600080fd5b823561546481615414565b946020939093013593505050565b6000806040838503121561548557600080fd5b82359150602083013561549781615414565b809150509250929050565b6000806000604084860312156154b757600080fd5b83356154c281615414565b9250602084013567ffffffffffffffff808211156154df57600080fd5b818601915086601f8301126154f357600080fd5b81358181111561550257600080fd5b8760208260051b850101111561551757600080fd5b6020830194508093505050509250925092565b60008060006060848603121561553f57600080fd5b833561554a81615414565b9250602084013561555a81615414565b929592945050506040919091013590565b80151581146110b757600080fd5b60008060006060848603121561558e57600080fd5b833561559981615414565b92506020840135915060408401356155b08161556b565b809150509250925092565b600080600080600080600060e0888a0312156155d657600080fd5b87356155e181615414565b965060208801356155f181615414565b9550604088013561560181615414565b9450606088013561561181615414565b93506080880135925060a088013561562881615414565b8092505060c0880135905092959891949750929550565b6000806040838503121561565257600080fd5b823561565d81615414565b9150602083013561549781615414565b600080600080600080600060e0888a03121561568857600080fd5b873561569381615414565b965060208801356156a381615414565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b60006020828403121561572457600080fd5b81516113e98161556b565b60006020828403121561574157600080fd5b81516113e981615414565b60006020828403121561575e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016157a3576157a361577b565b5060010190565b80820180821115610ee557610ee561577b565b81810381811115610ee557610ee561577b565b60005b838110156157eb5781810151838201526020016157d3565b50506000910152565b6000815180845261580c8160208601602086016157d0565b601f01601f19169290920160200192915050565b60408152600061583360408301856157f4565b90506001600160a01b03831660208301529392505050565b8082028115828204841417610ee557610ee561577b565b60008261587f57634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516158bc8160178501602088016157d0565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516158f98160288401602088016157d0565b01602801949350505050565b6020815260006113e960208301846157f4565b634e487b7160e01b600052604160045260246000fd5b60008161593d5761593d61577b565b50600019019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106106885760003560e01c80636d4354211161035b578063ac893219116101c8578063d547741f11610104578063f35c89e8116100ad578063f850ffaa11610087578063f850ffaa14610e8e578063f8951f4614610ea1578063fa9789c814610eb4578063fad8b32a14610ec757600080fd5b8063f35c89e814610e56578063f5b541a614610e5e578063f822934814610e8557600080fd5b8063e4034832116100de578063e403483214610e1d578063eeb4a9c814610e30578063f2fde38b14610e4357600080fd5b8063d547741f14610de1578063df7fbef014610df4578063e2fe8fd114610dfd57600080fd5b8063c59f104611610171578063ce4cb8761161014b578063ce4cb87614610d8c578063ce6c035514610d9f578063cfbd488514610da7578063d539139314610dba57600080fd5b8063c59f104614610d32578063cbfebe6214610d5b578063cc48b94714610d7b57600080fd5b8063b911135f116101a2578063b911135f14610ced578063bb0c829814610d16578063c45a015514610d1f57600080fd5b8063ac89321914610cbf578063ac8a584a14610cd2578063ae3458f814610ce557600080fd5b80638f32d59b11610297578063a0474ef511610240578063a415d8dc1161021a578063a415d8dc14610c64578063a7dcc85014610c77578063aa271e1a14610c89578063ac753a7a14610c9c57600080fd5b8063a0474ef514610c38578063a16d6aa714610c4b578063a217fddf14610c5c57600080fd5b806398650275116102715780639865027514610c0a5780639870d7fe14610c125780639c877e4714610c2557600080fd5b80638f32d59b14610b8757806391d1485414610bbe578063983b2d5614610bf757600080fd5b80637aeccce911610304578063833a774f116102de578063833a774f14610b495780638456cb5914610b5c5780638bf91dc414610b645780638d62d94914610b7657600080fd5b80637aeccce914610afc5780637b056c1b14610b0f5780637b10399914610b3857600080fd5b8063715018a611610335578063715018a614610ad957806375829def14610ae1578063764a785614610af457600080fd5b80636d43542114610aa05780636d70f7ae14610ab35780637048027514610ac657600080fd5b80634162169f116104f9578063552033c4116104355780635f112c68116103de57806363a8fd89116103b857806363a8fd8914610a5c5780636637b88214610a695780636c578c1d14610a7c5780636c7ac9d814610a8f57600080fd5b80635f112c6814610a385780635f40a34914610a4b5780636304a62414610a5357600080fd5b80635998a8d71161040f5780635998a8d7146109f65780635a16a416146109ff5780635c975abb14610a2b57600080fd5b8063552033c41461086b578063558c5dda146109db57806358d00cd6146109ee57600080fd5b806348c8577e116104a25780634c75ab9c1161047c5780634c75ab9c1461095557806350d2a27614610968578063530adbb414610991578063550d01a3146109b857600080fd5b806348c8577e146109035780634a393149146109165780634c063c191461092957600080fd5b80634224ed66116104d35780634224ed66146108ca57806342623360146108dd57806346a99fe7146108f057600080fd5b80634162169f1461089157806341813020146108a457806341eb24bb146108b757600080fd5b80632f17250a116105c8578063389ed267116105715780633e832e1d1161054b5780633e832e1d1461083e5780633f4ba83a146108635780634123196f1461086b578063412c6d501461087e57600080fd5b8063389ed267146107f157806338bf3cfa146108185780633c4911731461082b57600080fd5b806332053c99116105a257806332053c99146107c357806332847953146107cb57806336568abe146107de57600080fd5b80632f17250a1461078a5780632f2ff15d1461079d5780633092afd5146107b057600080fd5b8063248a9ca31161063557806325e90db41161060f57806325e90db41461075457806328050c2f1461075c5780632ab6f8db1461076f5780632d1bdec81461077757600080fd5b8063248a9ca31461071557806324d7806c1461073857806325374a9a1461074b57600080fd5b80631785f53c116106665780631785f53c146106dd5780631cc47890146106f05780631e1f0b601461070257600080fd5b806301ffc9a71461068d57806303e1cc27146106b55780630ceb6780146106ca575b600080fd5b6106a061069b3660046153d1565b610eda565b60405190151581526020015b60405180910390f35b6106c86106c33660046153fb565b610eeb565b005b6106c86106d8366004615429565b610f85565b6106c86106eb366004615429565b6110ba565b6013545b6040519081526020016106ac565b6106a0610710366004615429565b6110ea565b6106f46107233660046153fb565b60009081526005602052604090206001015490565b6106a0610746366004615429565b6111a4565b6106f4601d5481565b6106c86111e4565b6106c861076a366004615446565b611210565b6106c86112b1565b6106c86107853660046153fb565b6112db565b6106f4610798366004615429565b611305565b6106c86107ab366004615472565b6113f0565b6106c86107be366004615429565b611415565b6012546106f4565b6106c86107d93660046154a2565b611464565b6106c86107ec366004615472565b6115e4565b6106f47ffcb9fcbfa83b897fb2d5cf4b58962164105c1e71489a37ef3ae0db3fdce576f681565b6106c8610826366004615429565b611670565b6106c8610839366004615429565b6116eb565b6008546001600160a01b03165b6040516001600160a01b0390911681526020016106ac565b6106c861173a565b6106f46b033b2e3c9fd0803ce800000081565b6106a061088c36600461552a565b61185a565b60095461084b906001600160a01b031681565b6106c86108b2366004615429565b611b30565b6106c86108c5366004615429565b611b77565b6106a06108d8366004615579565b611bd7565b6106f46108eb366004615429565b611e53565b6106c86108fe3660046155bb565b611fee565b6106f461091136600461552a565b61217e565b6106a061092436600461552a565b612193565b61084b610937366004615429565b6001600160a01b039081166000908152600e60205260409020541690565b6106f4610963366004615446565b612249565b61084b6109763660046153d1565b6003602052600090815260409020546001600160a01b031681565b6106f47fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab681565b6106a06109c6366004615429565b60026020526000908152604090205460ff1681565b6106c86109e936600461552a565b6123ec565b6106f4612497565b6106f4601c5481565b6106a0610a0d366004615429565b6001600160a01b031660009081526015602052604090205460ff1690565b601f546106a09060ff1681565b6106c8610a46366004615429565b6126d8565b6010546106f4565b6106f4601b5481565b6000546106a09060ff1681565b6106c8610a77366004615429565b612738565b6106c8610a8a366004615429565b61277f565b6007546001600160a01b031661084b565b6106c8610aae36600461563f565b6127ce565b6106a0610ac1366004615429565b612852565b6106c8610ad4366004615429565b612892565b6106c86128c2565b6106c8610aef366004615429565b6128f2565b6106a06129db565b6106a0610b0a36600461563f565b6131a7565b6106f4610b1d366004615429565b6001600160a01b031660009081526014602052604090205490565b6006546001600160a01b031661084b565b6106a0610b57366004615429565b61331a565b6106c861347d565b6b033b2e3c9fd0803ce80000006106f4565b600b546001600160a01b031661084b565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166106a0565b6106a0610bcc366004615472565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6106c8610c05366004615429565b6135a0565b6106c86135ef565b6106c8610c20366004615429565b613619565b6106c8610c333660046153fb565b613668565b6106f4610c463660046153fb565b6136f9565b600d546001600160a01b031661084b565b6106f4600081565b6106a0610c72366004615429565b613767565b6106f46a084595161401484a00000081565b6106a0610c97366004615429565b6137a7565b6106a0610caa366004615429565b60196020526000908152604090205460ff1681565b6106c8610ccd366004615429565b6137e7565b6106c8610ce0366004615429565b61382e565b6106c861387d565b61084b610cfb3660046153fb565b6001602052600090815260409020546001600160a01b031681565b6106f4601a5481565b600c5461084b906001600160a01b031681565b6106f4610d40366004615429565b6001600160a01b03166000908152600f602052604090205490565b6106f4610d69366004615429565b60176020526000908152604090205481565b600a546001600160a01b031661084b565b6106f4610d9a36600461563f565b613906565b6106f461395f565b6106c8610db5366004615429565b6139cd565b6106f47ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6106c8610def366004615472565b613a18565b6106f460165481565b6106f4610e0b366004615429565b60186020526000908152604090205481565b6106c8610e2b3660046153fb565b613a3d565b6106c8610e3e3660046153fb565b613ace565b6106c8610e51366004615429565b613af8565b6011546106f4565b6106f47f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b6106f4601e5481565b6106a0610e9c36600461552a565b613b26565b6106c8610eaf36600461566d565b613f2c565b6106f4610ec236600461563f565b614010565b6106c8610ed5366004615429565b614290565b6000610ee5826142df565b92915050565b610ef4336111a4565b610f195760405162461bcd60e51b8152600401610f10906156cf565b60405180910390fd5b600081118015610f3457506b033b2e3c9fd0803ce800000081105b610f805760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b601c55565b610fc46040518060400160405280601d81526020017f6f6e6c794d696e7465724f7241646d696e206d73672e73656e6465722000000081525033614304565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d068546020526040902054610fff9060ff16614349565b611008336111a4565b8061104157503360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604090205460ff165b61108d5760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f6e6c794d696e7465724f7241646d696e00000000000000000000006044820152606401610f10565b6110b77fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab6826113f0565b50565b6110c3336111a4565b6110df5760405162461bcd60e51b8152600401610f10906156cf565b6110b76000826115e4565b6000816001600160a01b031663764a78566040518163ffffffff1660e01b81526004016020604051808303816000875af115801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190615712565b61119c5760405162461bcd60e51b815260206004820152601660248201527f6661696c20757064617465536569676e696f72616765000000000000000000006044820152606401610f10565b506001919050565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610ee5565b61120e7fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab6336115e4565b565b611219336111a4565b6112355760405162461bcd60e51b8152600401610f10906156cf565b600d546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f19906044016020604051808303816000875af1158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ac9190615712565b505050565b61120e7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c336115e4565b6112e4336111a4565b6113005760405162461bcd60e51b8152600401610f10906156cf565b601655565b600080336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a919061572f565b6001600160a01b038481166000908152600e6020526040908190205490516370a0823160e01b8152838316600482015292935016906370a0823190602401602060405180830381865afa1580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e9919061574c565b9392505050565b60008281526005602052604090206001015461140b8161438a565b6112ac8383614394565b61141e336111a4565b61143a5760405162461bcd60e51b8152600401610f10906156cf565b6110b77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9826115e4565b61146d336111a4565b6114895760405162461bcd60e51b8152600401610f10906156cf565b60005b818110156115de5760008383838181106114a8576114a8615765565b90506020020160208101906114bd9190615429565b604051634c1d96ab60e11b81526001600160a01b0387811660048301529192509082169063983b2d5690602401600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b50505050806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0388811660048301528416925063f2fde38b9150602401600060405180830381600087803b1580156115b257600080fd5b505af11580156115c6573d6000803e3d6000fd5b505050505080806115d690615791565b91505061148c565b50505050565b6001600160a01b03811633146116625760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610f10565b61166c8282614436565b5050565b611679336111a4565b6116955760405162461bcd60e51b8152600401610f10906156cf565b806001600160a01b031663715018a66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116d057600080fd5b505af11580156116e4573d6000803e3d6000fd5b5050505050565b6116f4336111a4565b6117105760405162461bcd60e51b8152600401610f10906156cf565b6110b77fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab682613a18565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166117c45760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610f10565b601f5460ff166118165760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610f10565b43601355601f805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b6007546000906001600160a01b031633146118b75760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610f10565b6001600160a01b038085166000908152600e60205260409020548591166119375760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b61194185856144b9565b15611a26576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa1580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c6919061574c565b6119d091906157aa565b9050601a54811015611a245760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610f10565b505b600d546040516340c10f1960e01b81526001600160a01b03878116600483015260248201869052909116906340c10f19906044016020604051808303816000875af1158015611a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d9190615712565b506001600160a01b038581166000908152600e6020526040908190205490516340c10f1960e01b81528683166004820152602481018690529116906340c10f19906044016020604051808303816000875af1158015611b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b249190615712565b50600195945050505050565b611b39336111a4565b611b555760405162461bcd60e51b8152600401610f10906156cf565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b611b80336111a4565b611b9c5760405162461bcd60e51b8152600401610f10906156cf565b806001600160a01b0316636ef8d66d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116d057600080fd5b60065460009084906001600160a01b0316331480611c675750806001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c52919061572f565b6001600160a01b0316336001600160a01b0316145b611cb35760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f6e6c7952656769737472794f724f70657261746f720000000000006044820152606401610f10565b831580611ce25750836a084595161401484a00000011158015611ce257506b033b2e3c9fd0803ce80000008411155b611d625760405162461bcd60e51b8152602060048201526044602482018190527f536569674d616e616765723a20636f6d6d697373696f6e2072617465206d7573908201527f742062652030206f72206265747765656e20312052415920616e6420302e30316064820152632052415960e01b608482015260a401610f10565b6001600160a01b038516600090815260146020526040812054601654909103611dbb576001600160a01b038616600090815260146020908152604080832088905560159091529020805460ff1916851515179055611e03565b601654611dc890436157aa565b6001600160a01b038716600090815260176020908152604080832093909355601881528282208890556019905220805460ff19168515151790555b60408051828152602081018790526001600160a01b038816917f11841078e38c91feada06e1f8ded3697ab2dadc2583c52b14109b82ccd4f77d7910160405180910390a250600195945050505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd919061574c565b905060005b81811015611fe75760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015611f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f48919061572f565b6001600160a01b038181166000908152600e6020526040908190205490516370a0823160e01b8152888316600482015292935016906370a0823190602401602060405180830381865afa158015611fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc7919061574c565b611fd190856157aa565b9350508080611fdf90615791565b915050611ed2565b5050919050565b600a546001600160a01b03161580156120075750601154155b6120535760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610f10565b600a80546001600160a01b03808a166001600160a01b031992831617909255600b805489841690831617905560068054888416908316179055600780548784169083161790556010859055600c8054928516929091168217905560408051631dd70c0360e21b815290516000929163775c300c916004828101926020929190829003018187875af11580156120ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612110919061572f565b90506001600160a01b0381166121535760405162461bcd60e51b81526020600482015260086024820152671e995c9bc81d1bdd60c21b6044820152606401610f10565b600d80546001600160a01b0319166001600160a01b0392909216919091179055601155505050505050565b600061218b848484614539565b949350505050565b600a546000906001600160a01b03163314806121b95750600b546001600160a01b031633145b61222b5760405162461bcd60e51b815260206004820152603160248201527f536569674d616e616765723a206f6e6c7920544f4e206f722057544f4e20636160448201527f6e2063616c6c206f6e5472616e736665720000000000000000000000000000006064820152608401610f10565b601f5460ff1661223f5761223d614680565b505b5060019392505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa15801561229f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c3919061574c565b905060005b818110156123e45760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa15801561231a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233e919061572f565b6001600160a01b038181166000908152600e60205260409081902054905163277166bf60e11b81528983166004820152602481018990529293501690634ee2cd7e90604401602060405180830381865afa1580156123a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c4919061574c565b6123ce90856157aa565b93505080806123dc90615791565b9150506122c8565b505092915050565b6123f5336111a4565b6124115760405162461bcd60e51b8152600401610f10906156cf565b6001600160a01b038381166000908152600e6020526040908190205490516340c10f1960e01b81528483166004820152602481018490529116906340c10f19906044016020604051808303816000875af1158015612473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190615712565b600080600660009054906101000a90046001600160a01b03166001600160a01b0316630d42d4976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612511919061574c565b905060005b8181101561261f5760065460405163b7ffb17960e01b8152600481018390526000916001600160a01b03169063b7ffb17990602401602060405180830381865afa158015612568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258c919061572f565b6001600160a01b038082166000908152600e60209081526040808320548151634b88b8ad60e11b8152915195965090931693639711715a936004808201949183900301908290875af11580156125e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260a919061574c565b5050808061261790615791565b915050612516565b50600d60009054906101000a90046001600160a01b03166001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612675573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612699919061574c565b91507fac3d68540f9902349c72a28dc187ad15b504d68182767a2b00a3db86880507ba826040516126cc91815260200190565b60405180910390a15090565b6126e1336111a4565b6126fd5760405162461bcd60e51b8152600401610f10906156cf565b806001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116d057600080fd5b612741336111a4565b61275d5760405162461bcd60e51b8152600401610f10906156cf565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b612788336111a4565b6127a45760405162461bcd60e51b8152600401610f10906156cf565b6110b77fbf02bad7114723a857a3af46cea17b778a3a951c96f183784d9a2448cc479ab6826115e4565b6127d7336111a4565b6127f35760405162461bcd60e51b8152600401610f10906156cf565b60405163f2fde38b60e01b81526001600160a01b03828116600483015283169063f2fde38b90602401600060405180830381600087803b15801561283657600080fd5b505af115801561284a573d6000803e3d6000fd5b505050505050565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff16610ee5565b61289b336111a4565b6128b75760405162461bcd60e51b8152600401610f10906156cf565b6110b76000826113f0565b6128cb336111a4565b6128e75760405162461bcd60e51b8152600401610f10906156cf565b61120e6000336115e4565b6128fb336111a4565b6129175760405162461bcd60e51b8152600401610f10906156cf565b6001600160a01b03811661296d5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610f10565b6001600160a01b03811633036129c55760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610f10565b6129d06000826113f0565b6110b76000336115e4565b336000818152600e60205260408120549091906001600160a01b0316612a5a5760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b601f5460ff1615612a6d57600191505090565b6011544311612abe5760405162461bcd60e51b815260206004820152601b60248201527f6c617374207365696720626c6f636b206973206e6f74207061737400000000006044820152606401610f10565b6000612ac933611305565b9050601a54811015612b1d5760405162461bcd60e51b815260206004820152601d60248201527f6d696e696d756d416d6f756e7420697320696e73756666696369656e740000006044820152606401610f10565b336000908152600e60209081526040808320548151630a9ee07f60e31b815291516001600160a01b03909116939284926354f703f892600480830193928290030181865afa158015612b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b97919061574c565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c12919061574c565b9050612c1c614680565b50336000908152600f6020908152604080832043905580516318160ddd60e01b815290516001600160a01b038716926318160ddd92600480820193918290030181865afa158015612c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c95919061574c565b600d546040516370a0823160e01b81523360048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d07919061574c565b9050808210612d495760405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a2600197505050505050505090565b6000612d5583836157bd565b90506000336001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbb919061572f565b336000818152601560205260408120549293509160ff1690612de1908a88878588614d82565b8093508196505050886001600160a01b031663817e9d31612e6488888d6001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5f919061574c565b614f9d565b6040518263ffffffff1660e01b8152600401612e8291815260200190565b6020604051808303816000875af1158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190615712565b508115612fae578015612f395760405163079cc67960e41b81526001600160a01b038481166004830152602482018490528a16906379cc679090604401600060405180830381600087803b158015612f1c57600080fd5b505af1158015612f30573d6000803e3d6000fd5b50505050612fae565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018490528a16906340c10f19906044016020604051808303816000875af1158015612f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fac9190615712565b505b6000896001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613012919061574c565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166354f703f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308d919061574c565b600b546007546040516340c10f1960e01b81526001600160a01b039182166004820152602481018a905292935016906340c10f19906044016020604051808303816000875af11580156130e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131089190615712565b5060405133907f521cc65179761533a7c8d7a973291dd7baebb99a67edf5ef78e9c2b61a533d9590600090a260408051438152602081018a9052908101889052606081018a9052608081018b905260a0810182905260c0810183905233907fc93b8f82f3855a72b1cd7998a29e27df8650ab3c2b172a741887d950dbbad40d9060e00160405180910390a260019d505050505050505050505050505090565b3360009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff166132355760405162461bcd60e51b815260206004820152602760248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f74206120636861604482015266363632b733b2b960c91b6064820152608401610f10565b6001600160a01b038084166000908152600e60205260409020548491166132b55760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b6040516306394c9b60e01b81526001600160a01b0384811660048301528516906306394c9b90602401600060405180830381600087803b1580156132f857600080fd5b505af115801561330c573d6000803e3d6000fd5b506001979650505050505050565b6006546000906001600160a01b031633146133775760405162461bcd60e51b815260206004820152601060248201527f6e6f74206f6e6c795265676973747279000000000000000000000000000000006044820152606401610f10565b6001600160a01b038281166000908152600e60205260409020541661119c57600c5460408051631dd70c0360e21b815290516000926001600160a01b03169163775c300c916004808301926020929190829003018187875af11580156133e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613405919061572f565b6001600160a01b038481166000818152600f60209081526040808320439055600e82529182902080546001600160a01b03191694861694851790559051928352929350917f124cac1e701d08d642237ad795ddd275670e12f2cd956a26709721c68084c2b2910160405180910390a250506001919050565b3360009081527f787f97f3270d439d97068e73d6d75a066b24f84c342661f177d4e43e00e9f513602052604090205460ff166135075760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420612070617560448201526239b2b960e91b6064820152608401610f10565b601f5460ff161561355a5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610f10565b43601255601f805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001611850565b905090565b6135a9336111a4565b6135c55760405162461bcd60e51b8152600401610f10906156cf565b6110b77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9826113f0565b61120e7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9336115e4565b613622336111a4565b61363e5760405162461bcd60e51b8152600401610f10906156cf565b6110b77f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826113f0565b613671336111a4565b61368d5760405162461bcd60e51b8152600401610f10906156cf565b6000811180156136a857506b033b2e3c9fd0803ce800000081105b6136f45760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b601b55565b600d54604051630981b24d60e41b8152600481018390526000916001600160a01b03169063981b24d090602401602060405180830381865afa158015613743573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee5919061574c565b6001600160a01b03811660009081527fedec71783a10810e436f3392a073a61717130e573433fcc6591c3061a012f767602052604081205460ff16610ee5565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610ee5565b6137f0336111a4565b61380c5760405162461bcd60e51b8152600401610f10906156cf565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b613837336111a4565b6138535760405162461bcd60e51b8152600401610f10906156cf565b6110b77f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826115e4565b613886336111a4565b6138a25760405162461bcd60e51b8152600401610f10906156cf565b600b60009054906101000a90046001600160a01b03166001600160a01b031663986502756040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156138f257600080fd5b505af11580156115de573d6000803e3d6000fd5b6001600160a01b038281166000908152600e60205260408082205490516370a0823160e01b81528484166004820152919216906370a0823190602401602060405180830381865afa1580156113c5573d6000803e3d6000fd5b600d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156139a9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359b919061574c565b6139d6336111a4565b6139f25760405162461bcd60e51b8152600401610f10906156cf565b6110b77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b600082815260056020526040902060010154613a338161438a565b6112ac8383614436565b613a46336111a4565b613a625760405162461bcd60e51b8152600401610f10906156cf565b600081118015613a7d57506b033b2e3c9fd0803ce800000081105b613ac95760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b601d55565b613ad7336111a4565b613af35760405162461bcd60e51b8152600401610f10906156cf565b601a55565b613b01336111a4565b613b1d5760405162461bcd60e51b8152600401610f10906156cf565b6110b7816128f2565b6007546000906001600160a01b03163314613b835760405162461bcd60e51b815260206004820152601660248201527f6e6f74206f6e6c794465706f7369744d616e61676572000000000000000000006044820152606401610f10565b6001600160a01b038085166000908152600e6020526040902054859116613c035760405162461bcd60e51b815260206004820152602e60248201527f536569674d616e616765723a20636f696e61676520686173206e6f742062656560448201526d1b8819195c1b1bde5959081e595d60921b6064820152608401610f10565b6001600160a01b038581166000908152600e6020526040908190205490516370a0823160e01b81528683166004820152859291909116906370a0823190602401602060405180830381865afa158015613c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c84919061574c565b1015613cf85760405162461bcd60e51b815260206004820152602c60248201527f536569674d616e616765723a20696e73756666696369616e742062616c616e6360448201527f6520746f20756e7374616b6500000000000000000000000000000000000000006064820152608401610f10565b613d0285856144b9565b15613de7576001600160a01b038581166000908152600e60205260408082205490516370a0823160e01b81528784166004820152919286929116906370a0823190602401602060405180830381865afa158015613d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d87919061574c565b613d9191906157bd565b9050601a54811015613de55760405162461bcd60e51b815260206004820152601a60248201527f6d696e696d756d20616d6f756e742069732072657175697265640000000000006044820152606401610f10565b505b6000613df4868686614539565b600d549091506001600160a01b03166379cc679087613e1384886157aa565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613e5957600080fd5b505af1158015613e6d573d6000803e3d6000fd5b505050506001600160a01b038681166000908152600e60205260409081902054905163079cc67960e41b81528783166004820152602481018790529116906379cc679090604401600060405180830381600087803b158015613ece57600080fd5b505af1158015613ee2573d6000803e3d6000fd5b505060408051878152602081018590527f650f673bb96a43afff4620ecc3f3e38e0cbfddebde9894e951ba2ceff7472f60935001905060405180910390a150600195945050505050565b613f35336111a4565b613f515760405162461bcd60e51b8152600401610f10906156cf565b6b033b2e3c9fd0803ce8000000601d54601c54601b54613f7191906157aa565b613f7b91906157aa565b1115613fc95760405162461bcd60e51b815260206004820152601960248201527f657863656564656420736569676e696f726167652072617465000000000000006044820152606401610f10565b600880546001600160a01b039889166001600160a01b0319918216179091556009805497909816961695909517909555601b92909255601c55601d55601691909155601a55565b6001600160a01b038083166000908152600e60209081526040808320548151630a9ee07f60e31b8152915193941692849284926354f703f892600480830193928290030181865afa158015614069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408d919061574c565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f3919061574c565b600d546040516370a0823160e01b81526001600160a01b038981166004830152929350600092909116906370a0823190602401602060405180830381865afa158015614143573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614167919061574c565b90506000614176838386614f9d565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000916141fa916141f4918916906370a0823190602401602060405180830381865afa1580156141ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ee919061574c565b87614fae565b83614fe4565b6001600160a01b038a81166000908152600e6020526040908190205490516370a0823160e01b81528b8316600482015292935016906370a0823190602401602060405180830381865afa158015614255573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614279919061574c565b61428390826157bd565b9998505050505050505050565b614299336111a4565b6142b55760405162461bcd60e51b8152600401610f10906156cf565b6110b77f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82613a18565b60006001600160e01b03198216637965db0b60e01b1480610ee55750610ee582615017565b61166c828260405160240161431a929190615820565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052615053565b60405181151560248201526110b79060440160408051601f198184030181529190526020810180516001600160e01b03166332458eed60e01b179052615053565b6110b7813361505c565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1661166c5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556143f23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff161561166c5760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000826001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451d919061572f565b6001600160a01b0316826001600160a01b031614905092915050565b6001600160a01b038084166000908152600e602090815260408083205481516318160ddd60e01b81529151939485949116926318160ddd92600480820193918290030181865afa158015614591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b5919061574c565b600d546040516370a0823160e01b81526001600160a01b038881166004830152929350600092909116906370a0823190602401602060405180830381865afa158015614605573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614629919061574c565b9050808211801561464a5750670de0b6b3a764000061464882846157bd565b105b1561465a576000925050506113e9565b61467661467061466a84846157bd565b86614fe4565b83614fae565b9695505050505050565b600060115443116146915750600090565b600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614708919061574c565b600003614719575043601155600090565b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561476f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614793919061574c565b915060006010546147a26150d1565b6147ac919061584b565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614803573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614827919061574c565b600a54600b546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015614873573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614897919061574c565b600a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061490e919061574c565b61491891906157bd565b61492690633b9aca0061584b565b61493091906157aa565b905060006149b761467084600d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561498e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149b2919061574c565b614fe4565b905060006149d06149c883866157bd565b601d54614fe4565b9050806149dd83886157aa565b6149e791906157aa565b43601155600d5460408051630a9ee07f60e31b815290519297506001600160a01b039091169163817e9d3191614a47918a918a9186916354f703f89160048083019260209291908290030181865afa158015612e3b573d6000803e3d6000fd5b6040518263ffffffff1660e01b8152600401614a6591815260200190565b6020604051808303816000875af1158015614a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aa89190615712565b50600d54604080516318160ddd60e01b815290517f41a79a497d1457df24c25ab99f22349ae9aef4468429f0a781216e8dcf80c628926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015614b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b36919061574c565b604080519182526020820186905281018890526060810187905260800160405180910390a16000614b6783866157bd565b600854909150600090819081906001600160a01b031615614c6957614b8e84601b54614fe4565b600b546008546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292955016906340c10f19906044016020604051808303816000875af1158015614be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c099190615712565b5060085460405163027aa37b60e01b8152600481018590526001600160a01b039091169063027aa37b90602401600060405180830381600087803b158015614c5057600080fd5b505af1158015614c64573d6000803e3d6000fd5b505050505b6009546001600160a01b031615614d0357614c8684601c54614fe4565b600b546009546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292945016906340c10f19906044016020604051808303816000875af1158015614cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d019190615712565b505b601d5415614d205784905080601e54614d1c91906157aa565b601e555b6040805189815260208101889052908101859052606081018490526080810182905233907f0264534168fa7304ade59fc89758924d2288c7dcfd242dd680b668c80449c2829060a00160405180910390a260019a505050505050505050505090565b6001600160a01b03861660009081526017602052604081205481904310801590614dc357506001600160a01b03881660009081526017602052604090205415155b15614e17576001600160a01b0388166000908152601860209081526040808320546014835281842055601982528083205460158352818420805460ff191660ff909216151591909117905560179091528120555b33600090815260146020526040902054614e3186886157aa565b925080600003614e415750614f92565b84614e6457614e508682614fe4565b9150614e5c82846157bd565b925050614f92565b86600003614e725750614f92565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908a16906370a0823190602401602060405180830381865afa158015614ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ee0919061574c565b905080600003614ef1575050614f92565b6000614efd828a614fae565b9050614f12614f0c8983614fe4565b84614fe4565b935060006b033b2e3c9fd0803ce80000008214614f4d57614f4885614f43846b033b2e3c9fd0803ce80000006157bd565b614fae565b614f4f565b845b90506b033b2e3c9fd0803ce80000008214614f7d57614f6e8183614fe4565b614f7890866157aa565b614f7f565b845b9450614f8b81876157aa565b9550505050505b965096945050505050565b600061218b614fac8484614fe4565b855b600081614fda614fca856b033b2e3c9fd0803ce8000000615127565b614fd5600286615862565b615197565b6113e99190615862565b60006b033b2e3c9fd0803ce8000000614fda6150008585615127565b614fd560026b033b2e3c9fd0803ce8000000615862565b60006301ffc9a760e01b6001600160e01b031983161480610ee55750506001600160e01b03191660009081526004602052604090205460ff1690565b6110b7816151f5565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1661166c5761508f81615216565b61509a836020615228565b6040516020016150ab929190615884565b60408051601f198184030181529082905262461bcd60e51b8252610f1091600401615905565b601f5460009060ff16156150e457600080fd5b6000601154436150f491906157bd565b9050601154601354101561510757919050565b60125460135461511791906157bd565b61512190826157bd565b91505090565b600081158061514b5750828261513d818361584b565b92506151499083615862565b145b610ee55760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610f10565b6000826151a483826157aa565b9150811015610ee55760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610f10565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6060610ee56001600160a01b03831660145b6060600061523783600261584b565b6152429060026157aa565b67ffffffffffffffff81111561525a5761525a615918565b6040519080825280601f01601f191660200182016040528015615284576020820181803683370190505b509050600360fc1b8160008151811061529f5761529f615765565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106152ce576152ce615765565b60200101906001600160f81b031916908160001a90535060006152f284600261584b565b6152fd9060016157aa565b90505b6001811115615382577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061533e5761533e615765565b1a60f81b82828151811061535457615354615765565b60200101906001600160f81b031916908160001a90535060049490941c9361537b8161592e565b9050615300565b5083156113e95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610f10565b6000602082840312156153e357600080fd5b81356001600160e01b0319811681146113e957600080fd5b60006020828403121561540d57600080fd5b5035919050565b6001600160a01b03811681146110b757600080fd5b60006020828403121561543b57600080fd5b81356113e981615414565b6000806040838503121561545957600080fd5b823561546481615414565b946020939093013593505050565b6000806040838503121561548557600080fd5b82359150602083013561549781615414565b809150509250929050565b6000806000604084860312156154b757600080fd5b83356154c281615414565b9250602084013567ffffffffffffffff808211156154df57600080fd5b818601915086601f8301126154f357600080fd5b81358181111561550257600080fd5b8760208260051b850101111561551757600080fd5b6020830194508093505050509250925092565b60008060006060848603121561553f57600080fd5b833561554a81615414565b9250602084013561555a81615414565b929592945050506040919091013590565b80151581146110b757600080fd5b60008060006060848603121561558e57600080fd5b833561559981615414565b92506020840135915060408401356155b08161556b565b809150509250925092565b600080600080600080600060e0888a0312156155d657600080fd5b87356155e181615414565b965060208801356155f181615414565b9550604088013561560181615414565b9450606088013561561181615414565b93506080880135925060a088013561562881615414565b8092505060c0880135905092959891949750929550565b6000806040838503121561565257600080fd5b823561565d81615414565b9150602083013561549781615414565b600080600080600080600060e0888a03121561568857600080fd5b873561569381615414565b965060208801356156a381615414565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b60006020828403121561572457600080fd5b81516113e98161556b565b60006020828403121561574157600080fd5b81516113e981615414565b60006020828403121561575e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016157a3576157a361577b565b5060010190565b80820180821115610ee557610ee561577b565b81810381811115610ee557610ee561577b565b60005b838110156157eb5781810151838201526020016157d3565b50506000910152565b6000815180845261580c8160208601602086016157d0565b601f01601f19169290920160200192915050565b60408152600061583360408301856157f4565b90506001600160a01b03831660208301529392505050565b8082028115828204841417610ee557610ee561577b565b60008261587f57634e487b7160e01b600052601260045260246000fd5b500490565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516158bc8160178501602088016157d0565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516158f98160288401602088016157d0565b01602801949350505050565b6020815260006113e960208301846157f4565b634e487b7160e01b600052604160045260246000fd5b60008161593d5761593d61577b565b50600019019056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "SeigManager gives seigniorage to operator and WTON holders. For each commit by operator, operator (or user) will get seigniorage in propotion to the staked (or delegated) amount of WTON. [Tokens] - {tot} tracks total staked or delegated WTON of each Layer2 contract (and depositor?). - {coinages[layer2]} tracks staked or delegated WTON of user or operator to a Layer2 contract. For each commit by operator,  1. increases all layer2's balance of {tot} by (the staked amount of WTON) /     (total supply of TON and WTON) * (num blocks * seigniorage per block).  2. increases all depositors' blanace of {coinages[layer2]} in proportion to the staked amount of WTON,     up to the increased amount in step (1).  3. set the layer2's balance of {committed} as the layer2's {tot} balance. For each stake or delegate with amount of {v} to a Layer2,  1. mint {v} {coinages[layer2]} tokens to the account  2. mint {v} {tot} tokens to the layer2 contract For each unstake or undelegate (or get rewards) with amount of {v} to a Layer2,  1. burn {v} {coinages[layer2]} tokens from the account  2. burn {v + ⍺} {tot} tokens from the layer2 contract,   where ⍺ = SEIGS * staked ratio of the layer2 * withdrawal ratio of the account     - SEIGS                              = tot total supply - tot total supply at last commit from the layer2     - staked ratio of the layer2     = tot balance of the layer2 / tot total supply     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "deployCoinage(address)": {
        "details": "deploy coinage token for the layer2."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "onDeposit(address,address,uint256)": {
        "details": "Callback for a new deposit"
      },
      "onTransfer(address,address,uint256)": {
        "details": "Callback for a token transfer"
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      },
      "unpause()": {
        "details": "Called by a pauser to unpause, returns to normal state."
      },
      "updateSeigniorage()": {
        "details": "Callback for a new commit"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2705,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2709,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2713,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2717,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 674,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 24,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_roles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5325,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_registry",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5327,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_depositManager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5329,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_powerton",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5331,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "dao",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5333,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_ton",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5335,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_wton",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5337,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "factory",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5340,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_tot",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(RefactorCoinageSnapshotI)2800"
      },
      {
        "astId": 5345,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_coinages",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_contract(RefactorCoinageSnapshotI)2800)"
      },
      {
        "astId": 5349,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_lastCommitBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5351,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_seigPerBlock",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5353,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_lastSeigBlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5355,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_pausedBlock",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5357,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_unpausedBlock",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5361,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_commissionRates",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5365,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "_isCommissionRateNegative",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5367,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "adjustCommissionDelay",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 5371,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "delayedCommissionBlock",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5375,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "delayedCommissionRate",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5379,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "delayedCommissionRateNegative",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5381,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "minimumAmount",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 5383,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "powerTONSeigRate",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 5385,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "daoSeigRate",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 5387,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "relativeSeigRate",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 5389,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "accRelativeSeig",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 5391,
        "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
        "label": "paused",
        "offset": 0,
        "slot": "31",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(RefactorCoinageSnapshotI)2800": {
        "encoding": "inplace",
        "label": "contract RefactorCoinageSnapshotI",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(RefactorCoinageSnapshotI)2800)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract RefactorCoinageSnapshotI)",
        "numberOfBytes": "32",
        "value": "t_contract(RefactorCoinageSnapshotI)2800"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/stake/managers/SeigManagerMigration.sol:SeigManagerMigration",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}