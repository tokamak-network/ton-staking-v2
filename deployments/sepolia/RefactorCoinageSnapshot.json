{
  "address": "0x510036C3dDc8D0AB10B8AbEC2ECdf0Aa1dD25FfA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRefactor.Balance",
          "name": "oldBalance",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRefactor.Balance",
          "name": "newBalance",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRefactor.Balance",
          "name": "oldTotalBalance",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRefactor.Balance",
          "name": "newTotalBalance",
          "type": "tuple"
        }
      ],
      "name": "ChangedBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactorCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRefactor.Factor",
          "name": "previous",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactorCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRefactor.Factor",
          "name": "next",
          "type": "tuple"
        }
      ],
      "name": "ChangedFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shiftCount",
          "type": "uint256"
        }
      ],
      "name": "FactorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFACTOR_BOUNDARY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFACTOR_DIVIDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_allowances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountBalanceIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountBalanceSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refactoredCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Balance",
          "name": "_balance",
          "type": "tuple"
        }
      ],
      "name": "applyFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "factorSnapshotIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "factorSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refactorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceAndFactor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Balance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Factor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "getBalanceAndFactorAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Balance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Factor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAndFactor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Balance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Factor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "getTotalAndFactorAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactoredCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Balance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "factor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "refactorCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRefactor.Factor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "factor_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seigManager_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSnapshotId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "progressSnapshotId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "factor_",
          "type": "uint256"
        }
      ],
      "name": "setFactor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seigManager",
          "type": "address"
        }
      ],
      "name": "setSeigManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupplySnapshotIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupplySnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refactoredCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb9f600a74ec987d6ad2959525f9ad4fbf2429e35fc168a515b20fa23bb3f4ff",
  "receipt": {
    "to": null,
    "from": "0x757DE9c340c556b56f62eFaE859Da5e08BAAE7A2",
    "contractAddress": "0x510036C3dDc8D0AB10B8AbEC2ECdf0Aa1dD25FfA",
    "transactionIndex": 77,
    "gasUsed": "2515085",
    "logsBloom": "0x
    "blockHash": "0x318436d4df05445e4cf28734810673403e772acc890ba868926a223c0000bcc8",
    "transactionHash": "0xdb9f600a74ec987d6ad2959525f9ad4fbf2429e35fc168a515b20fa23bb3f4ff",
    "logs": [],
    "blockNumber": 4799452,
    "cumulativeGasUsed": "8917887",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6fdbdbbeb1082a0dfde1cee096e22e1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRefactor.Balance\",\"name\":\"oldBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRefactor.Balance\",\"name\":\"newBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRefactor.Balance\",\"name\":\"oldTotalBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRefactor.Balance\",\"name\":\"newTotalBalance\",\"type\":\"tuple\"}],\"name\":\"ChangedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactorCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRefactor.Factor\",\"name\":\"previous\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactorCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRefactor.Factor\",\"name\":\"next\",\"type\":\"tuple\"}],\"name\":\"ChangedFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shiftCount\",\"type\":\"uint256\"}],\"name\":\"FactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFACTOR_BOUNDARY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFACTOR_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountBalanceIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountBalanceSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Balance\",\"name\":\"_balance\",\"type\":\"tuple\"}],\"name\":\"applyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factorSnapshotIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factorSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceAndFactor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Balance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Factor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"getBalanceAndFactorAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Balance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Factor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAndFactor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Balance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Factor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"getTotalAndFactorAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Balance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactorCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRefactor.Factor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"factor_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seigManager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressSnapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"factor_\",\"type\":\"uint256\"}],\"name\":\"setFactor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"setSeigManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplySnapshotIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplySnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refactoredCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of coin age token based on ERC20 of openzeppelin/-solidity AutoRefactorCoinage stores `_totalSupply` and `_balances` as RAY BASED value, `_allowances` as RAY FACTORED value. This takes public function (including _approve) parameters as RAY FACTORED value and internal function (including approve) parameters as RAY BASED value, and emits event in RAY FACTORED value. `RAY BASED` = `RAY FACTORED`  / factor  factor increases exponentially for each block mined.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address,uint256)\":{\"notice\":\"onlyMinter*\"},\"setFactor(uint256)\":{\"notice\":\"onlyOwner*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stake/tokens/RefactorCoinageSnapshot.sol\":\"RefactorCoinageSnapshot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/AuthControlCoinage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AuthRoleCoinage.sol\\\";\\n\\ncontract AuthControlCoinage is AuthRoleCoinage, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"AuthControl: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"AuthControl: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, msg.sender), \\\"AuthControl: Caller is not an operator\\\");\\n        _;\\n    }\\n\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function addMinter(address account) public virtual onlyOwner {\\n        grantRole(MINTER_ROLE, account);\\n    }\\n\\n    function addOperator(address account) public virtual onlyOwner {\\n        grantRole(OPERATOR_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function removeMinter(address account) public virtual onlyOwner {\\n        renounceRole(MINTER_ROLE, account);\\n    }\\n\\n    function removeOperator(address account) public virtual onlyOwner {\\n        renounceRole(OPERATOR_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function renounceMinter() public {\\n        renounceRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function renounceOperator() public {\\n        renounceRole(OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    function revokeMinter(address account) public onlyOwner {\\n        revokeRole(MINTER_ROLE, account);\\n    }\\n\\n    function revokeOperator(address account) public onlyOwner {\\n        revokeRole(OPERATOR_ROLE, account);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function isMinter(address account) public view virtual returns (bool) {\\n        return hasRole(MINTER_ROLE, account);\\n    }\\n\\n    function isOperator(address account) public view virtual returns (bool) {\\n        return hasRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x05d3bc59a8b85b910181bdd08a88aca1bdc8bb456a15b3290f2f016faef5e161\",\"license\":\"MIT\"},\"contracts/common/AuthRoleCoinage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AuthRoleCoinage {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\n}\\n\",\"keccak256\":\"0x7ebe0e7cf48fdb164648b0e9580f8ed989ff8fd517ab04f352765b1a1296852b\",\"license\":\"MIT\"},\"contracts/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract DSMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n    return x <= y ? x : y;\\n  }\\n  function max(uint x, uint y) internal pure returns (uint z) {\\n    return x >= y ? x : y;\\n  }\\n  function imin(int x, int y) internal pure returns (int z) {\\n    return x <= y ? x : y;\\n  }\\n  function imax(int x, int y) internal pure returns (int z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  uint constant WAD_ = 10 ** 18;\\n  uint constant RAY_ = 10 ** 27;\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), WAD_ / 2) / WAD_;\\n  }\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), RAY_ / 2) / RAY_;\\n  }\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, WAD_), y / 2) / y;\\n  }\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, RAY_), y / 2) / y;\\n  }\\n\\n  function wmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / WAD_;\\n  }\\n  function rmul2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, y) / RAY_;\\n  }\\n  function wdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, WAD_) / y;\\n  }\\n  function rdiv2(uint x, uint y) internal pure returns (uint z) {\\n    z = mul(x, RAY_) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //  x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //  floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function wpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : WAD_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = wmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = wmul(z, x);\\n      }\\n    }\\n  }\\n\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : RAY_;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x61ed70add2b6579a40cfea37088db547f1a411b039853d22aa6dc363c7b6ee60\",\"license\":\"MIT\"},\"contracts/libraries/SArrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary SArrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    function findIndex(uint256[] storage array, uint256 element\\n    ) internal view returns (uint256) {\\n        if (array.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (element >= array[array.length-1])\\n            return (array.length-1);\\n        if (element < array[0]) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = array.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n\\n            if (array[mid] <= element) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n\\n        return min;\\n    }\\n\\n    function findValue(uint256[] storage array, uint256 element\\n    ) internal view returns (uint256) {\\n        if (array.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (element >= array[array.length-1])\\n            return (array[array.length-1]);\\n        if (element < array[0]) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = array.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n\\n            if (array[mid] <= element) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n\\n        return array[min];\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x70f37452ce668ef88bc4dc3735fd204ea6ae0d438fd8f17ffe899e2e3e0ad4b0\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"contracts/stake/interfaces/AutoRefactorCoinageI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface AutoRefactorCoinageI {\\n  function factor() external view returns (uint256);\\n  function setFactor(uint256 factor) external returns (bool);\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function mint(address account, uint256 amount) external returns (bool);\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function addMinter(address account) external;\\n  function renounceMinter() external;\\n  function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xe78b1759d8c8395f0b4020bffe70eff2fe408edb0d367c451e8e9dd9d8ca6151\",\"license\":\"MIT\"},\"contracts/stake/interfaces/IRefactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRefactor {\\n  struct Balance {\\n        uint256 balance;\\n        uint256 refactoredCount;\\n    }\\n\\n    struct Factor {\\n        uint256 factor;\\n        uint256 refactorCount;\\n    }\\n}\\n\",\"keccak256\":\"0xaf08c2c878f8aee02ea35eafc845c7f3619ebef6428bdbb65d81a0fbcccccb42\",\"license\":\"MIT\"},\"contracts/stake/tokens/RefactorCoinageSnapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { IRefactor } from \\\"../interfaces/IRefactor.sol\\\";\\nimport { AutoRefactorCoinageI } from \\\"../interfaces/AutoRefactorCoinageI.sol\\\";\\nimport { DSMath } from \\\"../../libraries/DSMath.sol\\\";\\nimport \\\"../../libraries/SArrays.sol\\\";\\n\\nimport \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AuthControlCoinage } from \\\"../../common/AuthControlCoinage.sol\\\";\\nimport { RefactorCoinageSnapshotStorage } from \\\"./RefactorCoinageSnapshotStorage.sol\\\";\\n\\n\\ninterface IIISeigManager {\\n  function progressSnapshotId() external view returns (uint256);\\n}\\n/**\\n * @dev Implementation of coin age token based on ERC20 of openzeppelin/-solidity\\n *\\n * AutoRefactorCoinage stores `_totalSupply` and `_balances` as RAY BASED value,\\n * `_allowances` as RAY FACTORED value.\\n *\\n * This takes public function (including _approve) parameters as RAY FACTORED value\\n * and internal function (including approve) parameters as RAY BASED value, and emits event in RAY FACTORED value.\\n *\\n * `RAY BASED` = `RAY FACTORED`  / factor\\n *\\n *  factor increases exponentially for each block mined.\\n */\\ncontract RefactorCoinageSnapshot is ProxyStorage, AuthControlCoinage, RefactorCoinageSnapshotStorage, DSMath {\\n    using SArrays for uint256[];\\n\\n    event FactorSet(uint256 previous, uint256 current, uint256 shiftCount);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event ChangedBalance(address indexed account, IRefactor.Balance oldBalance, IRefactor.Balance newBalance, IRefactor.Balance oldTotalBalance, IRefactor.Balance newTotalBalance);\\n    event ChangedFactor(IRefactor.Factor previous, IRefactor.Factor next);\\n    // event Snapshotted(uint256 id);\\n\\n    function initialize (\\n      string memory name_,\\n      string memory symbol_,\\n      uint256 factor_,\\n      address seigManager_\\n    ) external {\\n\\n      require(factorSnapshots[0].factor == 0, \\\"already initialized\\\");\\n\\n      name = name_;\\n      symbol = symbol_;\\n      factorSnapshots[0] = IRefactor.Factor(factor_, 0);\\n      seigManager = seigManager_;\\n    }\\n\\n\\n    /**\\n     *  onlyOwner\\n     **/\\n\\n    function setFactor(uint256 factor_) external onlyOwner returns (bool) {\\n      IRefactor.Factor memory previous = _valueAtFactorLast();\\n      // uint256 previous = _factor;\\n\\n      uint256 count = 0;\\n      uint256 f = factor_;\\n\\n      for (; f >= REFACTOR_BOUNDARY; f = f / REFACTOR_DIVIDER) {\\n        count++;\\n      }\\n\\n      IRefactor.Factor memory nextFactor = IRefactor.Factor(f, count);\\n      _updateFactor(nextFactor);\\n\\n\\n      emit ChangedFactor(previous, nextFactor);\\n      return true;\\n    }\\n\\n    function setSeigManager(address _seigManager) external onlyOwner {\\n      seigManager = _seigManager;\\n    }\\n\\n    /**\\n     *  onlyMinter\\n     **/\\n\\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\\n          _mint(account, amount);\\n          return true;\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public onlyMinter {\\n        _burn(account, amount);\\n    }\\n\\n    // -------- external\\n\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 27;\\n    }\\n\\n    // -------- public\\n\\n    function factor() public view returns (uint256) {\\n      IRefactor.Factor memory _factor = _valueAtFactorLast();\\n      return _factor.factor * REFACTOR_DIVIDER ** _factor.refactorCount;\\n    }\\n\\n    // -------- internal\\n\\n    function _mint(address account, uint256 amount) internal {\\n      require(account != address(0), \\\"AutoRefactorCoinage: mint to the zero address\\\");\\n\\n      IRefactor.Factor memory f = _valueAtFactorLast();\\n      IRefactor.Balance memory _totalBalance = _valueAtTotalSupplyLast();\\n      IRefactor.Balance memory _accountBalance = _valueAtAccountBalanceLast(account);\\n\\n      uint256 currentAccountBalance = applyFactor(_accountBalance);\\n      uint256 currentTotalBalance = applyFactor(_totalBalance);\\n\\n      uint256 rbAmountAccount = _toRAYBased(currentAccountBalance + amount);\\n      uint256 rbAmountTotal = _toRAYBased(currentTotalBalance + amount);\\n\\n      IRefactor.Balance memory newAccountBalance = IRefactor.Balance(rbAmountAccount, f.refactorCount);\\n      IRefactor.Balance memory newTotalBalance = IRefactor.Balance(rbAmountTotal, f.refactorCount);\\n\\n      _update(newAccountBalance, newTotalBalance, account, true, true);\\n\\n      emit ChangedBalance(account, _accountBalance, newAccountBalance, _totalBalance, newTotalBalance);\\n\\n      emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n      require(account != address(0), \\\"AutoRefactorCoinage: burn from the zero address\\\");\\n      IRefactor.Factor memory f = _valueAtFactorLast();\\n      IRefactor.Balance memory _totalBalance = _valueAtTotalSupplyLast();\\n      IRefactor.Balance memory _accountBalance = _valueAtAccountBalanceLast(account);\\n\\n      uint256 currentTotalBalance = applyFactor(_totalBalance);\\n      uint256 currentAccountBalance = applyFactor(_accountBalance);\\n\\n      require(currentAccountBalance >= amount\\n        && currentTotalBalance >= amount, \\\"insufficient balance\\\");\\n\\n      uint256 rbAmountTotal = _toRAYBased(currentTotalBalance - amount);\\n      uint256 rbAmountAccount = _toRAYBased(currentAccountBalance - amount);\\n\\n      IRefactor.Balance memory newTotalBalance = IRefactor.Balance(rbAmountTotal, f.refactorCount);\\n      IRefactor.Balance memory newAccountBalance = IRefactor.Balance(rbAmountAccount, f.refactorCount);\\n\\n      _update(newAccountBalance, newTotalBalance, account, true, true);\\n\\n      emit ChangedBalance(account, _accountBalance, newAccountBalance, _totalBalance, newTotalBalance);\\n\\n      emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @param v the value to be factored\\n     */\\n    function _applyFactor(uint256 v, uint256 refactoredCount) internal view returns (uint256) {\\n\\n      if (v == 0) {\\n        return 0;\\n      }\\n\\n      IRefactor.Factor memory _factor = _valueAtFactorLast();\\n\\n      v = rmul2(v, _factor.factor);\\n\\n      if (_factor.refactorCount > refactoredCount) {\\n        v = v * REFACTOR_DIVIDER ** (_factor.refactorCount - refactoredCount);\\n      }\\n      return v;\\n    }\\n\\n    function _applyFactorAt(IRefactor.Balance memory _balance, IRefactor.Factor memory _factor) internal pure returns (uint256) {\\n      if (_balance.balance == 0) {\\n        return 0;\\n      }\\n      _balance.balance = rmul2(_balance.balance, _factor.factor);\\n      if(_factor.refactorCount > _balance.refactoredCount) {\\n        _balance.balance = _balance.balance * REFACTOR_DIVIDER ** (_factor.refactorCount - _balance.refactoredCount);\\n      }\\n      return _balance.balance;\\n    }\\n\\n    /**\\n     * @dev Calculate RAY BASED from RAY FACTORED\\n     */\\n    function _toRAYBased(uint256 rf) internal view returns (uint256 rb) {\\n      return rdiv2(rf, (_valueAtFactorLast()).factor);\\n    }\\n\\n    /**\\n     * @dev Calculate RAY FACTORED from RAY BASED\\n     */\\n    function _toRAYFactored(uint256 rb) internal view returns (uint256 rf) {\\n      return rmul2(rb, (_valueAtFactorLast()).factor);\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) internal view returns (uint256) {\\n        return (ids.length == 0? 0: ids[ids.length - 1]);\\n    }\\n\\n    function _updateFactor(IRefactor.Factor memory _factor) internal {\\n\\n      uint256 currentId = progressSnapshotId();\\n      uint256 factorIndex = _lastSnapshotId(factorSnapshotIds);\\n\\n      if (factorIndex < currentId) factorSnapshotIds.push(currentId);\\n      factorSnapshots[currentId] = _factor;\\n\\n    }\\n\\n    function _update(\\n      IRefactor.Balance memory _accountBalance,\\n      IRefactor.Balance memory _totalBalance,\\n      address account,\\n      bool accountBool,\\n      bool totalBool\\n    ) internal  {\\n\\n      uint256 currentId = progressSnapshotId();\\n      uint256 balanceIndex = _lastSnapshotId(accountBalanceIds[account]);\\n      uint256 totalIndex = _lastSnapshotId(totalSupplySnapshotIds);\\n\\n      if (accountBool) {\\n        require(account != address(0), \\\"zero account\\\");\\n        if (balanceIndex < currentId) accountBalanceIds[account].push(currentId);\\n        accountBalanceSnapshots[account][currentId] = _accountBalance;\\n      }\\n\\n      if (totalBool) {\\n        if (totalIndex < currentId) totalSupplySnapshotIds.push(currentId);\\n        totalSupplySnapshots[currentId] = _totalBalance;\\n      }\\n\\n    }\\n\\n    function progressSnapshotId() public view returns (uint256) {\\n        return IIISeigManager(seigManager).progressSnapshotId();\\n    }\\n\\n    function applyFactor(IRefactor.Balance memory _balance) public view returns (uint256 amount) {\\n\\n      return _applyFactor(_balance.balance, _balance.refactoredCount);\\n    }\\n\\n    function totalSupply() external view returns (uint256 amount)\\n    {\\n      amount = applyFactor(_valueAtTotalSupplyLast());\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256 amount)\\n    {\\n      amount = applyFactor(_valueAtAccountBalanceLast(account));\\n    }\\n\\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256 amount)\\n    {\\n      (IRefactor.Balance memory _balance,  IRefactor.Factor memory _factor) = getTotalAndFactorAt(snapshotId);\\n      amount = _applyFactorAt(_balance, _factor);\\n    }\\n\\n    function balanceOfAt(address account, uint256 snapshotId) external view\\n      returns (uint256 amount)\\n    {\\n      (IRefactor.Balance memory _balance,  IRefactor.Factor memory _factor) = getBalanceAndFactorAt(account, snapshotId);\\n      amount = _applyFactorAt(_balance, _factor);\\n    }\\n\\n    function getTotalAndFactor() public view returns (IRefactor.Balance memory, IRefactor.Factor memory)\\n    {\\n      return (_valueAtTotalSupplyLast(), _valueAtFactorLast());\\n    }\\n\\n    function getBalanceAndFactor(address account) public view returns (IRefactor.Balance memory, IRefactor.Factor memory)\\n    {\\n      return (_valueAtAccountBalanceLast(account), _valueAtFactorLast());\\n    }\\n\\n    function getTotalAndFactorAt(uint256 snapshotId) public view returns (IRefactor.Balance memory, IRefactor.Factor memory)\\n    {\\n      return (_valueAtTotalSupply(snapshotId), _valueAtFactor(snapshotId));\\n    }\\n\\n    function getBalanceAndFactorAt(address account, uint256 snapshotId) public view returns (IRefactor.Balance memory, IRefactor.Factor memory)\\n    {\\n      return (_valueAtAccount(snapshotId, account), _valueAtFactor(snapshotId));\\n    }\\n\\n    function _valueAtTotalSupplyLast() internal view\\n      returns (IRefactor.Balance memory)\\n    {\\n      uint256 index = 0;\\n      uint256 length = totalSupplySnapshotIds.length;\\n      if(length != 0) index = totalSupplySnapshotIds[length - 1];\\n      return totalSupplySnapshots[index];\\n    }\\n\\n    function _valueAtFactorLast() internal view\\n      returns (IRefactor.Factor memory)\\n    {\\n      uint256 index = 0;\\n      uint256 length = factorSnapshotIds.length;\\n      if(length != 0) index = factorSnapshotIds[length - 1];\\n      return factorSnapshots[index];\\n    }\\n\\n    function _valueAtAccountBalanceLast(address account) internal view\\n      returns (IRefactor.Balance memory)\\n    {\\n      uint256 index = 0;\\n      uint256 length = accountBalanceIds[account].length;\\n      if(length != 0) index = accountBalanceIds[account][length - 1];\\n      return accountBalanceSnapshots[account][index];\\n    }\\n\\n    function _valueAtTotalSupply(uint256 snapshotId) internal view\\n      returns (IRefactor.Balance memory balance)\\n    {\\n      require(snapshotId <= progressSnapshotId(), \\\"snapshotId > progressSnapshotId\\\");\\n      uint256 index = totalSupplySnapshotIds.findValue(snapshotId);\\n      return totalSupplySnapshots[index];\\n    }\\n\\n    function _valueAtFactor(uint256 snapshotId) internal view\\n      returns (IRefactor.Factor memory factor_)\\n    {\\n      require(snapshotId <= progressSnapshotId(), \\\"snapshotId > progressSnapshotId\\\");\\n      uint256 index = factorSnapshotIds.findValue(snapshotId);\\n      return factorSnapshots[index];\\n    }\\n\\n    function _valueAtAccount(uint256 snapshotId, address account) internal view\\n        returns (IRefactor.Balance memory balance)\\n    {\\n      require(snapshotId <= progressSnapshotId(), \\\"snapshotId > progressSnapshotId\\\");\\n      uint256 index = accountBalanceIds[account].findValue(snapshotId);\\n      return accountBalanceSnapshots[account][index];\\n    }\\n}\\n\",\"keccak256\":\"0x753b8b9edad171b063896e3ff5051fbb122f2f8bcd9d6189301e87a2dde29545\",\"license\":\"MIT\"},\"contracts/stake/tokens/RefactorCoinageSnapshotStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { IRefactor } from \\\"../interfaces/IRefactor.sol\\\";\\n\\n/// @title\\n/// @notice\\ncontract RefactorCoinageSnapshotStorage   {\\n\\n    uint256 public constant REFACTOR_BOUNDARY = 10 ** 28;\\n    uint256 public constant REFACTOR_DIVIDER = 2;\\n\\n    address public seigManager;\\n\\n    //=== ERC20\\n    string public name;\\n    string public symbol;\\n\\n    mapping(address => mapping(address => uint256)) public _allowances;\\n\\n    //---------------\\n    uint256[] public totalSupplySnapshotIds;\\n    mapping (uint256 => IRefactor.Balance) public totalSupplySnapshots;\\n\\n    uint256[] public factorSnapshotIds;\\n    mapping (uint256 => IRefactor.Factor) public factorSnapshots;\\n\\n    mapping (address => uint256[]) public accountBalanceIds;\\n    mapping (address => mapping (uint256 => IRefactor.Balance)) public accountBalanceSnapshots;\\n\\n    uint256 public lastSnapshotId;\\n}\\n\",\"keccak256\":\"0x54eae6eddf49ba50ade3d8219ce27089aeec5c798e585f1de4ad64095b2fbf22\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c8e806100206000396000f3fe608060405234801561001057600080fd5b50600436106103ae5760003560e01c80636d70f7ae116101f4578063983b2d561161011a578063b911135f116100ad578063d547741f1161007c578063d547741f146108d7578063f2fde38b146108ea578063f5b541a6146108fd578063fad8b32a1461092457600080fd5b8063b911135f14610861578063bd3a13f61461088a578063cfbd48851461089d578063d5391393146108b057600080fd5b8063aa271e1a116100e9578063aa271e1a14610801578063ac8a584a14610814578063b7c246d714610827578063b7d78b1a1461083a57600080fd5b8063983b2d56146107cb57806398650275146107de5780639870d7fe146107e6578063a217fddf146107f957600080fd5b806379cc6790116101925780638f32d59b116101615780638f32d59b1461074057806391d148541461077757806395d89b41146107b0578063981b24d0146107b857600080fd5b806379cc6790146106fe578063817e9d3114610711578063837afbc0146107245780638639583f1461072d57600080fd5b806370a08231116101ce57806370a08231146106bd578063715018a6146106d057806375829def146106d85780637657f20a146106eb57600080fd5b80636d70f7ae146106845780636fb7f5581461069757806370480275146106aa57600080fd5b80633092afd5116102d957806354f703f811610277578063614db8b211610246578063614db8b21461063e57806363a8fd89146106515780636957f38b1461065e57806369f499b11461067157600080fd5b806354f703f8146105d9578063550d01a3146105e157806356fabf68146106045780635deaecec1461061757600080fd5b806340c10f19116102b357806340c10f191461055f57806342966c68146105725780634ee2cd7e1461058557806350d2a2761461059857600080fd5b80633092afd51461052a578063313ce5671461053d57806336568abe1461054c57600080fd5b80631397704211610351578063248a9ca311610320578063248a9ca3146104d957806324d7806c146104fc5780632ab6f8db1461050f5780632f2ff15d1461051757600080fd5b806313977042146104a15780631785f53c146104a957806318160ddd146104be57806319d5dce9146104c657600080fd5b8063024c2ddd1161038d578063024c2ddd146104045780630461fdc51461042f57806306fdde031461047657806308eef06d1461048b57600080fd5b8062d87a9c146103b357806301f6a80a146103ce57806301ffc9a7146103e1575b600080fd5b6103bb600281565b6040519081526020015b60405180910390f35b6103bb6103dc36600461259e565b610937565b6103f46103ef3660046125ed565b610951565b60405190151581526020016103c5565b6103bb61041236600461262e565b600960209081526000928352604080842090915290825290205481565b61046161043d366004612661565b600f6020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016103c5565b61047e61095c565b6040516103c591906126af565b6104936109ea565b6040516103c59291906126e2565b6103bb610a2a565b6104bc6104b7366004612708565b610a9d565b005b6103bb610ad9565b6104936104d4366004612708565b610ae6565b6103bb6104e7366004612723565b60009081526005602052604090206001015490565b6103f461050a366004612708565b610b28565b6104bc610b68565b6104bc61052536600461273c565b610b94565b6104bc610538366004612708565b610bbe565b604051601b81526020016103c5565b6104bc61055a36600461273c565b610c09565b6103f461056d366004612661565b610c95565b6104bc610580366004612723565b610d32565b6103bb610593366004612661565b610d3c565b6105c16105a63660046125ed565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103c5565b6103bb610d62565b6103f46105ef366004612708565b60026020526000908152604090205460ff1681565b6103bb610612366004612723565b610d92565b610461610625366004612723565b600d602052600090815260409020805460019091015482565b6103bb61064c366004612723565b610db3565b6000546103f49060ff1681565b61049361066c366004612723565b610dc3565b6103bb61067f366004612661565b610dfd565b6103f4610692366004612708565b610e2e565b6006546105c1906001600160a01b031681565b6104bc6106b8366004612708565b610e6e565b6103bb6106cb366004612708565b610e9e565b6104bc610eac565b6104bc6106e6366004612708565b610edc565b6104bc6106f9366004612708565b610fc5565b6104bc61070c366004612661565b611019565b6103f461071f366004612723565b6110ad565b6103bb60105481565b61049361073b366004612661565b61117b565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166103f4565b6103f461078536600461273c565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61047e6111c1565b6103bb6107c6366004612723565b6111ce565b6104bc6107d9366004612708565b6111f2565b6104bc611241565b6104bc6107f4366004612708565b61126b565b6103bb600081565b6103f461080f366004612708565b6112ba565b6104bc610822366004612708565b6112fa565b6103bb6b204fce5e3e2502611000000081565b610461610848366004612723565b600b602052600090815260409020805460019091015482565b6105c161086f366004612723565b6001602052600090815260409020546001600160a01b031681565b6104bc6108983660046127ec565b611349565b6104bc6108ab366004612708565b611471565b6103bb7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6104bc6108e536600461273c565b6114bc565b6104bc6108f8366004612708565b6114e1565b6103bb7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b6104bc610932366004612708565b61150f565b600061094b8260000151836020015161155e565b92915050565b600061094b826115c8565b600780546109699061286a565b80601f01602080910402602001604051908101604052809291908181526020018280546109959061286a565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610a1a6115ed565b610a22611664565b915091509091565b600654604080516309cbb82160e11b815290516000926001600160a01b03169163139770429160048083019260209291908290030181865afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9891906128a4565b905090565b610aa633610b28565b610acb5760405162461bcd60e51b8152600401610ac2906128bd565b60405180910390fd5b610ad6600082610c09565b50565b6000610a986103dc6115ed565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610b17836116db565b610b1f611664565b91509150915091565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff1661094b565b610b927f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c33610c09565b565b600082815260056020526040902060010154610baf8161178e565b610bb98383611798565b505050565b610bc733610b28565b610be35760405162461bcd60e51b8152600401610ac2906128bd565b610ad67ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6001600160a01b0381163314610c875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ac2565b610c91828261183a565b5050565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610d1f5760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f742061206d696e6044820152623a32b960e91b6064820152608401610ac2565b610d2983836118bd565b50600192915050565b610ad63382611a6b565b6000806000610d4b858561117b565b91509150610d598282611c5f565b95945050505050565b600080610d6d611664565b905080602001516002610d8091906129fa565b8151610d8c9190612a06565b91505090565b600c8181548110610da257600080fd5b600091825260209091200154905081565b600a8181548110610da257600080fd5b60408051808201909152600080825260208201526040805180820190915260008082526020820152610df483611cc6565b610b1f84611d6b565b600e6020528160005260406000208181548110610e1957600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff1661094b565b610e7733610b28565b610e935760405162461bcd60e51b8152600401610ac2906128bd565b610ad6600082610b94565b600061094b6103dc836116db565b610eb533610b28565b610ed15760405162461bcd60e51b8152600401610ac2906128bd565b610b92600033610c09565b610ee533610b28565b610f015760405162461bcd60e51b8152600401610ac2906128bd565b6001600160a01b038116610f575760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610ac2565b6001600160a01b0381163303610faf5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610ac2565b610fba600082610b94565b610ad6600033610c09565b610fce33610b28565b610fea5760405162461bcd60e51b8152600401610ac2906128bd565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604090205460ff166110a35760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f742061206d696e6044820152623a32b960e91b6064820152608401610ac2565b610c918282611a6b565b60006110b833610b28565b6110d45760405162461bcd60e51b8152600401610ac2906128bd565b60006110de611664565b90506000835b6b204fce5e3e250261100000008110611117578161110181612a1d565b92506111109050600282612a36565b90506110e4565b604080518082019091528181526020810183905261113481611e10565b7f29ca2230155ed7b305631c2160bcce185fe471567c0e99ae17de3b6a909a838d84826040516111659291906126e2565b60405180910390a160019450505050505b919050565b604080518082019091526000808252602082015260408051808201909152600080825260208201526111ad8385611e89565b6111b684611d6b565b915091509250929050565b600880546109699061286a565b60008060006111dc84610dc3565b915091506111ea8282611c5f565b949350505050565b6111fb33610b28565b6112175760405162461bcd60e51b8152600401610ac2906128bd565b610ad67ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc982610b94565b610b927ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc933610c09565b61127433610b28565b6112905760405162461bcd60e51b8152600401610ac2906128bd565b610ad67f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610b94565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff1661094b565b61130333610b28565b61131f5760405162461bcd60e51b8152600401610ac2906128bd565b610ad67f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610c09565b60008052600d6020527f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee54156113c15760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610ac2565b60076113cd8582612aa6565b5060086113da8482612aa6565b506040805180820190915291825260006020808401828152918052600d905291517f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee5590517f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ef556006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555050565b61147a33610b28565b6114965760405162461bcd60e51b8152600401610ac2906128bd565b610ad67ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6000828152600560205260409020600101546114d78161178e565b610bb9838361183a565b6114ea33610b28565b6115065760405162461bcd60e51b8152600401610ac2906128bd565b610ad681610edc565b61151833610b28565b6115345760405162461bcd60e51b8152600401610ac2906128bd565b610ad67f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826114bc565b6000826000036115705750600061094b565b600061157a611664565b905061158a848260000151611f58565b935082816020015111156115c0578281602001516115a89190612b66565b6115b39060026129fa565b6115bd9085612a06565b93505b509192915050565b60006001600160e01b03198216637965db0b60e01b148061094b575061094b82611f82565b6040805180820190915260008082526020820152600a54600090801561163857600a61161a600183612b66565b8154811061162a5761162a612b79565b906000526020600020015491505b506000908152600b60209081526040918290208251808401909352805483526001015490820152919050565b6040805180820190915260008082526020820152600c5460009080156116af57600c611691600183612b66565b815481106116a1576116a1612b79565b906000526020600020015491505b506000908152600d60209081526040918290208251808401909352805483526001015490820152919050565b60408051808201909152600080825260208201526001600160a01b0382166000908152600e6020526040812054801561174f576001600160a01b0384166000908152600e60205260409020611731600183612b66565b8154811061174157611741612b79565b906000526020600020015491505b506001600160a01b039092166000908152600f602090815260408083209483529381529083902083518085019094528054845260010154908301525090565b610ad68133611fbe565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610c915760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117f63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610c915760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382166119395760405162461bcd60e51b815260206004820152602d60248201527f4175746f5265666163746f72436f696e6167653a206d696e7420746f2074686560448201527f207a65726f2061646472657373000000000000000000000000000000000000006064820152608401610ac2565b6000611943611664565b9050600061194f6115ed565b9050600061195c856116db565b9050600061196982610937565b9050600061197684610937565b9050600061198c6119878885612b8f565b612033565b9050600061199d6119878985612b8f565b60408051808201825284815260208a8101805182840152835180850190945284845251908301529192506119d582828d600180612047565b8a6001600160a01b03167f452b30c947ea249a4a1a2c0410f1780e479e022d06691644108f38c3b3e17c4788848b85604051611a149493929190612ba2565b60405180910390a26040518a81526001600160a01b038c16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050505050505050505050565b6001600160a01b038216611ae75760405162461bcd60e51b815260206004820152602f60248201527f4175746f5265666163746f72436f696e6167653a206275726e2066726f6d207460448201527f6865207a65726f206164647265737300000000000000000000000000000000006064820152608401610ac2565b6000611af1611664565b90506000611afd6115ed565b90506000611b0a856116db565b90506000611b1783610937565b90506000611b2483610937565b9050858110158015611b365750858210155b611b825760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610ac2565b6000611b916119878885612b66565b90506000611ba26119878985612b66565b60408051808201825284815260208a810180518284015283518085019094528484525190830152919250611bda81838d600180612047565b8a6001600160a01b03167f452b30c947ea249a4a1a2c0410f1780e479e022d06691644108f38c3b3e17c4788838b86604051611c199493929190612ba2565b60405180910390a26040518a81526000906001600160a01b038d16907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611a56565b81516000908103611c725750600061094b565b82518251611c809190611f58565b8352602080840151908301511115611cc05782602001518260200151611ca69190612b66565b611cb19060026129fa565b8351611cbd9190612a06565b83525b50505190565b6040805180820190915260008082526020820152611ce2610a2a565b821115611d315760405162461bcd60e51b815260206004820152601f60248201527f736e617073686f744964203e2070726f6772657373536e617073686f744964006044820152606401610ac2565b6000611d3e600a846121b6565b6000908152600b602090815260409182902082518084019093528054835260010154908201529392505050565b6040805180820190915260008082526020820152611d87610a2a565b821115611dd65760405162461bcd60e51b815260206004820152601f60248201527f736e617073686f744964203e2070726f6772657373536e617073686f744964006044820152606401610ac2565b6000611de3600c846121b6565b6000908152600d602090815260409182902082518084019093528054835260010154908201529392505050565b6000611e1a610a2a565b90506000611e28600c612302565b905081811015611e6857600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018290555b506000908152600d6020908152604090912082518155910151600190910155565b6040805180820190915260008082526020820152611ea5610a2a565b831115611ef45760405162461bcd60e51b815260206004820152601f60248201527f736e617073686f744964203e2070726f6772657373536e617073686f744964006044820152606401610ac2565b6001600160a01b0382166000908152600e60205260408120611f1690856121b6565b6001600160a01b0384166000908152600f6020908152604080832093835292815290829020825180840190935280548352600101549082015291505092915050565b60006b033b2e3c9fd0803ce8000000611f718484612344565b611f7b9190612a36565b9392505050565b60006301ffc9a760e01b6001600160e01b03198316148061094b5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610c9157611ff1816123b4565b611ffc8360206123c6565b60405160200161200d929190612be9565b60408051601f198184030181529082905262461bcd60e51b8252610ac2916004016126af565b600061094b82612041611664565b5161256f565b6000612051610a2a565b6001600160a01b0385166000908152600e602052604081209192509061207690612302565b90506000612084600a612302565b90508415612148576001600160a01b0386166120e25760405162461bcd60e51b815260206004820152600c60248201527f7a65726f206163636f756e7400000000000000000000000000000000000000006044820152606401610ac2565b82821015612116576001600160a01b0386166000908152600e60209081526040822080546001810182559083529120018390555b6001600160a01b0386166000908152600f60209081526040808320868452825290912089518155908901516001909101555b83156121ac578281101561218c57600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018390555b6000838152600b6020908152604090912088518155908801516001909101555b5050505050505050565b815460009081036121c95750600061094b565b825483906121d990600190612b66565b815481106121e9576121e9612b79565b9060005260206000200154821061222c578254839061220a90600190612b66565b8154811061221a5761221a612b79565b9060005260206000200154905061094b565b8260008154811061223f5761223f612b79565b90600052602060002001548210156122595750600061094b565b8254600090819061226c90600190612b66565b90505b818111156122db57600060026122858484612b8f565b612290906001612b8f565b61229a9190612a36565b9050848682815481106122af576122af612b79565b9060005260206000200154116122c7578092506122d5565b6122d2600182612b66565b91505b5061226f565b8482815481106122ed576122ed612b79565b90600052602060002001549250505092915050565b80546000901561233c578154829061231c90600190612b66565b8154811061232c5761232c612b79565b906000526020600020015461094b565b600092915050565b60008115806123685750828261235a8183612a06565b92506123669083612a36565b145b61094b5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610ac2565b606061094b6001600160a01b03831660145b606060006123d5836002612a06565b6123e0906002612b8f565b67ffffffffffffffff8111156123f8576123f8612588565b6040519080825280601f01601f191660200182016040528015612422576020820181803683370190505b509050600360fc1b8160008151811061243d5761243d612b79565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061246c5761246c612b79565b60200101906001600160f81b031916908160001a9053506000612490846002612a06565b61249b906001612b8f565b90505b6001811115612520577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106124dc576124dc612b79565b1a60f81b8282815181106124f2576124f2612b79565b60200101906001600160f81b031916908160001a90535060049490941c9361251981612c6a565b905061249e565b508315611f7b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ac2565b600081611f71846b033b2e3c9fd0803ce8000000612344565b634e487b7160e01b600052604160045260246000fd5b6000604082840312156125b057600080fd5b6040516040810181811067ffffffffffffffff821117156125d3576125d3612588565b604052823581526020928301359281019290925250919050565b6000602082840312156125ff57600080fd5b81356001600160e01b031981168114611f7b57600080fd5b80356001600160a01b038116811461117657600080fd5b6000806040838503121561264157600080fd5b61264a83612617565b915061265860208401612617565b90509250929050565b6000806040838503121561267457600080fd5b61267d83612617565b946020939093013593505050565b60005b838110156126a657818101518382015260200161268e565b50506000910152565b60208152600082518060208401526126ce81604085016020870161268b565b601f01601f19169190910160400192915050565b825181526020808401518183015282516040830152820151606082015260808101611f7b565b60006020828403121561271a57600080fd5b611f7b82612617565b60006020828403121561273557600080fd5b5035919050565b6000806040838503121561274f57600080fd5b8235915061265860208401612617565b600082601f83011261277057600080fd5b813567ffffffffffffffff8082111561278b5761278b612588565b604051601f8301601f19908116603f011681019082821181831017156127b3576127b3612588565b816040528381528660208588010111156127cc57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561280257600080fd5b843567ffffffffffffffff8082111561281a57600080fd5b6128268883890161275f565b9550602087013591508082111561283c57600080fd5b506128498782880161275f565b9350506040850135915061285f60608601612617565b905092959194509250565b600181811c9082168061287e57607f821691505b60208210810361289e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156128b657600080fd5b5051919050565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561295157816000190482111561293757612937612900565b8085161561294457918102915b93841c939080029061291b565b509250929050565b6000826129685750600161094b565b816129755750600061094b565b816001811461298b5760028114612995576129b1565b600191505061094b565b60ff8411156129a6576129a6612900565b50506001821b61094b565b5060208310610133831016604e8410600b84101617156129d4575081810a61094b565b6129de8383612916565b80600019048211156129f2576129f2612900565b029392505050565b6000611f7b8383612959565b808202811582820484141761094b5761094b612900565b600060018201612a2f57612a2f612900565b5060010190565b600082612a5357634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610bb957600081815260208120601f850160051c81016020861015612a7f5750805b601f850160051c820191505b81811015612a9e57828155600101612a8b565b505050505050565b815167ffffffffffffffff811115612ac057612ac0612588565b612ad481612ace845461286a565b84612a58565b602080601f831160018114612b095760008415612af15750858301515b600019600386901b1c1916600185901b178555612a9e565b600085815260208120601f198616915b82811015612b3857888601518255948401946001909101908401612b19565b5085821015612b565787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561094b5761094b612900565b634e487b7160e01b600052603260045260246000fd5b8082018082111561094b5761094b612900565b845181526020808601518183015284516040830152848101516060830152835160808301528381015160a0830152825160c083015282015160e08201526101008101610d59565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c2181601785016020880161268b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c5e81602884016020880161268b565b01602801949350505050565b600081612c7957612c79612900565b50600019019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103ae5760003560e01c80636d70f7ae116101f4578063983b2d561161011a578063b911135f116100ad578063d547741f1161007c578063d547741f146108d7578063f2fde38b146108ea578063f5b541a6146108fd578063fad8b32a1461092457600080fd5b8063b911135f14610861578063bd3a13f61461088a578063cfbd48851461089d578063d5391393146108b057600080fd5b8063aa271e1a116100e9578063aa271e1a14610801578063ac8a584a14610814578063b7c246d714610827578063b7d78b1a1461083a57600080fd5b8063983b2d56146107cb57806398650275146107de5780639870d7fe146107e6578063a217fddf146107f957600080fd5b806379cc6790116101925780638f32d59b116101615780638f32d59b1461074057806391d148541461077757806395d89b41146107b0578063981b24d0146107b857600080fd5b806379cc6790146106fe578063817e9d3114610711578063837afbc0146107245780638639583f1461072d57600080fd5b806370a08231116101ce57806370a08231146106bd578063715018a6146106d057806375829def146106d85780637657f20a146106eb57600080fd5b80636d70f7ae146106845780636fb7f5581461069757806370480275146106aa57600080fd5b80633092afd5116102d957806354f703f811610277578063614db8b211610246578063614db8b21461063e57806363a8fd89146106515780636957f38b1461065e57806369f499b11461067157600080fd5b806354f703f8146105d9578063550d01a3146105e157806356fabf68146106045780635deaecec1461061757600080fd5b806340c10f19116102b357806340c10f191461055f57806342966c68146105725780634ee2cd7e1461058557806350d2a2761461059857600080fd5b80633092afd51461052a578063313ce5671461053d57806336568abe1461054c57600080fd5b80631397704211610351578063248a9ca311610320578063248a9ca3146104d957806324d7806c146104fc5780632ab6f8db1461050f5780632f2ff15d1461051757600080fd5b806313977042146104a15780631785f53c146104a957806318160ddd146104be57806319d5dce9146104c657600080fd5b8063024c2ddd1161038d578063024c2ddd146104045780630461fdc51461042f57806306fdde031461047657806308eef06d1461048b57600080fd5b8062d87a9c146103b357806301f6a80a146103ce57806301ffc9a7146103e1575b600080fd5b6103bb600281565b6040519081526020015b60405180910390f35b6103bb6103dc36600461259e565b610937565b6103f46103ef3660046125ed565b610951565b60405190151581526020016103c5565b6103bb61041236600461262e565b600960209081526000928352604080842090915290825290205481565b61046161043d366004612661565b600f6020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016103c5565b61047e61095c565b6040516103c591906126af565b6104936109ea565b6040516103c59291906126e2565b6103bb610a2a565b6104bc6104b7366004612708565b610a9d565b005b6103bb610ad9565b6104936104d4366004612708565b610ae6565b6103bb6104e7366004612723565b60009081526005602052604090206001015490565b6103f461050a366004612708565b610b28565b6104bc610b68565b6104bc61052536600461273c565b610b94565b6104bc610538366004612708565b610bbe565b604051601b81526020016103c5565b6104bc61055a36600461273c565b610c09565b6103f461056d366004612661565b610c95565b6104bc610580366004612723565b610d32565b6103bb610593366004612661565b610d3c565b6105c16105a63660046125ed565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103c5565b6103bb610d62565b6103f46105ef366004612708565b60026020526000908152604090205460ff1681565b6103bb610612366004612723565b610d92565b610461610625366004612723565b600d602052600090815260409020805460019091015482565b6103bb61064c366004612723565b610db3565b6000546103f49060ff1681565b61049361066c366004612723565b610dc3565b6103bb61067f366004612661565b610dfd565b6103f4610692366004612708565b610e2e565b6006546105c1906001600160a01b031681565b6104bc6106b8366004612708565b610e6e565b6103bb6106cb366004612708565b610e9e565b6104bc610eac565b6104bc6106e6366004612708565b610edc565b6104bc6106f9366004612708565b610fc5565b6104bc61070c366004612661565b611019565b6103f461071f366004612723565b6110ad565b6103bb60105481565b61049361073b366004612661565b61117b565b3360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166103f4565b6103f461078536600461273c565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61047e6111c1565b6103bb6107c6366004612723565b6111ce565b6104bc6107d9366004612708565b6111f2565b6104bc611241565b6104bc6107f4366004612708565b61126b565b6103bb600081565b6103f461080f366004612708565b6112ba565b6104bc610822366004612708565b6112fa565b6103bb6b204fce5e3e2502611000000081565b610461610848366004612723565b600b602052600090815260409020805460019091015482565b6105c161086f366004612723565b6001602052600090815260409020546001600160a01b031681565b6104bc6108983660046127ec565b611349565b6104bc6108ab366004612708565b611471565b6103bb7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6104bc6108e536600461273c565b6114bc565b6104bc6108f8366004612708565b6114e1565b6103bb7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b6104bc610932366004612708565b61150f565b600061094b8260000151836020015161155e565b92915050565b600061094b826115c8565b600780546109699061286a565b80601f01602080910402602001604051908101604052809291908181526020018280546109959061286a565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610a1a6115ed565b610a22611664565b915091509091565b600654604080516309cbb82160e11b815290516000926001600160a01b03169163139770429160048083019260209291908290030181865afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9891906128a4565b905090565b610aa633610b28565b610acb5760405162461bcd60e51b8152600401610ac2906128bd565b60405180910390fd5b610ad6600082610c09565b50565b6000610a986103dc6115ed565b60408051808201909152600080825260208201526040805180820190915260008082526020820152610b17836116db565b610b1f611664565b91509150915091565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff1661094b565b610b927f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c33610c09565b565b600082815260056020526040902060010154610baf8161178e565b610bb98383611798565b505050565b610bc733610b28565b610be35760405162461bcd60e51b8152600401610ac2906128bd565b610ad67ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6001600160a01b0381163314610c875760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ac2565b610c91828261183a565b5050565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610d1f5760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f742061206d696e6044820152623a32b960e91b6064820152608401610ac2565b610d2983836118bd565b50600192915050565b610ad63382611a6b565b6000806000610d4b858561117b565b91509150610d598282611c5f565b95945050505050565b600080610d6d611664565b905080602001516002610d8091906129fa565b8151610d8c9190612a06565b91505090565b600c8181548110610da257600080fd5b600091825260209091200154905081565b600a8181548110610da257600080fd5b60408051808201909152600080825260208201526040805180820190915260008082526020820152610df483611cc6565b610b1f84611d6b565b600e6020528160005260406000208181548110610e1957600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff1661094b565b610e7733610b28565b610e935760405162461bcd60e51b8152600401610ac2906128bd565b610ad6600082610b94565b600061094b6103dc836116db565b610eb533610b28565b610ed15760405162461bcd60e51b8152600401610ac2906128bd565b610b92600033610c09565b610ee533610b28565b610f015760405162461bcd60e51b8152600401610ac2906128bd565b6001600160a01b038116610f575760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610ac2565b6001600160a01b0381163303610faf5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610ac2565b610fba600082610b94565b610ad6600033610c09565b610fce33610b28565b610fea5760405162461bcd60e51b8152600401610ac2906128bd565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604090205460ff166110a35760405162461bcd60e51b815260206004820152602360248201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f742061206d696e6044820152623a32b960e91b6064820152608401610ac2565b610c918282611a6b565b60006110b833610b28565b6110d45760405162461bcd60e51b8152600401610ac2906128bd565b60006110de611664565b90506000835b6b204fce5e3e250261100000008110611117578161110181612a1d565b92506111109050600282612a36565b90506110e4565b604080518082019091528181526020810183905261113481611e10565b7f29ca2230155ed7b305631c2160bcce185fe471567c0e99ae17de3b6a909a838d84826040516111659291906126e2565b60405180910390a160019450505050505b919050565b604080518082019091526000808252602082015260408051808201909152600080825260208201526111ad8385611e89565b6111b684611d6b565b915091509250929050565b600880546109699061286a565b60008060006111dc84610dc3565b915091506111ea8282611c5f565b949350505050565b6111fb33610b28565b6112175760405162461bcd60e51b8152600401610ac2906128bd565b610ad67ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc982610b94565b610b927ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc933610c09565b61127433610b28565b6112905760405162461bcd60e51b8152600401610ac2906128bd565b610ad67f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610b94565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff1661094b565b61130333610b28565b61131f5760405162461bcd60e51b8152600401610ac2906128bd565b610ad67f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610c09565b60008052600d6020527f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee54156113c15760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610ac2565b60076113cd8582612aa6565b5060086113da8482612aa6565b506040805180820190915291825260006020808401828152918052600d905291517f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee5590517f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ef556006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555050565b61147a33610b28565b6114965760405162461bcd60e51b8152600401610ac2906128bd565b610ad67ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6000828152600560205260409020600101546114d78161178e565b610bb9838361183a565b6114ea33610b28565b6115065760405162461bcd60e51b8152600401610ac2906128bd565b610ad681610edc565b61151833610b28565b6115345760405162461bcd60e51b8152600401610ac2906128bd565b610ad67f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826114bc565b6000826000036115705750600061094b565b600061157a611664565b905061158a848260000151611f58565b935082816020015111156115c0578281602001516115a89190612b66565b6115b39060026129fa565b6115bd9085612a06565b93505b509192915050565b60006001600160e01b03198216637965db0b60e01b148061094b575061094b82611f82565b6040805180820190915260008082526020820152600a54600090801561163857600a61161a600183612b66565b8154811061162a5761162a612b79565b906000526020600020015491505b506000908152600b60209081526040918290208251808401909352805483526001015490820152919050565b6040805180820190915260008082526020820152600c5460009080156116af57600c611691600183612b66565b815481106116a1576116a1612b79565b906000526020600020015491505b506000908152600d60209081526040918290208251808401909352805483526001015490820152919050565b60408051808201909152600080825260208201526001600160a01b0382166000908152600e6020526040812054801561174f576001600160a01b0384166000908152600e60205260409020611731600183612b66565b8154811061174157611741612b79565b906000526020600020015491505b506001600160a01b039092166000908152600f602090815260408083209483529381529083902083518085019094528054845260010154908301525090565b610ad68133611fbe565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610c915760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117f63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610c915760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382166119395760405162461bcd60e51b815260206004820152602d60248201527f4175746f5265666163746f72436f696e6167653a206d696e7420746f2074686560448201527f207a65726f2061646472657373000000000000000000000000000000000000006064820152608401610ac2565b6000611943611664565b9050600061194f6115ed565b9050600061195c856116db565b9050600061196982610937565b9050600061197684610937565b9050600061198c6119878885612b8f565b612033565b9050600061199d6119878985612b8f565b60408051808201825284815260208a8101805182840152835180850190945284845251908301529192506119d582828d600180612047565b8a6001600160a01b03167f452b30c947ea249a4a1a2c0410f1780e479e022d06691644108f38c3b3e17c4788848b85604051611a149493929190612ba2565b60405180910390a26040518a81526001600160a01b038c16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050505050505050505050565b6001600160a01b038216611ae75760405162461bcd60e51b815260206004820152602f60248201527f4175746f5265666163746f72436f696e6167653a206275726e2066726f6d207460448201527f6865207a65726f206164647265737300000000000000000000000000000000006064820152608401610ac2565b6000611af1611664565b90506000611afd6115ed565b90506000611b0a856116db565b90506000611b1783610937565b90506000611b2483610937565b9050858110158015611b365750858210155b611b825760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610ac2565b6000611b916119878885612b66565b90506000611ba26119878985612b66565b60408051808201825284815260208a810180518284015283518085019094528484525190830152919250611bda81838d600180612047565b8a6001600160a01b03167f452b30c947ea249a4a1a2c0410f1780e479e022d06691644108f38c3b3e17c4788838b86604051611c199493929190612ba2565b60405180910390a26040518a81526000906001600160a01b038d16907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611a56565b81516000908103611c725750600061094b565b82518251611c809190611f58565b8352602080840151908301511115611cc05782602001518260200151611ca69190612b66565b611cb19060026129fa565b8351611cbd9190612a06565b83525b50505190565b6040805180820190915260008082526020820152611ce2610a2a565b821115611d315760405162461bcd60e51b815260206004820152601f60248201527f736e617073686f744964203e2070726f6772657373536e617073686f744964006044820152606401610ac2565b6000611d3e600a846121b6565b6000908152600b602090815260409182902082518084019093528054835260010154908201529392505050565b6040805180820190915260008082526020820152611d87610a2a565b821115611dd65760405162461bcd60e51b815260206004820152601f60248201527f736e617073686f744964203e2070726f6772657373536e617073686f744964006044820152606401610ac2565b6000611de3600c846121b6565b6000908152600d602090815260409182902082518084019093528054835260010154908201529392505050565b6000611e1a610a2a565b90506000611e28600c612302565b905081811015611e6857600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018290555b506000908152600d6020908152604090912082518155910151600190910155565b6040805180820190915260008082526020820152611ea5610a2a565b831115611ef45760405162461bcd60e51b815260206004820152601f60248201527f736e617073686f744964203e2070726f6772657373536e617073686f744964006044820152606401610ac2565b6001600160a01b0382166000908152600e60205260408120611f1690856121b6565b6001600160a01b0384166000908152600f6020908152604080832093835292815290829020825180840190935280548352600101549082015291505092915050565b60006b033b2e3c9fd0803ce8000000611f718484612344565b611f7b9190612a36565b9392505050565b60006301ffc9a760e01b6001600160e01b03198316148061094b5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610c9157611ff1816123b4565b611ffc8360206123c6565b60405160200161200d929190612be9565b60408051601f198184030181529082905262461bcd60e51b8252610ac2916004016126af565b600061094b82612041611664565b5161256f565b6000612051610a2a565b6001600160a01b0385166000908152600e602052604081209192509061207690612302565b90506000612084600a612302565b90508415612148576001600160a01b0386166120e25760405162461bcd60e51b815260206004820152600c60248201527f7a65726f206163636f756e7400000000000000000000000000000000000000006044820152606401610ac2565b82821015612116576001600160a01b0386166000908152600e60209081526040822080546001810182559083529120018390555b6001600160a01b0386166000908152600f60209081526040808320868452825290912089518155908901516001909101555b83156121ac578281101561218c57600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018390555b6000838152600b6020908152604090912088518155908801516001909101555b5050505050505050565b815460009081036121c95750600061094b565b825483906121d990600190612b66565b815481106121e9576121e9612b79565b9060005260206000200154821061222c578254839061220a90600190612b66565b8154811061221a5761221a612b79565b9060005260206000200154905061094b565b8260008154811061223f5761223f612b79565b90600052602060002001548210156122595750600061094b565b8254600090819061226c90600190612b66565b90505b818111156122db57600060026122858484612b8f565b612290906001612b8f565b61229a9190612a36565b9050848682815481106122af576122af612b79565b9060005260206000200154116122c7578092506122d5565b6122d2600182612b66565b91505b5061226f565b8482815481106122ed576122ed612b79565b90600052602060002001549250505092915050565b80546000901561233c578154829061231c90600190612b66565b8154811061232c5761232c612b79565b906000526020600020015461094b565b600092915050565b60008115806123685750828261235a8183612a06565b92506123669083612a36565b145b61094b5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610ac2565b606061094b6001600160a01b03831660145b606060006123d5836002612a06565b6123e0906002612b8f565b67ffffffffffffffff8111156123f8576123f8612588565b6040519080825280601f01601f191660200182016040528015612422576020820181803683370190505b509050600360fc1b8160008151811061243d5761243d612b79565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061246c5761246c612b79565b60200101906001600160f81b031916908160001a9053506000612490846002612a06565b61249b906001612b8f565b90505b6001811115612520577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106124dc576124dc612b79565b1a60f81b8282815181106124f2576124f2612b79565b60200101906001600160f81b031916908160001a90535060049490941c9361251981612c6a565b905061249e565b508315611f7b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ac2565b600081611f71846b033b2e3c9fd0803ce8000000612344565b634e487b7160e01b600052604160045260246000fd5b6000604082840312156125b057600080fd5b6040516040810181811067ffffffffffffffff821117156125d3576125d3612588565b604052823581526020928301359281019290925250919050565b6000602082840312156125ff57600080fd5b81356001600160e01b031981168114611f7b57600080fd5b80356001600160a01b038116811461117657600080fd5b6000806040838503121561264157600080fd5b61264a83612617565b915061265860208401612617565b90509250929050565b6000806040838503121561267457600080fd5b61267d83612617565b946020939093013593505050565b60005b838110156126a657818101518382015260200161268e565b50506000910152565b60208152600082518060208401526126ce81604085016020870161268b565b601f01601f19169190910160400192915050565b825181526020808401518183015282516040830152820151606082015260808101611f7b565b60006020828403121561271a57600080fd5b611f7b82612617565b60006020828403121561273557600080fd5b5035919050565b6000806040838503121561274f57600080fd5b8235915061265860208401612617565b600082601f83011261277057600080fd5b813567ffffffffffffffff8082111561278b5761278b612588565b604051601f8301601f19908116603f011681019082821181831017156127b3576127b3612588565b816040528381528660208588010111156127cc57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561280257600080fd5b843567ffffffffffffffff8082111561281a57600080fd5b6128268883890161275f565b9550602087013591508082111561283c57600080fd5b506128498782880161275f565b9350506040850135915061285f60608601612617565b905092959194509250565b600181811c9082168061287e57607f821691505b60208210810361289e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156128b657600080fd5b5051919050565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561295157816000190482111561293757612937612900565b8085161561294457918102915b93841c939080029061291b565b509250929050565b6000826129685750600161094b565b816129755750600061094b565b816001811461298b5760028114612995576129b1565b600191505061094b565b60ff8411156129a6576129a6612900565b50506001821b61094b565b5060208310610133831016604e8410600b84101617156129d4575081810a61094b565b6129de8383612916565b80600019048211156129f2576129f2612900565b029392505050565b6000611f7b8383612959565b808202811582820484141761094b5761094b612900565b600060018201612a2f57612a2f612900565b5060010190565b600082612a5357634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610bb957600081815260208120601f850160051c81016020861015612a7f5750805b601f850160051c820191505b81811015612a9e57828155600101612a8b565b505050505050565b815167ffffffffffffffff811115612ac057612ac0612588565b612ad481612ace845461286a565b84612a58565b602080601f831160018114612b095760008415612af15750858301515b600019600386901b1c1916600185901b178555612a9e565b600085815260208120601f198616915b82811015612b3857888601518255948401946001909101908401612b19565b5085821015612b565787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561094b5761094b612900565b634e487b7160e01b600052603260045260246000fd5b8082018082111561094b5761094b612900565b845181526020808601518183015284516040830152848101516060830152835160808301528381015160a0830152825160c083015282015160e08201526101008101610d59565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c2181601785016020880161268b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c5e81602884016020880161268b565b01602801949350505050565b600081612c7957612c79612900565b50600019019056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "Implementation of coin age token based on ERC20 of openzeppelin/-solidity AutoRefactorCoinage stores `_totalSupply` and `_balances` as RAY BASED value, `_allowances` as RAY FACTORED value. This takes public function (including _approve) parameters as RAY FACTORED value and internal function (including approve) parameters as RAY BASED value, and emits event in RAY FACTORED value. `RAY BASED` = `RAY FACTORED`  / factor  factor increases exponentially for each block mined.",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(address,uint256)": {
        "notice": "onlyMinter*"
      },
      "setFactor(uint256)": {
        "notice": "onlyOwner*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11977,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11981,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11985,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11989,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 1801,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 24,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "_roles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 23529,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "seigManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 23531,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 23533,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 23539,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "_allowances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23542,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "totalSupplySnapshotIds",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 23547,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "totalSupplySnapshots",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Balance)13644_storage)"
      },
      {
        "astId": 23550,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "factorSnapshotIds",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 23555,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "factorSnapshots",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Factor)13649_storage)"
      },
      {
        "astId": 23560,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "accountBalanceIds",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 23567,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "accountBalanceSnapshots",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Balance)13644_storage))"
      },
      {
        "astId": 23569,
        "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
        "label": "lastSnapshotId",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Balance)13644_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IRefactor.Balance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Balance)13644_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Balance)13644_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRefactor.Balance)",
        "numberOfBytes": "32",
        "value": "t_struct(Balance)13644_storage"
      },
      "t_mapping(t_uint256,t_struct(Factor)13649_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRefactor.Factor)",
        "numberOfBytes": "32",
        "value": "t_struct(Factor)13649_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Balance)13644_storage": {
        "encoding": "inplace",
        "label": "struct IRefactor.Balance",
        "members": [
          {
            "astId": 13641,
            "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13643,
            "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
            "label": "refactoredCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Factor)13649_storage": {
        "encoding": "inplace",
        "label": "struct IRefactor.Factor",
        "members": [
          {
            "astId": 13646,
            "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
            "label": "factor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13648,
            "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
            "label": "refactorCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/stake/tokens/RefactorCoinageSnapshot.sol:RefactorCoinageSnapshot",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}