{
  "address": "0x93258413Ef2998572AB4B269b5DCb963dD35D440",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "autoCoinageLogic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLogic",
          "type": "address"
        }
      ],
      "name": "setAutoCoinageLogic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3322b1df5efe5495a944576afa2b2ae4366a74e3f72007b0a668659d97a3a691",
  "receipt": {
    "to": null,
    "from": "0x757DE9c340c556b56f62eFaE859Da5e08BAAE7A2",
    "contractAddress": "0x93258413Ef2998572AB4B269b5DCb963dD35D440",
    "transactionIndex": 63,
    "gasUsed": "2203461",
    "logsBloom": "0x
    "blockHash": "0x027d2c218389f6346d2948ab3631e3075e4db000c38b7a85bbfcbc52c7596f40",
    "transactionHash": "0x3322b1df5efe5495a944576afa2b2ae4366a74e3f72007b0a668659d97a3a691",
    "logs": [
      {
        "transactionIndex": 63,
        "blockNumber": 4799455,
        "transactionHash": "0x3322b1df5efe5495a944576afa2b2ae4366a74e3f72007b0a668659d97a3a691",
        "address": "0x93258413Ef2998572AB4B269b5DCb963dD35D440",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000757de9c340c556b56f62efae859da5e08baae7a2"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0x027d2c218389f6346d2948ab3631e3075e4db000c38b7a85bbfcbc52c7596f40"
      }
    ],
    "blockNumber": 4799455,
    "cumulativeGasUsed": "16849976",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6fdbdbbeb1082a0dfde1cee096e22e1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"autoCoinageLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLogic\",\"type\":\"address\"}],\"name\":\"setAutoCoinageLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stake/factory/CoinageFactory.sol\":\"CoinageFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/AuthControlCoinage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AuthRoleCoinage.sol\\\";\\n\\ncontract AuthControlCoinage is AuthRoleCoinage, ERC165Storage, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"AuthControl: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"AuthControl: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, msg.sender), \\\"AuthControl: Caller is not an operator\\\");\\n        _;\\n    }\\n\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function addMinter(address account) public virtual onlyOwner {\\n        grantRole(MINTER_ROLE, account);\\n    }\\n\\n    function addOperator(address account) public virtual onlyOwner {\\n        grantRole(OPERATOR_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function removeMinter(address account) public virtual onlyOwner {\\n        renounceRole(MINTER_ROLE, account);\\n    }\\n\\n    function removeOperator(address account) public virtual onlyOwner {\\n        renounceRole(OPERATOR_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) public virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newAdmin) public virtual onlyOwner {\\n        transferAdmin(newAdmin);\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function renounceMinter() public {\\n        renounceRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function renounceOperator() public {\\n        renounceRole(OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    function revokeMinter(address account) public onlyOwner {\\n        revokeRole(MINTER_ROLE, account);\\n    }\\n\\n    function revokeOperator(address account) public onlyOwner {\\n        revokeRole(OPERATOR_ROLE, account);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function isOwner() public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function isMinter(address account) public view virtual returns (bool) {\\n        return hasRole(MINTER_ROLE, account);\\n    }\\n\\n    function isOperator(address account) public view virtual returns (bool) {\\n        return hasRole(OPERATOR_ROLE, account);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x05d3bc59a8b85b910181bdd08a88aca1bdc8bb456a15b3290f2f016faef5e161\",\"license\":\"MIT\"},\"contracts/common/AuthRoleCoinage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract AuthRoleCoinage {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\n}\\n\",\"keccak256\":\"0x7ebe0e7cf48fdb164648b0e9580f8ed989ff8fd517ab04f352765b1a1296852b\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyAction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/// @title IProxyAction\\ninterface IProxyAction {\\n\\n    /// @dev set the implementation address and status of the proxy[index]\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _index index\\n    /// @param _alive _alive\\n    function setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) external;\\n\\n\\n    /// @dev set alive status of implementation\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _alive alive status\\n    function setAliveImplementation2(address newImplementation, bool _alive)\\n        external;\\n\\n\\n    /// @dev set selectors of Implementation\\n    /// @param _selectors being added selectors\\n    /// @param _imp implementation address\\n    function setSelectorImplementations2(\\n        bytes4[] calldata _selectors,\\n        address _imp\\n    ) external  ;\\n\\n\\n\\n    /// onlyOwner\\n\\n    /// @notice Set pause state\\n    /// @param _pause true:pause or false:resume\\n    function setProxyPause(bool _pause) external ;\\n\\n\\n    /// anybody\\n\\n    /// @dev view implementation address of selector of function\\n    /// @param _selector selector of function\\n    /// @return impl address of the implementation\\n    function getSelectorImplementation2(bytes4 _selector)\\n        external\\n        view\\n        returns (address impl);\\n\\n\\n    /// @dev view implementation address of the proxy[index]\\n    /// @param _index index of proxy\\n    /// @return address of the implementation\\n    function implementation2(uint256 _index) external view returns (address) ;\\n}\\n\\n\",\"keccak256\":\"0xe38287fd24503eb3b9de4a0b856cf270465d68c21677f6cacfccdb045b5c32b6\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyEvent.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/// @title IProxyEvent\\ninterface IProxyEvent {\\n\\n    event Upgraded(address indexed implementation);\\n\\n    event SetAliveImplementation(address indexed impl, bool alive);\\n    event SetSelectorImplementation(bytes4 indexed selector, address indexed impl);\\n\\n\\n}\\n\",\"keccak256\":\"0x742ba2dfeec4b3b3e49911108f50faebd48b345b4cc5ff25264b6d28586d34a0\",\"license\":\"MIT\"},\"contracts/proxy/ProxyCoinage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ProxyStorage.sol\\\";\\nimport { AuthControlCoinage } from \\\"../common/AuthControlCoinage.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IProxyEvent.sol\\\";\\nimport \\\"../interfaces/IProxyAction.sol\\\";\\n\\ncontract ProxyCoinage is ProxyStorage, AuthControlCoinage, IProxyEvent, IProxyAction\\n{\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor () {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(OPERATOR_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n\\n    /* ========== onlyOwner ========== */\\n\\n    /// @inheritdoc IProxyAction\\n    function setProxyPause(bool _pause) external override onlyOwner {\\n        pauseProxy = _pause;\\n    }\\n\\n    /// @notice Set implementation contract\\n    /// @param impl New implementation contract address\\n    function upgradeTo(address impl) external onlyOwner {\\n        require(impl != address(0), \\\"input is zero\\\");\\n        require(\\n            _implementation2(0) != impl,\\n            \\\"same addr\\\"\\n        );\\n        _setImplementation2(impl, 0, true);\\n        emit Upgraded(impl);\\n    }\\n\\n\\n    /// @inheritdoc IProxyAction\\n    function setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) external override onlyOwner {\\n        _setImplementation2(newImplementation, _index, _alive);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function setAliveImplementation2(address newImplementation, bool _alive)\\n        public override onlyOwner\\n    {\\n        _setAliveImplementation2(newImplementation, _alive);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function setSelectorImplementations2(\\n        bytes4[] calldata _selectors,\\n        address _imp\\n    ) public override onlyOwner {\\n        require(\\n            _selectors.length > 0,\\n            \\\"Proxy: _selectors's size is zero\\\"\\n        );\\n        require(aliveImplementation[_imp], \\\"Proxy: _imp is not alive\\\");\\n\\n        for (uint256 i = 0; i < _selectors.length; i++) {\\n            require(\\n                selectorImplementation[_selectors[i]] != _imp,\\n                \\\"LiquidityVaultProxy: same imp\\\"\\n            );\\n            selectorImplementation[_selectors[i]] = _imp;\\n            emit SetSelectorImplementation(_selectors[i], _imp);\\n        }\\n    }\\n\\n    /* ========== Anyone can   ========== */\\n\\n\\n\\n    /* ========== VIEW ========== */\\n\\n    /// @dev returns the implementation\\n    function implementation() external view returns (address) {\\n        return _implementation2(0);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function implementation2(uint256 _index) external override view returns (address) {\\n        return _implementation2(_index);\\n    }\\n\\n\\n    /// @inheritdoc IProxyAction\\n    function getSelectorImplementation2(bytes4 _selector)\\n        public override\\n        view\\n        returns (address impl)\\n    {\\n        address _impl = selectorImplementation[_selector];\\n        if (_impl == address(0))\\n            return proxyImplementation[0];\\n        else if (aliveImplementation[_impl]){\\n            return _impl;\\n        }\\n        return proxyImplementation[0];\\n    }\\n\\n\\n    /// @dev receive ether\\n    receive() external payable {\\n        revert(\\\"cannot receive Ether\\\");\\n    }\\n\\n    /// @dev fallback function , execute on undefined function call\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n    /// @dev view implementation address of the proxy[index]\\n    /// @param _index index of proxy\\n    /// @return impl address of the implementation\\n    function _implementation2(uint256 _index)\\n        internal\\n        view\\n        returns (address impl)\\n    {\\n        return proxyImplementation[_index];\\n    }\\n\\n    /// @dev fallback function , execute on undefined function call\\n    function _fallback() internal {\\n        address _impl = getSelectorImplementation2(msg.sig);\\n\\n        require(\\n            _impl != address(0) && !pauseProxy,\\n            \\\"Proxy: impl OR proxy is false\\\"\\n        );\\n\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n                // delegatecall returns 0 on error.\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    /// @dev set the implementation address and status of the proxy[index]\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _index index of proxy\\n    /// @param _alive alive status\\n    function _setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) internal {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"Proxy: not contract address\\\"\\n        );\\n        if (_alive) proxyImplementation[_index] = newImplementation;\\n        _setAliveImplementation2(newImplementation, _alive);\\n    }\\n\\n    /// @dev set alive status of implementation\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _alive alive status\\n    function _setAliveImplementation2(address newImplementation, bool _alive)\\n        internal\\n    {\\n        aliveImplementation[newImplementation] = _alive;\\n        emit SetAliveImplementation(newImplementation, _alive);\\n    }\\n\\n}\",\"keccak256\":\"0x13f393f2715178e35efc21b41890508bff49b9d7d6d0c819e24787a23624e7cf\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"contracts/stake/factory/CoinageFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import { AutoRefactorCoinageProxy } from \\\"../tokens/AutoRefactorCoinageProxy.sol\\\";\\nimport { CoinageFactoryI } from \\\"../interfaces/CoinageFactoryI.sol\\\";\\nimport { RefactorCoinageSnapshotProxy } from \\\"../tokens/RefactorCoinageSnapshotProxy.sol\\\";\\n\\ninterface IIAutoRefactorCoinage {\\n  function initialize (\\n      string memory name_,\\n      string memory symbol_,\\n      uint256 factor_,\\n      address seigManager_\\n    ) external;\\n}\\n\\ncontract CoinageFactory is CoinageFactoryI, Ownable {\\n  // uint256 constant public RAY = 10 ** 27; // 1 RAY\\n  // uint256 constant internal _DEFAULT_FACTOR = RAY;\\n  uint256 constant internal _DEFAULT_FACTOR = 10 ** 27;\\n\\n  address public autoCoinageLogic;\\n\\n  function setAutoCoinageLogic(address newLogic) external onlyOwner {\\n    autoCoinageLogic = newLogic;\\n  }\\n\\n  function deploy() external override returns (address) {\\n    RefactorCoinageSnapshotProxy c = new RefactorCoinageSnapshotProxy();\\n    c.upgradeTo(autoCoinageLogic);\\n    c.addMinter(msg.sender);\\n\\n\\n    IIAutoRefactorCoinage(address(c)).initialize(\\n      \\\"StakedWTON\\\",\\n      \\\"sWTON\\\",\\n      _DEFAULT_FACTOR,\\n      msg.sender\\n    );\\n\\n    // c.renounceMinter();\\n    c.transferOwnership(msg.sender);\\n\\n    return address(c);\\n  }\\n}\\n\",\"keccak256\":\"0xb662b647035a3073b272824b1ab9f0835a2536b110fb0a7d77782fff4ff70693\",\"license\":\"MIT\"},\"contracts/stake/interfaces/CoinageFactoryI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface CoinageFactoryI {\\n  function deploy() external returns (address);\\n}\\n\",\"keccak256\":\"0x15819487305118362e3d08ac1ac75e31e04da88cbae761d0393603d647c2c87f\",\"license\":\"MIT\"},\"contracts/stake/interfaces/IRefactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRefactor {\\n  struct Balance {\\n        uint256 balance;\\n        uint256 refactoredCount;\\n    }\\n\\n    struct Factor {\\n        uint256 factor;\\n        uint256 refactorCount;\\n    }\\n}\\n\",\"keccak256\":\"0xaf08c2c878f8aee02ea35eafc845c7f3619ebef6428bdbb65d81a0fbcccccb42\",\"license\":\"MIT\"},\"contracts/stake/tokens/RefactorCoinageSnapshotProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../proxy/ProxyCoinage.sol\\\";\\nimport \\\"./RefactorCoinageSnapshotStorage.sol\\\";\\n\\n/**\\n * @title\\n * @dev\\n */\\ncontract RefactorCoinageSnapshotProxy is ProxyCoinage, RefactorCoinageSnapshotStorage {\\n\\n}\\n\",\"keccak256\":\"0xf687f01154c6608bff702a7dd48d8ca9fe0c52392e49371bc7d95f20b85a69eb\",\"license\":\"MIT\"},\"contracts/stake/tokens/RefactorCoinageSnapshotStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { IRefactor } from \\\"../interfaces/IRefactor.sol\\\";\\n\\n/// @title\\n/// @notice\\ncontract RefactorCoinageSnapshotStorage   {\\n\\n    uint256 public constant REFACTOR_BOUNDARY = 10 ** 28;\\n    uint256 public constant REFACTOR_DIVIDER = 2;\\n\\n    address public seigManager;\\n\\n    //=== ERC20\\n    string public name;\\n    string public symbol;\\n\\n    mapping(address => mapping(address => uint256)) public _allowances;\\n\\n    //---------------\\n    uint256[] public totalSupplySnapshotIds;\\n    mapping (uint256 => IRefactor.Balance) public totalSupplySnapshots;\\n\\n    uint256[] public factorSnapshotIds;\\n    mapping (uint256 => IRefactor.Factor) public factorSnapshots;\\n\\n    mapping (address => uint256[]) public accountBalanceIds;\\n    mapping (address => mapping (uint256 => IRefactor.Balance)) public accountBalanceSnapshots;\\n\\n    uint256 public lastSnapshotId;\\n}\\n\",\"keccak256\":\"0x54eae6eddf49ba50ade3d8219ce27089aeec5c798e585f1de4ad64095b2fbf22\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6126778061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100b8578063989e3f28146100c9578063f2fde38b146100dc57600080fd5b8063715018a614610077578063775c300c146100815780638ad68763146100a5575b600080fd5b61007f6100ef565b005b610089610103565b6040516001600160a01b03909116815260200160405180910390f35b600154610089906001600160a01b031681565b6000546001600160a01b0316610089565b61007f6100d736600461046a565b6102f1565b61007f6100ea36600461046a565b610328565b6100f76103a6565b6101016000610400565b565b6000806040516101129061045d565b604051809103906000f08015801561012e573d6000803e3d6000fd5b50600154604051631b2ce7f360e11b81526001600160a01b039182166004820152919250821690633659cfe690602401600060405180830381600087803b15801561017857600080fd5b505af115801561018c573d6000803e3d6000fd5b5050604051634c1d96ab60e11b81523360048201526001600160a01b038416925063983b2d569150602401600060405180830381600087803b1580156101d157600080fd5b505af11580156101e5573d6000803e3d6000fd5b5050604051635e9d09fb60e11b815260806004820152600a60848201526929ba30b5b2b22baa27a760b11b60a482015260c06024820152600560c48201526439abaa27a760d91b60e48201526b033b2e3c9fd0803ce800000060448201523360648201526001600160a01b038416925063bd3a13f6915061010401600060405180830381600087803b15801561027a57600080fd5b505af115801561028e573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b1580156102d357600080fd5b505af11580156102e7573d6000803e3d6000fd5b5092949350505050565b6102f96103a6565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6103306103a6565b6001600160a01b03811661039a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103a381610400565b50565b6000546001600160a01b031633146101015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610391565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6121d08061049b83390190565b60006020828403121561047c57600080fd5b81356001600160a01b038116811461049357600080fd5b939250505056fe60806040523480156200001157600080fd5b506200001f6000336200007f565b6200004c7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960006200008f565b620000797f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c60006200008f565b6200017e565b6200008b8282620000da565b5050565b600082815260056020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166200008b5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200013a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612042806200018e6000396000f3fe6080604052600436106103375760003560e01c806370480275116101b05780639870d7fe116100ec578063b911135f11610095578063d547741f1161006f578063d547741f14610aa2578063f2fde38b14610ac2578063f5b541a614610ae2578063fad8b32a14610b1657610389565b8063b911135f14610a18578063cfbd488514610a4e578063d539139314610a6e57610389565b8063ac8a584a116100c6578063ac8a584a146109a4578063b7c246d7146109c4578063b7d78b1a146109e457610389565b80639870d7fe1461094f578063a217fddf1461096f578063aa271e1a1461098457610389565b80638b8f4a651161015957806391d148541161013357806391d14854146108bf57806395d89b4114610905578063983b2d561461091a578063986502751461093a57610389565b80638b8f4a651461083b5780638d4fdb401461085b5780638f32d59b1461087b57610389565b80637cb00d251161018a5780637cb00d25146107e55780637cd5f66314610805578063837afbc01461082557610389565b80637048027514610790578063715018a6146107b057806375829def146107c557610389565b80633659cfe61161027f5780635cc797d81161022857806363a8fd891161020257806363a8fd891461071657806369f499b1146107305780636d70f7ae146107505780636fb7f5581461077057610389565b80635cc797d8146106a25780635deaecec146106c2578063614db8b2146106f657610389565b8063550d01a311610259578063550d01a31461060c57806356fabf681461063c5780635c60da1b1461065c57610389565b80633659cfe61461057e5780634a5df50f1461059e57806350d2a276146105be57610389565b8063248a9ca3116102e15780632f2ff15d116102bb5780632f2ff15d1461051e5780633092afd51461053e57806336568abe1461055e57610389565b8063248a9ca3146104b957806324d7806c146104e95780632ab6f8db1461050957610389565b80630461fdc5116103125780630461fdc51461042357806306fdde03146104775780631785f53c1461049957610389565b8062d87a9c1461039357806301ffc9a7146103bb578063024c2ddd146103eb57610389565b366103895760405162461bcd60e51b815260206004820152601460248201527f63616e6e6f74207265636569766520457468657200000000000000000000000060448201526064015b60405180910390fd5b610391610b36565b005b34801561039f57600080fd5b506103a8600281565b6040519081526020015b60405180910390f35b3480156103c757600080fd5b506103db6103d6366004611c3e565b610bdf565b60405190151581526020016103b2565b3480156103f757600080fd5b506103a8610406366004611c84565b600960209081526000928352604080842090915290825290205481565b34801561042f57600080fd5b5061046261043e366004611cb7565b600f6020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016103b2565b34801561048357600080fd5b5061048c610bf0565b6040516103b29190611d05565b3480156104a557600080fd5b506103916104b4366004611d38565b610c7e565b3480156104c557600080fd5b506103a86104d4366004611d53565b60009081526005602052604090206001015490565b3480156104f557600080fd5b506103db610504366004611d38565b610cb1565b34801561051557600080fd5b50610391610cf1565b34801561052a57600080fd5b50610391610539366004611d6c565b610d1d565b34801561054a57600080fd5b50610391610559366004611d38565b610d42565b34801561056a57600080fd5b50610391610579366004611d6c565b610d8d565b34801561058a57600080fd5b50610391610599366004611d38565b610e19565b3480156105aa57600080fd5b506103916105b9366004611d8f565b610f49565b3480156105ca57600080fd5b506105f46105d9366004611c3e565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103b2565b34801561061857600080fd5b506103db610627366004611d38565b60026020526000908152604090205460ff1681565b34801561064857600080fd5b506103a8610657366004611d53565b6111cd565b34801561066857600080fd5b506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03166105f4565b3480156106ae57600080fd5b506103916106bd366004611e23565b6111ee565b3480156106ce57600080fd5b506104626106dd366004611d53565b600d602052600090815260409020805460019091015482565b34801561070257600080fd5b506103a8610711366004611d53565b61121d565b34801561072257600080fd5b506000546103db9060ff1681565b34801561073c57600080fd5b506103a861074b366004611cb7565b61122d565b34801561075c57600080fd5b506103db61076b366004611d38565b61125e565b34801561077c57600080fd5b506006546105f4906001600160a01b031681565b34801561079c57600080fd5b506103916107ab366004611d38565b61129e565b3480156107bc57600080fd5b506103916112ce565b3480156107d157600080fd5b506103916107e0366004611d38565b6112fe565b3480156107f157600080fd5b50610391610800366004611e4d565b6113e7565b34801561081157600080fd5b50610391610820366004611e68565b61141f565b34801561083157600080fd5b506103a860105481565b34801561084757600080fd5b506105f4610856366004611d53565b61144f565b34801561086757600080fd5b506105f4610876366004611c3e565b61146c565b34801561088757600080fd5b503360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166103db565b3480156108cb57600080fd5b506103db6108da366004611d6c565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561091157600080fd5b5061048c61152f565b34801561092657600080fd5b50610391610935366004611d38565b61153c565b34801561094657600080fd5b5061039161158b565b34801561095b57600080fd5b5061039161096a366004611d38565b6115b5565b34801561097b57600080fd5b506103a8600081565b34801561099057600080fd5b506103db61099f366004611d38565b611604565b3480156109b057600080fd5b506103916109bf366004611d38565b611644565b3480156109d057600080fd5b506103a86b204fce5e3e2502611000000081565b3480156109f057600080fd5b506104626109ff366004611d53565b600b602052600090815260409020805460019091015482565b348015610a2457600080fd5b506105f4610a33366004611d53565b6001602052600090815260409020546001600160a01b031681565b348015610a5a57600080fd5b50610391610a69366004611d38565b611693565b348015610a7a57600080fd5b506103a87ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b348015610aae57600080fd5b50610391610abd366004611d6c565b6116de565b348015610ace57600080fd5b50610391610add366004611d38565b611703565b348015610aee57600080fd5b506103a87f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b348015610b2257600080fd5b50610391610b31366004611d38565b611731565b6000610b4d6000356001600160e01b03191661146c565b90506001600160a01b03811615801590610b6a575060005460ff16155b610bb65760405162461bcd60e51b815260206004820152601d60248201527f50726f78793a20696d706c204f522070726f78792069732066616c73650000006044820152606401610380565b3660008037600080366000845af43d6000803e808015610bd5573d6000f35b3d6000fd5b505050565b6000610bea82611780565b92915050565b60078054610bfd90611e9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2990611e9b565b8015610c765780601f10610c4b57610100808354040283529160200191610c76565b820191906000526020600020905b815481529060010190602001808311610c5957829003601f168201915b505050505081565b610c8733610cb1565b610ca35760405162461bcd60e51b815260040161038090611ed5565b610cae600082610d8d565b50565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610bea565b610d1b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c33610d8d565b565b600082815260056020526040902060010154610d38816117a5565b610bda83836117af565b610d4b33610cb1565b610d675760405162461bcd60e51b815260040161038090611ed5565b610cae7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6001600160a01b0381163314610e0b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610380565b610e158282611851565b5050565b610e2233610cb1565b610e3e5760405162461bcd60e51b815260040161038090611ed5565b6001600160a01b038116610e945760405162461bcd60e51b815260206004820152600d60248201527f696e707574206973207a65726f000000000000000000000000000000000000006044820152606401610380565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03828116911603610f055760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b6044820152606401610380565b610f1281600060016118d4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610f5233610cb1565b610f6e5760405162461bcd60e51b815260040161038090611ed5565b81610fbb5760405162461bcd60e51b815260206004820181905260248201527f50726f78793a205f73656c6563746f727327732073697a65206973207a65726f6044820152606401610380565b6001600160a01b03811660009081526002602052604090205460ff166110235760405162461bcd60e51b815260206004820152601860248201527f50726f78793a205f696d70206973206e6f7420616c69766500000000000000006044820152606401610380565b60005b828110156111c757816001600160a01b03166003600086868581811061104e5761104e611f18565b90506020020160208101906110639190611c3e565b6001600160e01b03191681526020810191909152604001600020546001600160a01b0316036110d45760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646974795661756c7450726f78793a2073616d6520696d700000006044820152606401610380565b81600360008686858181106110eb576110eb611f18565b90506020020160208101906111009190611c3e565b6001600160e01b03191681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055821684848381811061115557611155611f18565b905060200201602081019061116a9190611c3e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f14ebc1c32aa68f4d766e89f3e546cee249f7df25183fc10ab1568d91c2ce9b7b60405160405180910390a3806111bf81611f44565b915050611026565b50505050565b600c81815481106111dd57600080fd5b600091825260209091200154905081565b6111f733610cb1565b6112135760405162461bcd60e51b815260040161038090611ed5565b610e15828261196c565b600a81815481106111dd57600080fd5b600e602052816000526040600020818154811061124957600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff16610bea565b6112a733610cb1565b6112c35760405162461bcd60e51b815260040161038090611ed5565b610cae600082610d1d565b6112d733610cb1565b6112f35760405162461bcd60e51b815260040161038090611ed5565b610d1b600033610d8d565b61130733610cb1565b6113235760405162461bcd60e51b815260040161038090611ed5565b6001600160a01b0381166113795760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610380565b6001600160a01b03811633036113d15760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610380565b6113dc600082610d1d565b610cae600033610d8d565b6113f033610cb1565b61140c5760405162461bcd60e51b815260040161038090611ed5565b6000805460ff1916911515919091179055565b61142833610cb1565b6114445760405162461bcd60e51b815260040161038090611ed5565b610bda8383836118d4565b6000818152600160205260408120546001600160a01b0316610bea565b6001600160e01b031981166000908152600360205260408120546001600160a01b0316806114ce575050600080525060016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b6001600160a01b03811660009081526002602052604090205460ff16156114f55792915050565b5050600080525060016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b60088054610bfd90611e9b565b61154533610cb1565b6115615760405162461bcd60e51b815260040161038090611ed5565b610cae7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc982610d1d565b610d1b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc933610d8d565b6115be33610cb1565b6115da5760405162461bcd60e51b815260040161038090611ed5565b610cae7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610d1d565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610bea565b61164d33610cb1565b6116695760405162461bcd60e51b815260040161038090611ed5565b610cae7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610d8d565b61169c33610cb1565b6116b85760405162461bcd60e51b815260040161038090611ed5565b610cae7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6000828152600560205260409020600101546116f9816117a5565b610bda8383611851565b61170c33610cb1565b6117285760405162461bcd60e51b815260040161038090611ed5565b610cae816112fe565b61173a33610cb1565b6117565760405162461bcd60e51b815260040161038090611ed5565b610cae7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826116de565b60006001600160e01b03198216637965db0b60e01b1480610bea5750610bea826119cb565b610cae8133611a07565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e155760008281526005602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561180d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610e155760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0383163b61192b5760405162461bcd60e51b815260206004820152601b60248201527f50726f78793a206e6f7420636f6e7472616374206164647265737300000000006044820152606401610380565b8015611966576000828152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b610bda83825b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f72558d9bfba4210f9ef095c782589484151f6d90f7a81bb3cb9b33efc695d324910160405180910390a25050565b60006301ffc9a760e01b6001600160e01b031983161480610bea5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e1557611a3a81611a7c565b611a45836020611a8e565b604051602001611a56929190611f5d565b60408051601f198184030181529082905262461bcd60e51b825261038091600401611d05565b6060610bea6001600160a01b03831660145b60606000611a9d836002611fde565b611aa8906002611ff5565b67ffffffffffffffff811115611ac057611ac0612008565b6040519080825280601f01601f191660200182016040528015611aea576020820181803683370190505b509050600360fc1b81600081518110611b0557611b05611f18565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b3457611b34611f18565b60200101906001600160f81b031916908160001a9053506000611b58846002611fde565b611b63906001611ff5565b90505b6001811115611be8577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611ba457611ba4611f18565b1a60f81b828281518110611bba57611bba611f18565b60200101906001600160f81b031916908160001a90535060049490941c93611be18161201e565b9050611b66565b508315611c375760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610380565b9392505050565b600060208284031215611c5057600080fd5b81356001600160e01b031981168114611c3757600080fd5b80356001600160a01b0381168114611c7f57600080fd5b919050565b60008060408385031215611c9757600080fd5b611ca083611c68565b9150611cae60208401611c68565b90509250929050565b60008060408385031215611cca57600080fd5b611cd383611c68565b946020939093013593505050565b60005b83811015611cfc578181015183820152602001611ce4565b50506000910152565b6020815260008251806020840152611d24816040850160208701611ce1565b601f01601f19169190910160400192915050565b600060208284031215611d4a57600080fd5b611c3782611c68565b600060208284031215611d6557600080fd5b5035919050565b60008060408385031215611d7f57600080fd5b82359150611cae60208401611c68565b600080600060408486031215611da457600080fd5b833567ffffffffffffffff80821115611dbc57600080fd5b818601915086601f830112611dd057600080fd5b813581811115611ddf57600080fd5b8760208260051b8501011115611df457600080fd5b602092830195509350611e0a9186019050611c68565b90509250925092565b80358015158114611c7f57600080fd5b60008060408385031215611e3657600080fd5b611e3f83611c68565b9150611cae60208401611e13565b600060208284031215611e5f57600080fd5b611c3782611e13565b600080600060608486031215611e7d57600080fd5b611e8684611c68565b925060208401359150611e0a60408501611e13565b600181811c90821680611eaf57607f821691505b602082108103611ecf57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611f5657611f56611f2e565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f95816017850160208801611ce1565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611fd2816028840160208801611ce1565b01602801949350505050565b8082028115828204841417610bea57610bea611f2e565b80820180821115610bea57610bea611f2e565b634e487b7160e01b600052604160045260246000fd5b60008161202d5761202d611f2e565b50600019019056fea164736f6c6343000813000aa164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100b8578063989e3f28146100c9578063f2fde38b146100dc57600080fd5b8063715018a614610077578063775c300c146100815780638ad68763146100a5575b600080fd5b61007f6100ef565b005b610089610103565b6040516001600160a01b03909116815260200160405180910390f35b600154610089906001600160a01b031681565b6000546001600160a01b0316610089565b61007f6100d736600461046a565b6102f1565b61007f6100ea36600461046a565b610328565b6100f76103a6565b6101016000610400565b565b6000806040516101129061045d565b604051809103906000f08015801561012e573d6000803e3d6000fd5b50600154604051631b2ce7f360e11b81526001600160a01b039182166004820152919250821690633659cfe690602401600060405180830381600087803b15801561017857600080fd5b505af115801561018c573d6000803e3d6000fd5b5050604051634c1d96ab60e11b81523360048201526001600160a01b038416925063983b2d569150602401600060405180830381600087803b1580156101d157600080fd5b505af11580156101e5573d6000803e3d6000fd5b5050604051635e9d09fb60e11b815260806004820152600a60848201526929ba30b5b2b22baa27a760b11b60a482015260c06024820152600560c48201526439abaa27a760d91b60e48201526b033b2e3c9fd0803ce800000060448201523360648201526001600160a01b038416925063bd3a13f6915061010401600060405180830381600087803b15801561027a57600080fd5b505af115801561028e573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b1580156102d357600080fd5b505af11580156102e7573d6000803e3d6000fd5b5092949350505050565b6102f96103a6565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6103306103a6565b6001600160a01b03811661039a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103a381610400565b50565b6000546001600160a01b031633146101015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610391565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6121d08061049b83390190565b60006020828403121561047c57600080fd5b81356001600160a01b038116811461049357600080fd5b939250505056fe60806040523480156200001157600080fd5b506200001f6000336200007f565b6200004c7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960006200008f565b620000797f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c60006200008f565b6200017e565b6200008b8282620000da565b5050565b600082815260056020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166200008b5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200013a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612042806200018e6000396000f3fe6080604052600436106103375760003560e01c806370480275116101b05780639870d7fe116100ec578063b911135f11610095578063d547741f1161006f578063d547741f14610aa2578063f2fde38b14610ac2578063f5b541a614610ae2578063fad8b32a14610b1657610389565b8063b911135f14610a18578063cfbd488514610a4e578063d539139314610a6e57610389565b8063ac8a584a116100c6578063ac8a584a146109a4578063b7c246d7146109c4578063b7d78b1a146109e457610389565b80639870d7fe1461094f578063a217fddf1461096f578063aa271e1a1461098457610389565b80638b8f4a651161015957806391d148541161013357806391d14854146108bf57806395d89b4114610905578063983b2d561461091a578063986502751461093a57610389565b80638b8f4a651461083b5780638d4fdb401461085b5780638f32d59b1461087b57610389565b80637cb00d251161018a5780637cb00d25146107e55780637cd5f66314610805578063837afbc01461082557610389565b80637048027514610790578063715018a6146107b057806375829def146107c557610389565b80633659cfe61161027f5780635cc797d81161022857806363a8fd891161020257806363a8fd891461071657806369f499b1146107305780636d70f7ae146107505780636fb7f5581461077057610389565b80635cc797d8146106a25780635deaecec146106c2578063614db8b2146106f657610389565b8063550d01a311610259578063550d01a31461060c57806356fabf681461063c5780635c60da1b1461065c57610389565b80633659cfe61461057e5780634a5df50f1461059e57806350d2a276146105be57610389565b8063248a9ca3116102e15780632f2ff15d116102bb5780632f2ff15d1461051e5780633092afd51461053e57806336568abe1461055e57610389565b8063248a9ca3146104b957806324d7806c146104e95780632ab6f8db1461050957610389565b80630461fdc5116103125780630461fdc51461042357806306fdde03146104775780631785f53c1461049957610389565b8062d87a9c1461039357806301ffc9a7146103bb578063024c2ddd146103eb57610389565b366103895760405162461bcd60e51b815260206004820152601460248201527f63616e6e6f74207265636569766520457468657200000000000000000000000060448201526064015b60405180910390fd5b610391610b36565b005b34801561039f57600080fd5b506103a8600281565b6040519081526020015b60405180910390f35b3480156103c757600080fd5b506103db6103d6366004611c3e565b610bdf565b60405190151581526020016103b2565b3480156103f757600080fd5b506103a8610406366004611c84565b600960209081526000928352604080842090915290825290205481565b34801561042f57600080fd5b5061046261043e366004611cb7565b600f6020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016103b2565b34801561048357600080fd5b5061048c610bf0565b6040516103b29190611d05565b3480156104a557600080fd5b506103916104b4366004611d38565b610c7e565b3480156104c557600080fd5b506103a86104d4366004611d53565b60009081526005602052604090206001015490565b3480156104f557600080fd5b506103db610504366004611d38565b610cb1565b34801561051557600080fd5b50610391610cf1565b34801561052a57600080fd5b50610391610539366004611d6c565b610d1d565b34801561054a57600080fd5b50610391610559366004611d38565b610d42565b34801561056a57600080fd5b50610391610579366004611d6c565b610d8d565b34801561058a57600080fd5b50610391610599366004611d38565b610e19565b3480156105aa57600080fd5b506103916105b9366004611d8f565b610f49565b3480156105ca57600080fd5b506105f46105d9366004611c3e565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103b2565b34801561061857600080fd5b506103db610627366004611d38565b60026020526000908152604090205460ff1681565b34801561064857600080fd5b506103a8610657366004611d53565b6111cd565b34801561066857600080fd5b506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03166105f4565b3480156106ae57600080fd5b506103916106bd366004611e23565b6111ee565b3480156106ce57600080fd5b506104626106dd366004611d53565b600d602052600090815260409020805460019091015482565b34801561070257600080fd5b506103a8610711366004611d53565b61121d565b34801561072257600080fd5b506000546103db9060ff1681565b34801561073c57600080fd5b506103a861074b366004611cb7565b61122d565b34801561075c57600080fd5b506103db61076b366004611d38565b61125e565b34801561077c57600080fd5b506006546105f4906001600160a01b031681565b34801561079c57600080fd5b506103916107ab366004611d38565b61129e565b3480156107bc57600080fd5b506103916112ce565b3480156107d157600080fd5b506103916107e0366004611d38565b6112fe565b3480156107f157600080fd5b50610391610800366004611e4d565b6113e7565b34801561081157600080fd5b50610391610820366004611e68565b61141f565b34801561083157600080fd5b506103a860105481565b34801561084757600080fd5b506105f4610856366004611d53565b61144f565b34801561086757600080fd5b506105f4610876366004611c3e565b61146c565b34801561088757600080fd5b503360009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604090205460ff166103db565b3480156108cb57600080fd5b506103db6108da366004611d6c565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561091157600080fd5b5061048c61152f565b34801561092657600080fd5b50610391610935366004611d38565b61153c565b34801561094657600080fd5b5061039161158b565b34801561095b57600080fd5b5061039161096a366004611d38565b6115b5565b34801561097b57600080fd5b506103a8600081565b34801561099057600080fd5b506103db61099f366004611d38565b611604565b3480156109b057600080fd5b506103916109bf366004611d38565b611644565b3480156109d057600080fd5b506103a86b204fce5e3e2502611000000081565b3480156109f057600080fd5b506104626109ff366004611d53565b600b602052600090815260409020805460019091015482565b348015610a2457600080fd5b506105f4610a33366004611d53565b6001602052600090815260409020546001600160a01b031681565b348015610a5a57600080fd5b50610391610a69366004611d38565b611693565b348015610a7a57600080fd5b506103a87ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b348015610aae57600080fd5b50610391610abd366004611d6c565b6116de565b348015610ace57600080fd5b50610391610add366004611d38565b611703565b348015610aee57600080fd5b506103a87f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b348015610b2257600080fd5b50610391610b31366004611d38565b611731565b6000610b4d6000356001600160e01b03191661146c565b90506001600160a01b03811615801590610b6a575060005460ff16155b610bb65760405162461bcd60e51b815260206004820152601d60248201527f50726f78793a20696d706c204f522070726f78792069732066616c73650000006044820152606401610380565b3660008037600080366000845af43d6000803e808015610bd5573d6000f35b3d6000fd5b505050565b6000610bea82611780565b92915050565b60078054610bfd90611e9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2990611e9b565b8015610c765780601f10610c4b57610100808354040283529160200191610c76565b820191906000526020600020905b815481529060010190602001808311610c5957829003601f168201915b505050505081565b610c8733610cb1565b610ca35760405162461bcd60e51b815260040161038090611ed5565b610cae600082610d8d565b50565b6001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc602052604081205460ff16610bea565b610d1b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c33610d8d565b565b600082815260056020526040902060010154610d38816117a5565b610bda83836117af565b610d4b33610cb1565b610d675760405162461bcd60e51b815260040161038090611ed5565b610cae7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6001600160a01b0381163314610e0b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610380565b610e158282611851565b5050565b610e2233610cb1565b610e3e5760405162461bcd60e51b815260040161038090611ed5565b6001600160a01b038116610e945760405162461bcd60e51b815260206004820152600d60248201527f696e707574206973207a65726f000000000000000000000000000000000000006044820152606401610380565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03828116911603610f055760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b6044820152606401610380565b610f1281600060016118d4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610f5233610cb1565b610f6e5760405162461bcd60e51b815260040161038090611ed5565b81610fbb5760405162461bcd60e51b815260206004820181905260248201527f50726f78793a205f73656c6563746f727327732073697a65206973207a65726f6044820152606401610380565b6001600160a01b03811660009081526002602052604090205460ff166110235760405162461bcd60e51b815260206004820152601860248201527f50726f78793a205f696d70206973206e6f7420616c69766500000000000000006044820152606401610380565b60005b828110156111c757816001600160a01b03166003600086868581811061104e5761104e611f18565b90506020020160208101906110639190611c3e565b6001600160e01b03191681526020810191909152604001600020546001600160a01b0316036110d45760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646974795661756c7450726f78793a2073616d6520696d700000006044820152606401610380565b81600360008686858181106110eb576110eb611f18565b90506020020160208101906111009190611c3e565b6001600160e01b03191681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055821684848381811061115557611155611f18565b905060200201602081019061116a9190611c3e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f14ebc1c32aa68f4d766e89f3e546cee249f7df25183fc10ab1568d91c2ce9b7b60405160405180910390a3806111bf81611f44565b915050611026565b50505050565b600c81815481106111dd57600080fd5b600091825260209091200154905081565b6111f733610cb1565b6112135760405162461bcd60e51b815260040161038090611ed5565b610e15828261196c565b600a81815481106111dd57600080fd5b600e602052816000526040600020818154811061124957600080fd5b90600052602060002001600091509150505481565b6001600160a01b03811660009081527f02634a7c777b8129955fe1824eee49ef19dfa96f2f4cb63212492c3d84eb58e6602052604081205460ff16610bea565b6112a733610cb1565b6112c35760405162461bcd60e51b815260040161038090611ed5565b610cae600082610d1d565b6112d733610cb1565b6112f35760405162461bcd60e51b815260040161038090611ed5565b610d1b600033610d8d565b61130733610cb1565b6113235760405162461bcd60e51b815260040161038090611ed5565b6001600160a01b0381166113795760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610380565b6001600160a01b03811633036113d15760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610380565b6113dc600082610d1d565b610cae600033610d8d565b6113f033610cb1565b61140c5760405162461bcd60e51b815260040161038090611ed5565b6000805460ff1916911515919091179055565b61142833610cb1565b6114445760405162461bcd60e51b815260040161038090611ed5565b610bda8383836118d4565b6000818152600160205260408120546001600160a01b0316610bea565b6001600160e01b031981166000908152600360205260408120546001600160a01b0316806114ce575050600080525060016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b6001600160a01b03811660009081526002602052604090205460ff16156114f55792915050565b5050600080525060016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b60088054610bfd90611e9b565b61154533610cb1565b6115615760405162461bcd60e51b815260040161038090611ed5565b610cae7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc982610d1d565b610d1b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc933610d8d565b6115be33610cb1565b6115da5760405162461bcd60e51b815260040161038090611ed5565b610cae7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610d1d565b6001600160a01b03811660009081527fca0a2f641ec05ca23127d994cf03ffc453db616acae0b86cb56bb95304d06854602052604081205460ff16610bea565b61164d33610cb1565b6116695760405162461bcd60e51b815260040161038090611ed5565b610cae7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c82610d8d565b61169c33610cb1565b6116b85760405162461bcd60e51b815260040161038090611ed5565b610cae7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9825b6000828152600560205260409020600101546116f9816117a5565b610bda8383611851565b61170c33610cb1565b6117285760405162461bcd60e51b815260040161038090611ed5565b610cae816112fe565b61173a33610cb1565b6117565760405162461bcd60e51b815260040161038090611ed5565b610cae7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826116de565b60006001600160e01b03198216637965db0b60e01b1480610bea5750610bea826119cb565b610cae8133611a07565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e155760008281526005602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561180d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1615610e155760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0383163b61192b5760405162461bcd60e51b815260206004820152601b60248201527f50726f78793a206e6f7420636f6e7472616374206164647265737300000000006044820152606401610380565b8015611966576000828152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b610bda83825b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f72558d9bfba4210f9ef095c782589484151f6d90f7a81bb3cb9b33efc695d324910160405180910390a25050565b60006301ffc9a760e01b6001600160e01b031983161480610bea5750506001600160e01b03191660009081526004602052604090205460ff1690565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16610e1557611a3a81611a7c565b611a45836020611a8e565b604051602001611a56929190611f5d565b60408051601f198184030181529082905262461bcd60e51b825261038091600401611d05565b6060610bea6001600160a01b03831660145b60606000611a9d836002611fde565b611aa8906002611ff5565b67ffffffffffffffff811115611ac057611ac0612008565b6040519080825280601f01601f191660200182016040528015611aea576020820181803683370190505b509050600360fc1b81600081518110611b0557611b05611f18565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b3457611b34611f18565b60200101906001600160f81b031916908160001a9053506000611b58846002611fde565b611b63906001611ff5565b90505b6001811115611be8577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611ba457611ba4611f18565b1a60f81b828281518110611bba57611bba611f18565b60200101906001600160f81b031916908160001a90535060049490941c93611be18161201e565b9050611b66565b508315611c375760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610380565b9392505050565b600060208284031215611c5057600080fd5b81356001600160e01b031981168114611c3757600080fd5b80356001600160a01b0381168114611c7f57600080fd5b919050565b60008060408385031215611c9757600080fd5b611ca083611c68565b9150611cae60208401611c68565b90509250929050565b60008060408385031215611cca57600080fd5b611cd383611c68565b946020939093013593505050565b60005b83811015611cfc578181015183820152602001611ce4565b50506000910152565b6020815260008251806020840152611d24816040850160208701611ce1565b601f01601f19169190910160400192915050565b600060208284031215611d4a57600080fd5b611c3782611c68565b600060208284031215611d6557600080fd5b5035919050565b60008060408385031215611d7f57600080fd5b82359150611cae60208401611c68565b600080600060408486031215611da457600080fd5b833567ffffffffffffffff80821115611dbc57600080fd5b818601915086601f830112611dd057600080fd5b813581811115611ddf57600080fd5b8760208260051b8501011115611df457600080fd5b602092830195509350611e0a9186019050611c68565b90509250925092565b80358015158114611c7f57600080fd5b60008060408385031215611e3657600080fd5b611e3f83611c68565b9150611cae60208401611e13565b600060208284031215611e5f57600080fd5b611c3782611e13565b600080600060608486031215611e7d57600080fd5b611e8684611c68565b925060208401359150611e0a60408501611e13565b600181811c90821680611eaf57607f821691505b602082108103611ecf57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526023908201527f41757468436f6e74726f6c3a2043616c6c6572206973206e6f7420616e20616460408201526236b4b760e91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611f5657611f56611f2e565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f95816017850160208801611ce1565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611fd2816028840160208801611ce1565b01602801949350505050565b8082028115828204841417610bea57610bea611f2e565b80820180821115610bea57610bea611f2e565b634e487b7160e01b600052604160045260246000fd5b60008161202d5761202d611f2e565b50600019019056fea164736f6c6343000813000aa164736f6c6343000813000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/stake/factory/CoinageFactory.sol:CoinageFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12679,
        "contract": "contracts/stake/factory/CoinageFactory.sol:CoinageFactory",
        "label": "autoCoinageLogic",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}